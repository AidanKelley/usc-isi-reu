@prefix schema: <https://schema.org/> .
@prefix sd: <https://w3id.org/okn/o/sd#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<https://example.org/objects/Software/tensorflow/> sd:author <https://example.org/objects/Organization/tensorflow> ;
    sd:dateCreated "2015-11-07T01:19:20+00:00"^^xsd:dateTime ;
    sd:dateModified "2020-06-05T21:01:48+00:00"^^xsd:dateTime ;
    sd:description "An Open Source Machine Learning Framework for Everyone"^^xsd:string ;
    sd:hasDownloadUrl "https://api.github.com/repos/tensorflow/tensorflow/{archive_format}{/ref}"^^xsd:anyURI ;
    sd:hasInstallInstructions """Linux GPU            |  | PyPI 
"""^^xsd:string,
        """See the [TensorFlow install guide](https://www.tensorflow.org/install) for the
[pip package](https://www.tensorflow.org/install/pip), to
[enable GPU support](https://www.tensorflow.org/install/gpu), use a
[Docker container](https://www.tensorflow.org/install/docker), and
[build from source](https://www.tensorflow.org/install/source).

To install the current release, which includes support for
[CUDA-enabled GPU cards](https://www.tensorflow.org/install/gpu) *(Ubuntu and
Windows)*:

```
$ pip install tensorflow
```

A smaller CPU-only package is also available:

```
$ pip install tensorflow-cpu
```

To update TensorFlow to the latest version, add `--upgrade` flag to the above
commands.

*Nightly binaries are available for testing using the
[tf-nightly](https://pypi.python.org/pypi/tf-nightly) and
[tf-nightly-cpu](https://pypi.python.org/pypi/tf-nightly-cpu) packages on PyPi.*

"""^^xsd:string ;
    sd:hasSourceCode <https://example.org/objects/SoftwareSource/tensorflow/> ;
    sd:hasVersion <https://example.org/objects/SoftwareVersion/tensorflow/v1.12.3>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v1.13.2>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v1.14.0>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v1.14.0-rc1>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v1.15.0>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v1.15.0-rc0>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v1.15.0-rc1>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v1.15.0-rc2>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v1.15.0-rc3>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v1.15.2>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v1.15.3>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0-beta0>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0-beta1>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0-rc0>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0-rc1>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0-rc2>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.0.1>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.0.2>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.1.0>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.1.0-rc0>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.1.0-rc1>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.1.0-rc2>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.1.1>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0-rc0>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0-rc1>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0-rc2>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0-rc3>,
        <https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0-rc4> ;
    sd:keywords "deep-learning"^^xsd:string,
        "deep-neural-networks"^^xsd:string,
        "distributed"^^xsd:string,
        "machine-learning"^^xsd:string,
        "ml"^^xsd:string,
        "neural-network"^^xsd:string,
        "python"^^xsd:string,
        "tensorflow"^^xsd:string ;
    sd:license "https://api.github.com/licenses/apache-2.0"^^xsd:anyURI ;
    sd:name "tensorflow"^^xsd:string .

<https://example.org/objects/Organization/tensorflow> a schema:Organization ;
    schema:additionalName "tensorflow"^^schema:Text .

<https://example.org/objects/Person/annarev> a schema:Person ;
    schema:additionalName "annarev"^^schema:Text .

<https://example.org/objects/SoftwareSource/tensorflow/> a sd:SoftwareSource ;
    sd:codeRepository "https://github.com/tensorflow/tensorflow"^^xsd:anyURI ;
    sd:description "An Open Source Machine Learning Framework for Everyone"^^xsd:string ;
    sd:programmingLanguage "Assembly"^^xsd:string,
        "Batchfile"^^xsd:string,
        "C"^^xsd:string,
        "C#"^^xsd:string,
        "C++"^^xsd:string,
        "CMake"^^xsd:string,
        "Dockerfile"^^xsd:string,
        "Go"^^xsd:string,
        "HTML"^^xsd:string,
        "Java"^^xsd:string,
        "Jupyter Notebook"^^xsd:string,
        "LLVM"^^xsd:string,
        "MLIR"^^xsd:string,
        "Makefile"^^xsd:string,
        "NASL"^^xsd:string,
        "Objective-C"^^xsd:string,
        "Objective-C++"^^xsd:string,
        "PHP"^^xsd:string,
        "Pascal"^^xsd:string,
        "Pawn"^^xsd:string,
        "Perl"^^xsd:string,
        "Python"^^xsd:string,
        "RobotFramework"^^xsd:string,
        "Roff"^^xsd:string,
        "Ruby"^^xsd:string,
        "Shell"^^xsd:string,
        "Smarty"^^xsd:string,
        "Starlark"^^xsd:string,
        "Swift"^^xsd:string,
        "Vim Snippet"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v1.12.3> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2019-06-21T17:20:35+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-06-21T23:36:21+00:00"^^xsd:dateTime ;
    sd:description """# Release 1.12.3\r
\r
## Bug Fixes and Other Changes\r
\r
* Updates `png_archive` dependency to 1.6.37 to not be affected by CVE-2019-7317, CVE-2018-13785, and CVE-2018-14048.\r
* Updates `sqlite` depenency to 3.28.0 to not be affected by CVE-2018-20506, CVE-2018-20346, and CVE-2018-20505."""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v1.12.3"^^xsd:anyURI ;
    sd:hasVersionId "v1.12.3"^^xsd:string ;
    sd:name "TensorFlow 1.12.3"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v1.13.2> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2019-07-15T18:15:22+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-07-16T09:29:11+00:00"^^xsd:dateTime ;
    sd:description """# Release 1.13.2\r
\r
## Bug Fixes and Other Changes\r
\r
* Updates `png_archive` dependency to 1.6.37 to not be affected by CVE-2019-7317, CVE-2018-13785, and CVE-2018-14048.\r
* Updates `sqlite` dependency to 3.28.0 to not be affected by CVE-2018-20506, CVE-2018-20346, and CVE-2018-20505."""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v1.13.2"^^xsd:anyURI ;
    sd:hasVersionId "v1.13.2"^^xsd:string ;
    sd:name "TensorFlow 1.13.2"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v1.14.0> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2019-06-18T22:48:23+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-06-19T04:45:10+00:00"^^xsd:dateTime ;
    sd:description """# Release 1.14.0\r
\r
## Major Features and Improvements\r
\r
* This is the first 1.x release containing the compat.v2 module. This module is required to allow libraries to publish code which works in both 1.x and 2.x. After this release, no backwards incompatible changes are allowed in the 2.0 Python API.\r
* Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r
* Non-Windows system libraries are now versioned. This should be a no-op for most users as it affects only system package maintainers or those building extensions to TensorFlow:\r
  * Python wheels (Pip packages) contain one library file.\r
    * Linux: `libtensorflow_framework.so.1`\r
    * MacOS: `libtensorflow_framework.1.dylib`\r
  * Our `libtensorflow` tarball archives contain the `libtensorflow` library and two symlinks. MacOS `.dylib` libraries are the same, but match MacOS library naming requirements (i.e. `libtensorflow.1.dylib`):\r
    * `libtensorflow.so.1.14.0`, the main library\r
    * `libtensorflow.so.1`, symlinked to the main library\r
    * `libtensorflow.so`, symlinked to `.so.1`\r
\r
## Behavioral changes\r
\r
* Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r
* Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r
* Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r
* tf.linspace(start, stop, num) now always uses "stop" as last value (for num > 1)\r
* The behavior of tf.gather is now correct when axis=None and batch_dims<0.\r
* Only create a GCS directory object if the object does not already exist.\r
* In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r
* Bug fix: loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a tf.distribute.Strategy.\r
* Updating cosine similarity loss - removed the negate sign from cosine similarity.\r
* DType is no longer convertible to an int. Use dtype.as_datatype_enum instead of int(dtype) to get the same result.\r
* Changed default for gradient accumulation for TPU embeddings to true.\r
* Callbacks now log values in eager mode when a deferred build model is used.\r
* Transitive dependencies on :pooling_ops were removed.  Some users may need to add explicit dependencies on :pooling_ops if they reference the operators from that library.\r
\r
## Bug Fixes and Other Changes\r
* Documentation\r
* Deprecations and Symbol renames.\r
  * The GPU configuration env parameter `TF_CUDA_HOST_MEM_LIMIT_IN_MB` has been changed to `TF_GPU_HOST_MEM_LIMIT_IN_MB`.\r
  * Remove unused StringViewVariantWrapper\r
  * Delete unused Fingerprint64Map op registration\r
  * SignatureDef util functions have been deprecated.\r
  * Renamed tf.image functions to remove duplicate "image" where it is redundant.\r
  * tf.keras.experimental.export renamed to tf.keras.experimental.export_saved_model\r
  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r
  * Tensor::UnsafeCopyFromInternal deprecated in favor Tensor::BitcastFrom\r
* Keras & Python API\r
  * Add v2 module aliases for:\r
    * tf.initializers => tf.keras.initializers\r
    * tf.losses => tf.keras.losses & tf.metrics => tf.keras.metrics\r
    * tf.optimizers => tf.keras.optimizers\r
  * Add tf.keras.layers.AbstractRNNCell as the preferred implementation of RNN cell for TF v2. User can use it to implement RNN cell with custom behavior.\r
  * Adding `clear_losses` API to be able to clear losses at the end of forward pass in a custom training loop in eager.\r
  * Add support for passing list of lists to the `metrics` param in Keras `compile`.\r
  * Added top-k to precision and recall to keras metrics.\r
  * Adding public APIs for `cumsum` and `cumprod` keras backend functions.\r
  * Fix: model.add_loss(symbolic_tensor) should work in ambient eager.\r
  * Add name argument to tf.string_split and tf.strings_split\r
  * Minor change to SavedModels exported from Keras using tf.keras.experimental.export. (SignatureDef key for evaluation mode is now "eval" instead of "test"). This will be reverted back to "test" in the near future.\r
  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r
  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r
  * Keras training and validation curves are shown on the same plot.\r
  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r
  * Removing of dtype in the constructor of initializers and partition_info in call.\r
* New ops and improved op functionality\r
  * Add OpKernels for some stateless maps\r
  * Add v2 APIs for AUCCurve and AUCSummationMethod enums. #tf-metrics-convergence\r
  * Add tf.math.nextafter op.\r
  * Add CompositeTensor base class.\r
  * Add tf.linalg.tridiagonal_solve op.\r
  * Add opkernel templates for common table operations.\r
  * Added GPU implementation of tf.linalg.tridiagonal_solve.\r
  * Added support for TFLite in TensorFlow 2.0.\r
  * Adds summary trace API for collecting graph and profile information.\r
  * Add batch_dims argument to tf.gather.\r
  * Add support for `add_metric` in the graph function mode.\r
  * Add C++ Gradient for BatchMatMulV2.\r
  * Added tf.random.binomial\r
  * Added gradient for SparseToDense op.\r
  * Add legacy string flat hash map op kernels\r
  * Add a ragged size op and register it to the op dispatcher\r
  * Add broadcasting support to tf.matmul.\r
  * Add ellipsis (...) support for tf.einsum()\r
  * Added LinearOperator.adjoint and LinearOperator.H (alias).\r
  * Added GPU implementation of tf.linalg.tridiagonal_solve.\r
  * Added strings.byte_split\r
  * Add RaggedTensor.placeholder()\r
  * Add a new "result_type" parameter to tf.strings.split\r
  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r
  * Add variant wrapper for absl::string_view\r
  * Add expand_composites argument to all nest.* methods.\r
  * Add pfor converter for Squeeze.\r
  * Bug fix for tf.tile gradient\r
  * Expose CriticalSection in core as tf.CriticalSection.\r
  * Update Fingerprint64Map to use aliases\r
  * ResourceVariable support for gather_nd.\r
  * ResourceVariable's gather op supports batch dimensions.\r
  * Variadic reduce is supported on CPU\r
  * Extend tf.function with basic support for CompositeTensors arguments (such as SparseTensor and RaggedTensor).\r
  * Add templates and interfaces for creating lookup tables\r
  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r
  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r
  * image.resize now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r
* Performance\r
  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r
  * Support for multi-host ncclAllReduce in Distribution Strategy.\r
  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r
* TensorFlow 2.0 Development\r
  * Add v2 sparse categorical crossentropy metric.\r
  * Allow non-Tensors through v2 losses.\r
  * Add UnifiedGRU as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from 'hard_sigmoid' to 'sigmoid', and 'reset_after' to True in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r
  * TF 2.0 - Update metric name to always reflect what the user has given in compile. Affects following cases 1. When name is given as 'accuracy'/'crossentropy' 2. When an aliased function name is used eg. 'mse' 3. Removing the `weighted` prefix from weighted metric names.\r
  * Begin adding Go wrapper for C Eager API\r
  * image.resize in 2.0 now supports gradients for the new resize kernels.\r
  * removed tf.string_split from v2 API\r
  * Expose tf.contrib.proto.* ops in tf.io (they will exist in TF2)\r
  * "Updates the TFLiteConverter API in 2.0. Changes from_concrete_function to from_concrete_functions."\r
  * Enable tf.distribute.experimental.MultiWorkerMirroredStrategy working in eager mode.\r
  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r
* TensorFlow Lite\r
  * "Adds support for tflite_convert in 2.0."\r
  * "Remove lite.OpHint, lite.experimental, and lite.constant from 2.0 API."\r
* tf.contrib\r
  * Added Neural Turing Implementation as described in https://arxiv.org/abs/1807.08518.\r
  * Remove tf.contrib.timeseries dependency on TF distributions.\r
* tf.data\r
  * Add num_parallel_reads and passing in a Dataset containing filenames into TextLineDataset and FixedLengthRecordDataset\r
  * Going forward we operate in TF 2.0, this change is part of the effort to slowly converting XYZDataset to DatasetV2 type which is the official version going to be used in TF 2.0 and motivated by some compatibility issue found, _BigtableXYZDataset (of type DatasetV2) does not implement the _as_variant_tensor() of DatasetV1, when moving contrib.bigtable to tensorflow_io. Converting into DatasetV2 removes the overheads to maintain V1 while we are moving into TF 2.0.\r
  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r
  * Add support for TensorArrays to tf.data Dataset.\r
  * Switching tf.data functions to use `defun`, providing an escape hatch to continue using the legacy `Defun`.\r
* Toolchains\r
  * CUDNN_INSTALL_PATH, TENSORRT_INSTALL_PATH, NCCL_INSTALL_PATH, NCCL_HDR_PATH are deprecated. Use TF_CUDA_PATHS instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r
  * TF code now resides in `tensorflow_core` and `tensorflow` is just a virtual pip package. No code changes are needed for projects using TensorFlow, the change is transparent\r
* XLA\r
  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r
  * Adds Philox support to new stateful RNG's XLA path.\r
* Estimator\r
  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r
  * Replace `contrib` references with `tf.estimator.experimental.*` for APIs in `early_stopping.py`\r
  * Determining the “correct” value of the `--iterations_per_loop` for TPUEstimator or DistributionStrategy continues to be a challenge for our users. We propose dynamically tuning the `--iterations_per_loop` variable, specifically for using TPUEstimator in training mode, based on a user target TPU execution time. Users might specify a value such as: `--iterations_per_loop=300s`, which will result in roughly 300 seconds being spent on the TPU between host side operations.\r
\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
1e100, 4d55397500, a6802739, abenmao, Adam Richter, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Alex, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, Andreas Eberle, Andy Craze, Anthony Hsu, Anthony Platanios, Anuj Rawat, Armen Poghosov, armenpoghosov, arp95, Arpit Shah, Ashwin Ramaswami, Augustina Ragwitz, Aurelien Geron, AuréLien Geron, avasid, aweers, awesomealex1, Ayush Agrawal, Bayberry Z, Ben Barsdell, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, BléNesi Attila, Bodin-E, Brandon Carter, candy.dc, Cheng Chang, Chao Liu, chenchc, chie8842, Christian Hansen, Christian Sigg,  Christoph Boeddeker, Clayne Robison, crafet, csukuangfj, ctiijima, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Daniel Rasmussen, Daniel Salvadori, Dave Airlie, David Norman, Dayananda V, Dayananda-V, delock, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Donovan Ong, Drew Szurko, Duncan Riach, Dustin Neighly, Edward Forgacs, EFanZh, Evgeniy Polyakov, Fangjun Kuang, Federico Martinez, Fei Hu, Felix Lemke, Filip Matzner, fo40225, Fred Reiss, Gautam, gehring, Geoffrey Irving, George Sterpu, Grzegorz George Pawelczak, Grzegorz Pawelczak, Gurpreet Singh, Gyoung-Yoon Ryoo, HanGuo97, Hanton Yang, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, Huan Li (李卓桓), I-Hong Jhuo, Ilango R, Innovimax, Irene Dea, Jacky Ko, Jakub Lipinski, Jason Zaman, jcf94, Jeffrey Poznanovic, Jens Elofsson, Jeroen BéDorf, jhalakp, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Joeran Beel, Jonas Rauber, Jonathan, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K Yasaswi Sri Chandra Gandhi, K. Hodges, Kaixi Hou, Karl Lessard, Karl Weinmeister, Karthik Muthuraman, Kashif Rasul, KDR, Keno Fischer, Kevin Mader, Kilaru Yasaswi Sri Chandra Gandhi, kjopek, Koan-Sin Tan, kouml, ktaebum, Lakshay Tokas, Laurent Le Brun, Letian Kang, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, manhyuk, Marco Gaido, Marek Drozdowski, Mark Collier, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael KäUfl, MickaëL Schoentgen, Miguel Morin, Mihail Salnikov, Mikalai Drabovich, Mike Arpaia, Mike Holcomb, monklof, Moses Marin, Mr. Metal, Mshr-H, nammbash, Natalia Gimelshein, Nathan Luehr, Nayana-Ibm, neargye, Neeraj Pradhan, Nehal J Wani, Nick, Nick Lewycky, Niels Ole Salscheider, Niranjan Hasabnis, nlewycky, Nuka-137, Nutti, olicht, omeir1, P Sudeepam, Palmer Lao, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Pavel Akhtyamov, Pavel Samolysov, PENGWA, Philipp Jund, Pooya Davoodi, Pranav Marathe, R S Nikhil Krishna, Rohit Gupta, Roland Zimmermann, Roman Soldatow, rthadur, Ruizhe, Ryan Jiang, saishruthi, Samantha Andow, Sami Kama, Sana-Damani, Saurabh Deoras, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Sergii Khomenko, Serv-Inc, Shahzad Lone, Shashank Gupta, Shashi, shashvat, Shashvat Chand Shahi, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, sremedios, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Subin, Sumesh Udayakumaran, sunway513, Supriya Rao, sxwang, Takeo Sawada, Taylor Jakobson, Taylor Thornton, Ted Chang, ThisIsPIRI, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Tim Zaman, tomguluson92, Tongxuan Liu, Trent Lo, TungJerry, Tyorden, v1incent, Vagif, vcarpani, Vijay Ravichandran, Vikram Tiwari, Viktor Gal, Vincent, Vishnuvardhan Janapati, Vishwak Srinivasan, Vitor-Alves, wangsiyu, wateryzephyr, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Yasuhiro Matsumoto, ymodak, Yong Tang, Younes Khoudli, Yuan (Terry) Tang, Yuan Lin, Yves-Noel Weweler, Zantares, zhuoryin, zjjott, 卜居, 王振华 (Zhenhua Wang), 黄鑫"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v1.14.0"^^xsd:anyURI ;
    sd:hasVersionId "v1.14.0"^^xsd:string ;
    sd:name "TensorFlow 1.14.0"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v1.14.0-rc1> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2019-06-08T02:23:20+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-06-08T05:25:41+00:00"^^xsd:dateTime ;
    sd:description """# Release 1.14.0\r
\r
## Major Features and Improvements\r
\r
* This is the first 1.x release containing the compat.v2 module. This module is required to allow libraries to publish code which works in both 1.x and 2.x. After this release, no backwards incompatible changes are allowed in the 2.0 Python API.\r
* Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r
* Non-Windows system libraries are now versioned. This should be a no-op for most users as it affects only system package maintainers or those building extensions to TensorFlow:\r
 * Python wheels (Pip packages) contain one library file.\r
   * Linux: `libtensorflow_framework.so.1`\r
   * MacOS: `libtensorflow_framework.1.dylib`\r
 * Our `libtensorflow` tarball archives contain the `libtensorflow` library and two symlinks. MacOS `.dylib` libraries are the same, but match MacOS library naming requirements (i.e. `libtensorflow.1.dylib`):\r
   * `libtensorflow.so.1.14.0`, the main library\r
   * `libtensorflow.so.1`, symlinked to the main library\r
   * `libtensorflow.so`, symlinked to `.so.1`\r
\r
## Behavioral changes\r
\r
* Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r
* Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r
* Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r
* tf.linspace(start, stop, num) now always uses "stop" as last value (for num > 1)\r
* The behavior of tf.gather is now correct when axis=None and batch_dims<0.\r
* Only create a GCS directory object if the object does not already exist.\r
* In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r
* Bug fix: loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a tf.distribute.Strategy.\r
* Updating cosine similarity loss - removed the negate sign from cosine similarity.\r
* DType is no longer convertible to an int. Use dtype.as_datatype_enum instead of int(dtype) to get the same result.\r
* Changed default for gradient accumulation for TPU embeddings to true.\r
* Callbacks now log values in eager mode when a deferred build model is used.\r
* Transitive dependencies on :pooling_ops were removed.  Some users may need to add explicit dependencies on :pooling_ops if they reference the operators from that library.\r
\r
## Bug Fixes and Other Changes\r
* Documentation\r
* Deprecations and Symbol renames.\r
  * Remove unused StringViewVariantWrapper\r
  * Delete unused Fingerprint64Map op registration\r
  * SignatureDef util functions have been deprecated.\r
  * Renamed tf.image functions to remove duplicate "image" where it is redundant.\r
  * tf.keras.experimental.export renamed to tf.keras.experimental.export_saved_model\r
  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r
  * Tensor::UnsafeCopyFromInternal deprecated in favor Tensor::BitcastFrom\r
* Keras & Python API\r
  * Add v2 module aliases for:\r
    * tf.initializers => tf.keras.initializers\r
    * tf.losses => tf.keras.losses & tf.metrics => tf.keras.metrics\r
    * tf.optimizers => tf.keras.optimizers\r
  * Add tf.keras.layers.AbstractRNNCell as the preferred implementation of RNN cell for TF v2. User can use it to implement RNN cell with custom behavior.\r
  * Adding `clear_losses` API to be able to clear losses at the end of forward pass in a custom training loop in eager.\r
  * Add support for passing list of lists to the `metrics` param in Keras `compile`.\r
  * Added top-k to precision and recall to keras metrics.\r
  * Adding public APIs for `cumsum` and `cumprod` keras backend functions.\r
  * Fix: model.add_loss(symbolic_tensor) should work in ambient eager.\r
  * Add name argument to tf.string_split and tf.strings_split\r
  * Minor change to SavedModels exported from Keras using tf.keras.experimental.export. (SignatureDef key for evaluation mode is now "eval" instead of "test"). This will be reverted back to "test" in the near future.\r
  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r
  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r
  * Keras training and validation curves are shown on the same plot.\r
  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r
  * Removing of dtype in the constructor of initializers and partition_info in call.\r
* New ops and improved op functionality\r
  * Add OpKernels for some stateless maps\r
  * Add v2 APIs for AUCCurve and AUCSummationMethod enums. #tf-metrics-convergence\r
  * Add tf.math.nextafter op.\r
  * Add CompositeTensor base class.\r
  * Add tf.linalg.tridiagonal_solve op.\r
  * Add opkernel templates for common table operations.\r
  * Added support for TFLite in TensorFlow 2.0.\r
  * Adds summary trace API for collecting graph and profile information.\r
  * Add batch_dims argument to tf.gather.\r
  * Add support for `add_metric` in the graph function mode.\r
  * Add C++ Gradient for BatchMatMulV2.\r
  * Added tf.random.binomial\r
  * Added gradient for SparseToDense op.\r
  * Add legacy string flat hash map op kernels\r
  * Add a ragged size op and register it to the op dispatcher\r
  * Add broadcasting support to tf.matmul.\r
  * Add ellipsis (...) support for tf.einsum()\r
  * Added LinearOperator.adjoint and LinearOperator.H (alias).\r
  * Added GPU implementation of tf.linalg.tridiagonal_solve.\r
  * Added strings.byte_split\r
  * Add RaggedTensor.placeholder()\r
  * Add a new "result_type" parameter to tf.strings.split\r
  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r
  * Add variant wrapper for absl::string_view\r
  * Add expand_composites argument to all nest.* methods.\r
  * Add pfor converter for Squeeze.\r
  * Bug fix for tf.tile gradient\r
  * Expose CriticalSection in core as tf.CriticalSection.\r
  * Update Fingerprint64Map to use aliases\r
  * ResourceVariable support for gather_nd.\r
  * ResourceVariable's gather op supports batch dimensions.\r
  * Variadic reduce is supported on CPU\r
  * Extend tf.function with basic support for CompositeTensors arguments (such as SparseTensor and RaggedTensor).\r
  * Add templates and interfaces for creating lookup tables\r
  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r
  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r
  * image.resize now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r
* Performance\r
  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r
  * Support for multi-host ncclAllReduce in Distribution Strategy.\r
  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r
* TensorFlow 2.0 Development\r
  * Add v2 sparse categorical crossentropy metric.\r
  * Allow non-Tensors through v2 losses.\r
  * Add UnifiedGRU as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from 'hard_sigmoid' to 'sigmoid', and 'reset_after' to True in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r
  * TF 2.0 - Update metric name to always reflect what the user has given in compile. Affects following cases 1. When name is given as 'accuracy'/'crossentropy' 2. When an aliased function name is used eg. 'mse' 3. Removing the `weighted` prefix from weighted metric names.\r
  * Begin adding Go wrapper for C Eager API\r
  * image.resize in 2.0 now supports gradients for the new resize kernels.\r
  * removed tf.string_split from v2 API\r
  * Expose tf.contrib.proto.* ops in tf.io (they will exist in TF2)\r
  * "Updates the TFLiteConverter API in 2.0. Changes from_concrete_function to from_concrete_functions."\r
  * Enable tf.distribute.experimental.MultiWorkerMirroredStrategy working in eager mode.\r
  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r
* TensorFlow Lite\r
  * "Adds support for tflite_convert in 2.0."\r
  * "Remove lite.OpHint, lite.experimental, and lite.constant from 2.0 API."\r
* tf.contrib\r
  * Added Neural Turing Implementation as described in https://arxiv.org/abs/1807.08518.\r
  * Remove tf.contrib.timeseries dependency on TF distributions.\r
* tf.data\r
  * Add num_parallel_reads and passing in a Dataset containing filenames into TextLineDataset and FixedLengthRecordDataset\r
  * Going forward we operate in TF 2.0, this change is part of the effort to slowly converting XYZDataset to DatasetV2 type which is the official version going to be used in TF 2.0 and motivated by some compatibility issue found, _BigtableXYZDataset (of type DatasetV2) does not implement the _as_variant_tensor() of DatasetV1, when moving contrib.bigtable to tensorflow_io. Converting into DatasetV2 removes the overheads to maintain V1 while we are moving into TF 2.0.\r
  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r
  * Add support for TensorArrays to tf.data Dataset.\r
  * Switching tf.data functions to use `defun`, providing an escape hatch to continue using the legacy `Defun`.\r
* Toolchains\r
  * CUDNN_INSTALL_PATH, TENSORRT_INSTALL_PATH, NCCL_INSTALL_PATH, NCCL_HDR_PATH are deprecated. Use TF_CUDA_PATHS instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r
  * TF code now resides in `tensorflow_core` and `tensorflow` is just a virtual pip package. No code changes are needed for projects using TensorFlow, the change is transparent\r
* XLA\r
  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r
* Estimator\r
  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r
  * Replace `contrib` references with `tf.estimator.experimental.*` for APIs in `early_stopping.py`\r
  * Determining the “correct” value of the `--iterations_per_loop` for TPUEstimator or DistributionStrategy continues to be a challenge for our users. We propose dynamically tuning the `--iterations_per_loop` variable, specifically for using TPUEstimator in training mode, based on a user target TPU execution time. Users might specify a value such as: `--iterations_per_loop=300s`, which will result in roughly 300 seconds being spent on the TPU between host side operations.\r
\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
1e100, 4d55397500, a6802739, abenmao, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Alex, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, Andreas Eberle, Andy Craze, Anthony Platanios, Armen Poghosov, armenpoghosov, arp95, Arpit Shah, Ashwin Ramaswami, Aurelien Geron, AuréLien Geron, aweers, awesomealex1, Ayush Agrawal, Ben Barsdell, Bharat Raghunathan, Bhavani Subramanian, blairhan, BléNesi Attila, Brandon Carter, candy.dc, Chao Liu, chenchc, chie8842, Christian Hansen, Christian Sigg, Clayne Robison, crafet, csukuangfj, ctiijima, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Daniel Salvadori, Dave Airlie, David Norman, Dayananda V, Dayananda-V, delock, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Donovan Ong, Drew Szurko, Duncan Riach, Dustin Neighly, Edward Forgacs, EFanZh, Fei Hu, Felix Lemke, Filip Matzner, fo40225, frreiss, Gautam, gehring, Geoffrey Irving, Grzegorz George Pawelczak, Grzegorz Pawelczak, Gyoung-Yoon Ryoo, HanGuo97, Hanton Yang, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, I-Hong Jhuo, Ilango R, Innovimax, Irene Dea, Jacky Ko, Jakub Lipinski, Jason Zaman, jcf94, Jeffrey Poznanovic, Jens Elofsson, Jeroen BéDorf, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Joeran Beel, Jonas Rauber, Jonathan, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K Yasaswi Sri Chandra Gandhi, K. Hodges, Kaixi Hou, Karl Lessard, Karl Weinmeister, Karthik Muthuraman, Kashif Rasul, KDR, Keno Fischer, Kevin Mader, kjopek, Koan-Sin Tan, kouml, ktaebum, Lakshay Tokas, Laurent Le Brun, Letian Kang, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, luxupu, Ma, Guokai, Mahmoud Abuzaina, Mandar Deshpande, manhyuk, Marco Gaido, Marek Drozdowski, Mark Collier, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael KäUfl, MickaëL Schoentgen, Miguel Morin, Mihail Salnikov, Mike Arpaia, Mike Holcomb, monklof, Moses Marin, Mshr-H, nammbash, Natalia Gimelshein, Nayana-Ibm, neargye, Neeraj Pradhan, Nehal J Wani, Nick, Niels Ole Salscheider, Niranjan Hasabnis, nlewycky, Nuka-137, Nutti, olicht, P Sudeepam, Palmer Lao, Pan Daoxin, Pariksheet Pinjari, Pavel Samolysov, PENGWA, Pooya Davoodi, R S Nikhil Krishna, Rohit Gupta, Roman Soldatow, rthadur, Ruizhe, Ryan Jiang, Samantha Andow, Sami Kama, Sana-Damani, Saurabh Deoras, sdamani, seanshpark, Sebastien Iooss, Serv-Inc, Shahzad Lone, Shashank Gupta, Shashi, shashvat, shashvatshahi1998, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, sremedios, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Sumesh Udayakumaran, Supriya Rao, Taylor Jakobson, Taylor Thornton, Ted Chang, ThisIsPIRI, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Tim Zaman, tomguluson92, Tongxuan Liu, TungJerry, v1incent, Vagif, vcarpani, Vikram Tiwari, Vishwak Srinivasan, Vitor-Alves, wangsiyu, wateryzephyr, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, wyzhao, Xin, Xinan Jiang, Yasuhiro Matsumoto, ymodak, Yong Tang, Younes Khoudli, Yuan Lin, Yves-Noel Weweler, Zantares, zjjott, 卜居, 王振华 (Wang Zhenhua), 黄鑫"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v1.14.0-rc1"^^xsd:anyURI ;
    sd:hasVersionId "v1.14.0-rc1"^^xsd:string ;
    sd:name "TensorFlow 1.14.0-rc1"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v1.15.0> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2019-10-14T21:08:43+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-10-16T18:01:52+00:00"^^xsd:dateTime ;
    sd:description """# Release 1.15.0\r
This is the last 1.x release for TensorFlow. We do not expect to update the 1.x branch with features, although we will issue patch releases to fix vulnerabilities for at least one year.\r
\r
## Major Features and Improvements\r
* As [announced](https://groups.google.com/a/tensorflow.org/forum/#!topic/developers/iRCt5m4qUz0), `tensorflow` pip package will by default include GPU support (same as `tensorflow-gpu` now) for the platforms we currently have GPU support (Linux and Windows). It will work on machines with and without Nvidia GPUs. `tensorflow-gpu` will still be available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r
* TensorFlow 1.15 contains a complete implementation of the 2.0 API in its `compat.v2` module. It contains a copy of the 1.15 main module (without `contrib`) in the `compat.v1` module. TensorFlow 1.15 is able to emulate 2.0 behavior using the `enable_v2_behavior()` function.\r
This enables writing forward compatible code: by explicitly importing either `tensorflow.compat.v1` or `tensorflow.compat.v2`, you can ensure that your code works without modifications against an installation of 1.15 or 2.0.\r
* `EagerTensor` now supports numpy buffer interface for tensors.\r
* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r
* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r
* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with `tf.data`, `tf.distribute` and `tf.keras` APIS.\r
* Adds `enable_tensor_equality()`, which switches the behavior such that: \r
  * Tensors are no longer hashable.\r
  * Tensors can be compared with `==` and `!=`, yielding a Boolean Tensor with element-wise comparison results. This will be the default behavior in 2.0.\r
* Auto Mixed-Precision graph optimizer simplifies converting models to `float16` for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r
* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to "true" or "1" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r
* TensorRT\r
  * Migrate TensorRT conversion sources from contrib to compiler directory in preparation for TF 2.0.\r
  * Add additional, user friendly `TrtGraphConverter` API for TensorRT conversion.\r
  * Expand support for TensorFlow operators in TensorRT conversion (e.g.\r
    `Gather`, `Slice`, `Pack`, `Unpack`, `ArgMin`, `ArgMax`,`DepthSpaceShuffle`). \r
  * Support TensorFlow operator `CombinedNonMaxSuppression` in TensorRT conversion which \r
     significantly accelerates object detection models.\r
\r
## Breaking Changes\r
* Tensorflow code now produces 2 different pip packages: `tensorflow_core` containing all the code (in the future it will contain only the private implementation) and `tensorflow` which is a virtual pip package doing forwarding to `tensorflow_core` (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r
* TensorFlow 1.15 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r
* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r
* `tf.keras`:\r
  * `OMP_NUM_THREADS` is no longer used by the default Keras config. To configure the number of threads, use `tf.config.threading` APIs.\r
  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r
  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r
  * Layers now default to `float32`, and automatically cast their inputs to the layer's dtype. If you had a model that used `float64`, it will probably silently use `float32` in TensorFlow2, and a warning will be issued that starts with Layer "layer-name" is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r
  * Some `tf.assert_*` methods now raise assertions at operation creation time (i.e. when this Python line executes) if the input tensors' values are known at that time, not during the session.run(). When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r
\r
## Bug Fixes and Other Changes\r
* `tf.estimator`:\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint` format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * Fix tests in canned estimators.\r
  * Expose Head as public API.\r
  * Fixes critical bugs that help with `DenseFeatures` usability in TF2\r
* `tf.data`:\r
  * Promoting `unbatch` from experimental to core API.\r
  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r
* `tf.keras`:\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to tf.train.Checkpoint format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r
  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r
  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r
  * Enable the Keras compile API `experimental_run_tf_function` flag by default. This flag enables single training/eval/predict execution path. With this 1. All input types are converted to `Dataset`. 2. When distribution strategy is not specified this goes through the no-op distribution strategy path. 3. Execution is wrapped in tf.function unless `run_eagerly=True` is set in compile.\r
  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r
* `tf.lite`\r
  * Add `GATHER` support to NN API delegate.\r
  * tflite object detection script has a debug mode.\r
  * Add delegate support for `QUANTIZE`.\r
  * Added evaluation script for COCO minival.\r
  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r
  * Converts hardswish subgraphs into atomic ops.\r
* Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r
* `parallel_for`: Add converter for `MatrixDiag`.\r
* Add `narrow_range` attribute to `QuantizeAndDequantizeV2` and V3.\r
* Added new op: `tf.strings.unsorted_segment_join`.\r
* Add HW acceleration support for `topK_v2`.\r
* Add new `TypeSpec` classes.\r
* CloudBigtable version updated to v0.10.0.\r
* Expose `Head` as public API.\r
* Update docstring for gather to properly describe the non-empty `batch_dims` case.\r
* Added `tf.sparse.from_dense` utility function.\r
* Improved ragged tensor support in `TensorFlowTestCase`.\r
* Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r
* `ResizeInputTensor` now works for all delegates.\r
* Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r
* `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r
* `tf.cond`, `tf.while` and `if` and `while` in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r
* `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r
* Refactors code in Quant8 LSTM support to reduce TFLite binary size.\r
* Add support of local soft device placement for eager op.\r
* Add HW acceleration support for `LogSoftMax`.\r
* Added a function `nested_value_rowids` for ragged tensors.\r
* Add guard to avoid acceleration of L2 Normalization with input rank != 4\r
* Add `tf.math.cumulative_logsumexp operation`.\r
* Add `tf.ragged.stack`.\r
* Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r
* Delegate application failure leaves interpreter in valid state.\r
* Add check for correct memory alignment to `MemoryAllocation::MemoryAllocation()`.\r
* Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r
* Added support for `FusedBatchNormV3` in converter.\r
* A ragged to dense op for directly calculating tensors.\r
* Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r
* The `precision_mode` argument to `TrtGraphConverter` is now case insensitive.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
a6802739, Aaron Ma, Abdullah Selek, Abolfazl Shahbazi, Ag Ramesh, Albert Z. Guo, Albin Joy, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Amit Srivastava, amoitra, Andrew Lihonosov, Andrii Prymostka, Anuj Rawat, Astropeak, Ayush Agrawal, Bairen Yi, Bas Aarts, Bastian Eichenberger, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bryan Cutler, candy.dc, Cao Zongyan, Captain-Pool, Casper Da Costa-Luis, Chen Guoyin, Cheng Chang, chengchingwen, Chong Yan, Choong Yin Thong, Christopher Yeh, Clayne Robison, Coady, Patrick, Dan Ganea, David Norman, Denis Khalikov, Deven Desai, Diego Caballero, Duncan Dean, Duncan Riach, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Fangjun Kuang, Fei Hu, fo40225, formath, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, George Grzegorz Pawelczak, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, haison, Haraldur TóMas HallgríMsson, HarikrishnanBalagopal, HåKon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, Jeroen BéDorf, Jerry Shih, jerryyin, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Joon, Josh Beal, Julian Niedermeier, Jun Wan, Junqin Zhang, Junyuan Xie, Justin Tunis, Kaixi Hou, Karl Lessard, Karthik Muthuraman, Kbhute-Ibm, khanhlvg, Koock Yoon, kstuedem, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Leslie-Fang-Intel, Li, Guizi, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, minds, mpppk, musikisomorphie, Nagy Mostafa, Nayana Thorat, Neil, Niels Ole Salscheider, Niklas SilfverströM, Niranjan Hasabnis, ocjosen, olramde, Pariksheet Pinjari, Patrick J. Lopresti, Patrik Gustavsson, per1234, PeterLee, Phan Van Nguyen Duc, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, Rajeshwar Reddy T, Ramon ViñAs, Rasmus Diederichsen, Reuben Morais, richardbrks, robert, RonLek, Ryan Jiang, saishruthi, Saket Khandelwal, Saleem Abdulrasool, Sami Kama, Sana-Damani, Sergii Khomenko, Severen Redwood, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, Srini511, srinivasan.narayanamoorthy, Sumesh Udayakumaran, Sungmann Cho, Tae-Hwan Jung, Taehoon Lee, Takeshi Watanabe, TengLu, terryky, TheMindVirus, ThisIsIsaac, Till Hoffmann, Timothy Liu, Tomer Gafner, Tongxuan Liu, Trent Lo, Trevor Morris, Uday Bondhugula, Vasileios Lioutas, vbvg2008, Vishnuvardhan Janapati, Vivek Suryamurthy, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xinan Jiang, Xinping Wang, Yann-Yy, Yasir Modak, Yong Tang, Yongfeng Gu, Yuchen Ying, Yuxin Wu, zyeric, 王振华 (Zhenhua Wang)"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0"^^xsd:anyURI ;
    sd:hasVersionId "v1.15.0"^^xsd:string ;
    sd:name "TensorFlow 1.15.0"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v1.15.0-rc0> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2019-09-08T20:24:52+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-09-10T00:35:18+00:00"^^xsd:dateTime ;
    sd:description """# Release 1.15.0-rc0\r
This is the last 1.x release for TensorFlow. We do not expect to update the 1.x branch with features, although we will issue patch releases to fix vulnerabilities for at least one year. \r
\r
## Major Features and Improvements\r
* As [announced](https://groups.google.com/a/tensorflow.org/forum/#!topic/developers/iRCt5m4qUz0), `tensorflow` pip package will by default include GPU support (same as `tensorflow-gpu` now) for the platforms we currently have GPU support (Linux and Windows). It will work on machines with and without Nvidia GPUs. `tensorflow-gpu` will still be available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r
* TensorFlow 1.15 contains a complete implementation of the 2.0 API in its `compat.v2 module`. It contains a copy of the 1.15 main module (without `contrib`) in the `compat.v1 module`. TensorFlow 1.15 is able to emulate 2.0 behavior using the `enable_v2_behavior()` function.\r
This enables writing forward compatible code: by explicitly importing either `tensorflow.compat.v1` or `tensorflow.compat.v2`, you can ensure that your code works without modifications against an installation of 1.15 or 2.0.\r
* EagerTensor now supports numpy buffer interface for tensors.\r
* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r
* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r
* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with `tf.data`, `tf.distribute` and `tf.keras` APIS.\r
* Adds `enable_tensor_equality()`, which switches the behavior such that: \r
  * Tensors are no longer hashable.\r
  * Tensors can be compared with == and !=, yielding a Boolean Tensor with element-wise comparison results. This will be the default behavior in 2.0.\r
\r
## Breaking Changes\r
* Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r
* TensorFlow 1.15 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r
* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r
* `tf.keras`:\r
  * `OMP_NUM_THREADS` is no longer used by the default Keras config. To configure the number of threads, use `tf.config.threading` APIs.\r
  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r
  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r
  * Layers now default to `float32`, and automatically cast their inputs to the layer's dtype. If you had a model that used `float64`, it will probably silently use `float32` in TensorFlow2, and a warning will be issued that starts with Layer "layer-name" is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r
  * Some `tf.assert_*` methods now raise assertions at operation creation time (i.e. when this Python line executes) if the input tensors' values are known at that time, not during the session.run(). When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r
\r
## Bug Fixes and Other Changes\r
* `tf.data`:\r
  * Promoting `unbatch` from experimental to core API.\r
  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r
* `tf.keras`:\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to tf.train.Checkpoint format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r
  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r
  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r
  * Enable the Keras compile API `experimental_run_tf_function` flag by default. This flag enables single training/eval/predict execution path. With this 1. All input types are converted to `Dataset`. 2. When distribution strategy is not specified this goes through the no-op distribution strategy path. 3. Execution is wrapped in tf.function unless `run_eagerly=True` is set in compile.\r
  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r
* `tf.lite`\r
  * Add `GATHER` support to NN API delegate.\r
  * tflite object detection script has a debug mode.\r
  * Add delegate support for `QUANTIZE`.\r
  * Added evaluation script for COCO minival.\r
  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r
  * Converts hardswish subgraphs into atomic ops.\r
* Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r
* `parallel_for`: Add converter for `MatrixDiag`.\r
* Add `narrow_range` attribute to `QuantizeAndDequantizeV2` and V3.\r
* Added new op: `tf.strings.unsorted_segment_join`.\r
* Add HW acceleration support for `topK_v2`.\r
* Add new `TypeSpec` classes.\r
* CloudBigtable version updated to v0.10.0.\r
* Expose `Head` as public API.\r
* Update docstring for gather to properly describe the non-empty `batch_dims` case.\r
* Added `tf.sparse.from_dense` utility function.\r
* Improved ragged tensor support in `TensorFlowTestCase`.\r
* Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r
* `ResizeInputTensor` now works for all delegates.\r
* Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r
* `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r
* `tf.cond`, `tf.while` and `if` and `while` in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r
* `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r
* Refactors code in Quant8 LSTM support to reduce TFLite binary size.\r
* Add support of local soft device placement for eager op.\r
* Add HW acceleration support for `LogSoftMax`.\r
* Added a function `nested_value_rowids` for ragged tensors.\r
* Add guard to avoid acceleration of L2 Normalization with input rank != 4\r
* Add `tf.math.cumulative_logsumexp operation`.\r
* Add `tf.ragged.stack`.\r
* Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r
* Delegate application failure leaves interpreter in valid state.\r
* Add check for correct memory alignment to `MemoryAllocation::MemoryAllocation()`.\r
* Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r
* Added support for `FusedBatchNormV3` in converter.\r
* A ragged to dense op for directly calculating tensors.\r
* Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
a6802739, Aaron Ma, Abdullah Selek, Abolfazl Shahbazi, Ag Ramesh, Albert Z. Guo, Albin Joy, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Amit Srivastava, amoitra, Andrew Lihonosov, Andrii Prymostka, Anuj Rawat, Astropeak, Ayush Agrawal, Bairen Yi, Bas Aarts, Bastian Eichenberger, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bryan Cutler, candy.dc, Cao Zongyan, Captain-Pool, Casper Da Costa-Luis, Chen Guoyin, Cheng Chang, chengchingwen, Chong Yan, Choong Yin Thong, Christopher Yeh, Clayne Robison, Coady, Patrick, Dan Ganea, David Norman, Denis Khalikov, Deven Desai, Diego Caballero, Duncan Dean, Duncan Riach, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Fangjun Kuang, Fei Hu, fo40225, formath, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, George Grzegorz Pawelczak, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, haison, Haraldur TóMas HallgríMsson, HarikrishnanBalagopal, HåKon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, Jeroen BéDorf, Jerry Shih, jerryyin, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Joon, Josh Beal, Julian Niedermeier, Jun Wan, Junqin Zhang, Junyuan Xie, Justin Tunis, Kaixi Hou, Karl Lessard, Karthik Muthuraman, Kbhute-Ibm, khanhlvg, Koock Yoon, kstuedem, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Leslie-Fang-Intel, Li, Guizi, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, minds, mpppk, musikisomorphie, Nagy Mostafa, Nayana Thorat, Neil, Niels Ole Salscheider, Niklas SilfverströM, Niranjan Hasabnis, ocjosen, olramde, Pariksheet Pinjari, Patrick J. Lopresti, Patrik Gustavsson, per1234, PeterLee, Phan Van Nguyen Duc, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, Rajeshwar Reddy T, Ramon ViñAs, Rasmus Diederichsen, Reuben Morais, richardbrks, robert, RonLek, Ryan Jiang, saishruthi, Saket Khandelwal, Saleem Abdulrasool, Sami Kama, Sana-Damani, Sergii Khomenko, Severen Redwood, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, Srini511, srinivasan.narayanamoorthy, Sumesh Udayakumaran, Sungmann Cho, Tae-Hwan Jung, Taehoon Lee, Takeshi Watanabe, TengLu, terryky, TheMindVirus, ThisIsIsaac, Till Hoffmann, Timothy Liu, Tomer Gafner, Tongxuan Liu, Trent Lo, Trevor Morris, Uday Bondhugula, Vasileios Lioutas, vbvg2008, Vishnuvardhan Janapati, Vivek Suryamurthy, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xinan Jiang, Xinping Wang, Yann-Yy, Yasir Modak, Yong Tang, Yongfeng Gu, Yuchen Ying, Yuxin Wu, zyeric, 王振华 (Zhenhua Wang)"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0-rc0"^^xsd:anyURI ;
    sd:hasVersionId "v1.15.0-rc0"^^xsd:string ;
    sd:name "TensorFlow 1.15.0-rc0"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v1.15.0-rc1> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2019-09-16T05:00:45+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-09-17T06:54:51+00:00"^^xsd:dateTime ;
    sd:description """# Release 1.15.0-rc1\r
This is the last 1.x release for TensorFlow. We do not expect to update the 1.x branch with features, although we will issue patch releases to fix vulnerabilities for at least one year. \r
\r
## Major Features and Improvements\r
* As [announced](https://groups.google.com/a/tensorflow.org/forum/#!topic/developers/iRCt5m4qUz0), `tensorflow` pip package will by default include GPU support (same as `tensorflow-gpu` now) for the platforms we currently have GPU support (Linux and Windows). It will work on machines with and without Nvidia GPUs. `tensorflow-gpu` will still be available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r
* TensorFlow 1.15 contains a complete implementation of the 2.0 API in its `compat.v2 module`. It contains a copy of the 1.15 main module (without `contrib`) in the `compat.v1 module`. TensorFlow 1.15 is able to emulate 2.0 behavior using the `enable_v2_behavior()` function.\r
This enables writing forward compatible code: by explicitly importing either `tensorflow.compat.v1` or `tensorflow.compat.v2`, you can ensure that your code works without modifications against an installation of 1.15 or 2.0.\r
* EagerTensor now supports numpy buffer interface for tensors.\r
* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r
* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r
* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with `tf.data`, `tf.distribute` and `tf.keras` APIS.\r
* Adds `enable_tensor_equality()`, which switches the behavior such that: \r
  * Tensors are no longer hashable.\r
  * Tensors can be compared with == and !=, yielding a Boolean Tensor with element-wise comparison results. This will be the default behavior in 2.0.\r
* Auto Mixed-Precision graph optimizer simplifies converting models to float16 for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r
* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to "true" or "1" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r
* TensorRT\r
  * Migrate TensorRT conversion sources from contrib to compiler directory in preparation for TF 2.0.\r
  * Add additional, user friendly `TrtGraphConverter` API for TensorRT conversion.\r
  * Expand support for TensorFlow operators in TensorRT conversion (e.g.\r
    `Gather`, `Slice`, `Pack`, `Unpack`, `ArgMin`, `ArgMax`,`DepthSpaceShuffle`). \r
  * Support TensorFlow operator `CombinedNonMaxSuppression` in TensorRT conversion which \r
     significantly accelerates object detection models.\r
\r
## Breaking Changes\r
* Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r
* TensorFlow 1.15 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r
* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r
* `tf.keras`:\r
  * `OMP_NUM_THREADS` is no longer used by the default Keras config. To configure the number of threads, use `tf.config.threading` APIs.\r
  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r
  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r
  * Layers now default to `float32`, and automatically cast their inputs to the layer's dtype. If you had a model that used `float64`, it will probably silently use `float32` in TensorFlow2, and a warning will be issued that starts with Layer "layer-name" is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r
  * Some `tf.assert_*` methods now raise assertions at operation creation time (i.e. when this Python line executes) if the input tensors' values are known at that time, not during the session.run(). When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r
\r
## Bug Fixes and Other Changes\r
* `tf.estimator`:\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint` format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * Fix tests in canned estimators.\r
  * Expose Head as public API.\r
  * Fixes critical bugs that help with `DenseFeatures` usability in TF2\r
* `tf.data`:\r
  * Promoting `unbatch` from experimental to core API.\r
  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r
* `tf.keras`:\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to tf.train.Checkpoint format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r
  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r
  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r
  * Enable the Keras compile API `experimental_run_tf_function` flag by default. This flag enables single training/eval/predict execution path. With this 1. All input types are converted to `Dataset`. 2. When distribution strategy is not specified this goes through the no-op distribution strategy path. 3. Execution is wrapped in tf.function unless `run_eagerly=True` is set in compile.\r
  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r
* `tf.lite`\r
  * Add `GATHER` support to NN API delegate.\r
  * tflite object detection script has a debug mode.\r
  * Add delegate support for `QUANTIZE`.\r
  * Added evaluation script for COCO minival.\r
  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r
  * Converts hardswish subgraphs into atomic ops.\r
* Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r
* `parallel_for`: Add converter for `MatrixDiag`.\r
* Add `narrow_range` attribute to `QuantizeAndDequantizeV2` and V3.\r
* Added new op: `tf.strings.unsorted_segment_join`.\r
* Add HW acceleration support for `topK_v2`.\r
* Add new `TypeSpec` classes.\r
* CloudBigtable version updated to v0.10.0.\r
* Expose `Head` as public API.\r
* Update docstring for gather to properly describe the non-empty `batch_dims` case.\r
* Added `tf.sparse.from_dense` utility function.\r
* Improved ragged tensor support in `TensorFlowTestCase`.\r
* Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r
* `ResizeInputTensor` now works for all delegates.\r
* Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r
* `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r
* `tf.cond`, `tf.while` and `if` and `while` in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r
* `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r
* Refactors code in Quant8 LSTM support to reduce TFLite binary size.\r
* Add support of local soft device placement for eager op.\r
* Add HW acceleration support for `LogSoftMax`.\r
* Added a function `nested_value_rowids` for ragged tensors.\r
* Add guard to avoid acceleration of L2 Normalization with input rank != 4\r
* Add `tf.math.cumulative_logsumexp operation`.\r
* Add `tf.ragged.stack`.\r
* Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r
* Delegate application failure leaves interpreter in valid state.\r
* Add check for correct memory alignment to `MemoryAllocation::MemoryAllocation()`.\r
* Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r
* Added support for `FusedBatchNormV3` in converter.\r
* A ragged to dense op for directly calculating tensors.\r
* Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r
* The `precision_mode` argument to `TrtGraphConverter` is now case insensitive.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
a6802739, Aaron Ma, Abdullah Selek, Abolfazl Shahbazi, Ag Ramesh, Albert Z. Guo, Albin Joy, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Amit Srivastava, amoitra, Andrew Lihonosov, Andrii Prymostka, Anuj Rawat, Astropeak, Ayush Agrawal, Bairen Yi, Bas Aarts, Bastian Eichenberger, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bryan Cutler, candy.dc, Cao Zongyan, Captain-Pool, Casper Da Costa-Luis, Chen Guoyin, Cheng Chang, chengchingwen, Chong Yan, Choong Yin Thong, Christopher Yeh, Clayne Robison, Coady, Patrick, Dan Ganea, David Norman, Denis Khalikov, Deven Desai, Diego Caballero, Duncan Dean, Duncan Riach, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Fangjun Kuang, Fei Hu, fo40225, formath, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, George Grzegorz Pawelczak, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, haison, Haraldur TóMas HallgríMsson, HarikrishnanBalagopal, HåKon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, Jeroen BéDorf, Jerry Shih, jerryyin, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Joon, Josh Beal, Julian Niedermeier, Jun Wan, Junqin Zhang, Junyuan Xie, Justin Tunis, Kaixi Hou, Karl Lessard, Karthik Muthuraman, Kbhute-Ibm, khanhlvg, Koock Yoon, kstuedem, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Leslie-Fang-Intel, Li, Guizi, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, minds, mpppk, musikisomorphie, Nagy Mostafa, Nayana Thorat, Neil, Niels Ole Salscheider, Niklas SilfverströM, Niranjan Hasabnis, ocjosen, olramde, Pariksheet Pinjari, Patrick J. Lopresti, Patrik Gustavsson, per1234, PeterLee, Phan Van Nguyen Duc, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, Rajeshwar Reddy T, Ramon ViñAs, Rasmus Diederichsen, Reuben Morais, richardbrks, robert, RonLek, Ryan Jiang, saishruthi, Saket Khandelwal, Saleem Abdulrasool, Sami Kama, Sana-Damani, Sergii Khomenko, Severen Redwood, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, Srini511, srinivasan.narayanamoorthy, Sumesh Udayakumaran, Sungmann Cho, Tae-Hwan Jung, Taehoon Lee, Takeshi Watanabe, TengLu, terryky, TheMindVirus, ThisIsIsaac, Till Hoffmann, Timothy Liu, Tomer Gafner, Tongxuan Liu, Trent Lo, Trevor Morris, Uday Bondhugula, Vasileios Lioutas, vbvg2008, Vishnuvardhan Janapati, Vivek Suryamurthy, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xinan Jiang, Xinping Wang, Yann-Yy, Yasir Modak, Yong Tang, Yongfeng Gu, Yuchen Ying, Yuxin Wu, zyeric, 王振华 (Zhenhua Wang)"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0-rc1"^^xsd:anyURI ;
    sd:hasVersionId "v1.15.0-rc1"^^xsd:string ;
    sd:name "TensorFlow Release 1.15.0-rc1"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v1.15.0-rc2> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2019-09-30T23:36:12+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-10-01T23:50:56+00:00"^^xsd:dateTime ;
    sd:description """# Release 1.15.0-rc2\r
This is the last 1.x release for TensorFlow. We do not expect to update the 1.x branch with features, although we will issue patch releases to fix vulnerabilities for at least one year. \r
\r
## Major Features and Improvements\r
* As [announced](https://groups.google.com/a/tensorflow.org/forum/#!topic/developers/iRCt5m4qUz0), `tensorflow` pip package will by default include GPU support (same as `tensorflow-gpu` now) for the platforms we currently have GPU support (Linux and Windows). It will work on machines with and without Nvidia GPUs. `tensorflow-gpu` will still be available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r
* TensorFlow 1.15 contains a complete implementation of the 2.0 API in its `compat.v2 module`. It contains a copy of the 1.15 main module (without `contrib`) in the `compat.v1 module`. TensorFlow 1.15 is able to emulate 2.0 behavior using the `enable_v2_behavior()` function.\r
This enables writing forward compatible code: by explicitly importing either `tensorflow.compat.v1` or `tensorflow.compat.v2`, you can ensure that your code works without modifications against an installation of 1.15 or 2.0.\r
* EagerTensor now supports numpy buffer interface for tensors.\r
* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r
* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r
* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with `tf.data`, `tf.distribute` and `tf.keras` APIS.\r
* Adds `enable_tensor_equality()`, which switches the behavior such that: \r
  * Tensors are no longer hashable.\r
  * Tensors can be compared with == and !=, yielding a Boolean Tensor with element-wise comparison results. This will be the default behavior in 2.0.\r
* Auto Mixed-Precision graph optimizer simplifies converting models to float16 for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r
* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to "true" or "1" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r
* TensorRT\r
  * Migrate TensorRT conversion sources from contrib to compiler directory in preparation for TF 2.0.\r
  * Add additional, user friendly `TrtGraphConverter` API for TensorRT conversion.\r
  * Expand support for TensorFlow operators in TensorRT conversion (e.g.\r
    `Gather`, `Slice`, `Pack`, `Unpack`, `ArgMin`, `ArgMax`,`DepthSpaceShuffle`). \r
  * Support TensorFlow operator `CombinedNonMaxSuppression` in TensorRT conversion which \r
     significantly accelerates object detection models.\r
\r
## Breaking Changes\r
* Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r
* TensorFlow 1.15 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r
* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r
* `tf.keras`:\r
  * `OMP_NUM_THREADS` is no longer used by the default Keras config. To configure the number of threads, use `tf.config.threading` APIs.\r
  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r
  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r
  * Layers now default to `float32`, and automatically cast their inputs to the layer's dtype. If you had a model that used `float64`, it will probably silently use `float32` in TensorFlow2, and a warning will be issued that starts with Layer "layer-name" is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r
  * Some `tf.assert_*` methods now raise assertions at operation creation time (i.e. when this Python line executes) if the input tensors' values are known at that time, not during the session.run(). When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r
\r
## Bug Fixes and Other Changes\r
* `tf.estimator`:\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint` format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * Fix tests in canned estimators.\r
  * Expose Head as public API.\r
  * Fixes critical bugs that help with `DenseFeatures` usability in TF2\r
* `tf.data`:\r
  * Promoting `unbatch` from experimental to core API.\r
  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r
* `tf.keras`:\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to tf.train.Checkpoint format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r
  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r
  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r
  * Enable the Keras compile API `experimental_run_tf_function` flag by default. This flag enables single training/eval/predict execution path. With this 1. All input types are converted to `Dataset`. 2. When distribution strategy is not specified this goes through the no-op distribution strategy path. 3. Execution is wrapped in tf.function unless `run_eagerly=True` is set in compile.\r
  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r
* `tf.lite`\r
  * Add `GATHER` support to NN API delegate.\r
  * tflite object detection script has a debug mode.\r
  * Add delegate support for `QUANTIZE`.\r
  * Added evaluation script for COCO minival.\r
  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r
  * Converts hardswish subgraphs into atomic ops.\r
* Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r
* `parallel_for`: Add converter for `MatrixDiag`.\r
* Add `narrow_range` attribute to `QuantizeAndDequantizeV2` and V3.\r
* Added new op: `tf.strings.unsorted_segment_join`.\r
* Add HW acceleration support for `topK_v2`.\r
* Add new `TypeSpec` classes.\r
* CloudBigtable version updated to v0.10.0.\r
* Expose `Head` as public API.\r
* Update docstring for gather to properly describe the non-empty `batch_dims` case.\r
* Added `tf.sparse.from_dense` utility function.\r
* Improved ragged tensor support in `TensorFlowTestCase`.\r
* Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r
* `ResizeInputTensor` now works for all delegates.\r
* Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r
* `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r
* `tf.cond`, `tf.while` and `if` and `while` in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r
* `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r
* Refactors code in Quant8 LSTM support to reduce TFLite binary size.\r
* Add support of local soft device placement for eager op.\r
* Add HW acceleration support for `LogSoftMax`.\r
* Added a function `nested_value_rowids` for ragged tensors.\r
* Add guard to avoid acceleration of L2 Normalization with input rank != 4\r
* Add `tf.math.cumulative_logsumexp operation`.\r
* Add `tf.ragged.stack`.\r
* Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r
* Delegate application failure leaves interpreter in valid state.\r
* Add check for correct memory alignment to `MemoryAllocation::MemoryAllocation()`.\r
* Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r
* Added support for `FusedBatchNormV3` in converter.\r
* A ragged to dense op for directly calculating tensors.\r
* Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r
* The `precision_mode` argument to `TrtGraphConverter` is now case insensitive.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
a6802739, Aaron Ma, Abdullah Selek, Abolfazl Shahbazi, Ag Ramesh, Albert Z. Guo, Albin Joy, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Amit Srivastava, amoitra, Andrew Lihonosov, Andrii Prymostka, Anuj Rawat, Astropeak, Ayush Agrawal, Bairen Yi, Bas Aarts, Bastian Eichenberger, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bryan Cutler, candy.dc, Cao Zongyan, Captain-Pool, Casper Da Costa-Luis, Chen Guoyin, Cheng Chang, chengchingwen, Chong Yan, Choong Yin Thong, Christopher Yeh, Clayne Robison, Coady, Patrick, Dan Ganea, David Norman, Denis Khalikov, Deven Desai, Diego Caballero, Duncan Dean, Duncan Riach, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Fangjun Kuang, Fei Hu, fo40225, formath, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, George Grzegorz Pawelczak, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, haison, Haraldur TóMas HallgríMsson, HarikrishnanBalagopal, HåKon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, Jeroen BéDorf, Jerry Shih, jerryyin, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Joon, Josh Beal, Julian Niedermeier, Jun Wan, Junqin Zhang, Junyuan Xie, Justin Tunis, Kaixi Hou, Karl Lessard, Karthik Muthuraman, Kbhute-Ibm, khanhlvg, Koock Yoon, kstuedem, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Leslie-Fang-Intel, Li, Guizi, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, minds, mpppk, musikisomorphie, Nagy Mostafa, Nayana Thorat, Neil, Niels Ole Salscheider, Niklas SilfverströM, Niranjan Hasabnis, ocjosen, olramde, Pariksheet Pinjari, Patrick J. Lopresti, Patrik Gustavsson, per1234, PeterLee, Phan Van Nguyen Duc, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, Rajeshwar Reddy T, Ramon ViñAs, Rasmus Diederichsen, Reuben Morais, richardbrks, robert, RonLek, Ryan Jiang, saishruthi, Saket Khandelwal, Saleem Abdulrasool, Sami Kama, Sana-Damani, Sergii Khomenko, Severen Redwood, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, Srini511, srinivasan.narayanamoorthy, Sumesh Udayakumaran, Sungmann Cho, Tae-Hwan Jung, Taehoon Lee, Takeshi Watanabe, TengLu, terryky, TheMindVirus, ThisIsIsaac, Till Hoffmann, Timothy Liu, Tomer Gafner, Tongxuan Liu, Trent Lo, Trevor Morris, Uday Bondhugula, Vasileios Lioutas, vbvg2008, Vishnuvardhan Janapati, Vivek Suryamurthy, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xinan Jiang, Xinping Wang, Yann-Yy, Yasir Modak, Yong Tang, Yongfeng Gu, Yuchen Ying, Yuxin Wu, zyeric, 王振华 (Zhenhua Wang)"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0-rc2"^^xsd:anyURI ;
    sd:hasVersionId "v1.15.0-rc2"^^xsd:string ;
    sd:name "TensorFlow 1.15.0-rc2"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v1.15.0-rc3> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2019-10-07T22:36:38+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-10-08T17:08:55+00:00"^^xsd:dateTime ;
    sd:description """# Release 1.15.0-rc3\r
This is the last 1.x release for TensorFlow. We do not expect to update the 1.x branch with features, although we will issue patch releases to fix vulnerabilities for at least one year. \r
\r
## Major Features and Improvements\r
* As [announced](https://groups.google.com/a/tensorflow.org/forum/#!topic/developers/iRCt5m4qUz0), `tensorflow` pip package will by default include GPU support (same as `tensorflow-gpu` now) for the platforms we currently have GPU support (Linux and Windows). It will work on machines with and without Nvidia GPUs. `tensorflow-gpu` will still be available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r
* TensorFlow 1.15 contains a complete implementation of the 2.0 API in its `compat.v2 module`. It contains a copy of the 1.15 main module (without `contrib`) in the `compat.v1 module`. TensorFlow 1.15 is able to emulate 2.0 behavior using the `enable_v2_behavior()` function.\r
This enables writing forward compatible code: by explicitly importing either `tensorflow.compat.v1` or `tensorflow.compat.v2`, you can ensure that your code works without modifications against an installation of 1.15 or 2.0.\r
* EagerTensor now supports numpy buffer interface for tensors.\r
* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r
* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r
* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with `tf.data`, `tf.distribute` and `tf.keras` APIS.\r
* Adds `enable_tensor_equality()`, which switches the behavior such that: \r
  * Tensors are no longer hashable.\r
  * Tensors can be compared with == and !=, yielding a Boolean Tensor with element-wise comparison results. This will be the default behavior in 2.0.\r
* Auto Mixed-Precision graph optimizer simplifies converting models to float16 for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r
* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to "true" or "1" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r
* TensorRT\r
  * Migrate TensorRT conversion sources from contrib to compiler directory in preparation for TF 2.0.\r
  * Add additional, user friendly `TrtGraphConverter` API for TensorRT conversion.\r
  * Expand support for TensorFlow operators in TensorRT conversion (e.g.\r
    `Gather`, `Slice`, `Pack`, `Unpack`, `ArgMin`, `ArgMax`,`DepthSpaceShuffle`). \r
  * Support TensorFlow operator `CombinedNonMaxSuppression` in TensorRT conversion which \r
     significantly accelerates object detection models.\r
\r
## Breaking Changes\r
* Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r
* TensorFlow 1.15 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r
* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r
* `tf.keras`:\r
  * `OMP_NUM_THREADS` is no longer used by the default Keras config. To configure the number of threads, use `tf.config.threading` APIs.\r
  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r
  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r
  * Layers now default to `float32`, and automatically cast their inputs to the layer's dtype. If you had a model that used `float64`, it will probably silently use `float32` in TensorFlow2, and a warning will be issued that starts with Layer "layer-name" is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r
  * Some `tf.assert_*` methods now raise assertions at operation creation time (i.e. when this Python line executes) if the input tensors' values are known at that time, not during the session.run(). When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r
\r
## Bug Fixes and Other Changes\r
* `tf.estimator`:\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint` format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * Fix tests in canned estimators.\r
  * Expose Head as public API.\r
  * Fixes critical bugs that help with `DenseFeatures` usability in TF2\r
* `tf.data`:\r
  * Promoting `unbatch` from experimental to core API.\r
  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r
* `tf.keras`:\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to tf.train.Checkpoint format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r
  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r
  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r
  * Enable the Keras compile API `experimental_run_tf_function` flag by default. This flag enables single training/eval/predict execution path. With this 1. All input types are converted to `Dataset`. 2. When distribution strategy is not specified this goes through the no-op distribution strategy path. 3. Execution is wrapped in tf.function unless `run_eagerly=True` is set in compile.\r
  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r
* `tf.lite`\r
  * Add `GATHER` support to NN API delegate.\r
  * tflite object detection script has a debug mode.\r
  * Add delegate support for `QUANTIZE`.\r
  * Added evaluation script for COCO minival.\r
  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r
  * Converts hardswish subgraphs into atomic ops.\r
* Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r
* `parallel_for`: Add converter for `MatrixDiag`.\r
* Add `narrow_range` attribute to `QuantizeAndDequantizeV2` and V3.\r
* Added new op: `tf.strings.unsorted_segment_join`.\r
* Add HW acceleration support for `topK_v2`.\r
* Add new `TypeSpec` classes.\r
* CloudBigtable version updated to v0.10.0.\r
* Expose `Head` as public API.\r
* Update docstring for gather to properly describe the non-empty `batch_dims` case.\r
* Added `tf.sparse.from_dense` utility function.\r
* Improved ragged tensor support in `TensorFlowTestCase`.\r
* Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r
* `ResizeInputTensor` now works for all delegates.\r
* Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r
* `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r
* `tf.cond`, `tf.while` and `if` and `while` in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r
* `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r
* Refactors code in Quant8 LSTM support to reduce TFLite binary size.\r
* Add support of local soft device placement for eager op.\r
* Add HW acceleration support for `LogSoftMax`.\r
* Added a function `nested_value_rowids` for ragged tensors.\r
* Add guard to avoid acceleration of L2 Normalization with input rank != 4\r
* Add `tf.math.cumulative_logsumexp operation`.\r
* Add `tf.ragged.stack`.\r
* Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r
* Delegate application failure leaves interpreter in valid state.\r
* Add check for correct memory alignment to `MemoryAllocation::MemoryAllocation()`.\r
* Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r
* Added support for `FusedBatchNormV3` in converter.\r
* A ragged to dense op for directly calculating tensors.\r
* Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r
* The `precision_mode` argument to `TrtGraphConverter` is now case insensitive.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
a6802739, Aaron Ma, Abdullah Selek, Abolfazl Shahbazi, Ag Ramesh, Albert Z. Guo, Albin Joy, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Amit Srivastava, amoitra, Andrew Lihonosov, Andrii Prymostka, Anuj Rawat, Astropeak, Ayush Agrawal, Bairen Yi, Bas Aarts, Bastian Eichenberger, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bryan Cutler, candy.dc, Cao Zongyan, Captain-Pool, Casper Da Costa-Luis, Chen Guoyin, Cheng Chang, chengchingwen, Chong Yan, Choong Yin Thong, Christopher Yeh, Clayne Robison, Coady, Patrick, Dan Ganea, David Norman, Denis Khalikov, Deven Desai, Diego Caballero, Duncan Dean, Duncan Riach, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Fangjun Kuang, Fei Hu, fo40225, formath, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, George Grzegorz Pawelczak, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, haison, Haraldur TóMas HallgríMsson, HarikrishnanBalagopal, HåKon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, Jeroen BéDorf, Jerry Shih, jerryyin, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Joon, Josh Beal, Julian Niedermeier, Jun Wan, Junqin Zhang, Junyuan Xie, Justin Tunis, Kaixi Hou, Karl Lessard, Karthik Muthuraman, Kbhute-Ibm, khanhlvg, Koock Yoon, kstuedem, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Leslie-Fang-Intel, Li, Guizi, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, minds, mpppk, musikisomorphie, Nagy Mostafa, Nayana Thorat, Neil, Niels Ole Salscheider, Niklas SilfverströM, Niranjan Hasabnis, ocjosen, olramde, Pariksheet Pinjari, Patrick J. Lopresti, Patrik Gustavsson, per1234, PeterLee, Phan Van Nguyen Duc, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, Rajeshwar Reddy T, Ramon ViñAs, Rasmus Diederichsen, Reuben Morais, richardbrks, robert, RonLek, Ryan Jiang, saishruthi, Saket Khandelwal, Saleem Abdulrasool, Sami Kama, Sana-Damani, Sergii Khomenko, Severen Redwood, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, Srini511, srinivasan.narayanamoorthy, Sumesh Udayakumaran, Sungmann Cho, Tae-Hwan Jung, Taehoon Lee, Takeshi Watanabe, TengLu, terryky, TheMindVirus, ThisIsIsaac, Till Hoffmann, Timothy Liu, Tomer Gafner, Tongxuan Liu, Trent Lo, Trevor Morris, Uday Bondhugula, Vasileios Lioutas, vbvg2008, Vishnuvardhan Janapati, Vivek Suryamurthy, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xinan Jiang, Xinping Wang, Yann-Yy, Yasir Modak, Yong Tang, Yongfeng Gu, Yuchen Ying, Yuxin Wu, zyeric, 王振华 (Zhenhua Wang)"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0-rc3"^^xsd:anyURI ;
    sd:hasVersionId "v1.15.0-rc3"^^xsd:string ;
    sd:name "TensorFlow 1.15.0-rc3"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v1.15.2> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2020-01-26T03:57:51+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-01-26T15:02:04+00:00"^^xsd:dateTime ;
    sd:description """# Release 1.15.2\r
\r
Note that this release no longer has a single pip package for GPU and CPU. Please see #36347 for history and details\r
\r
## Bug Fixes and Other Changes\r
* Fixes a security vulnerability where converting a Python string to a `tf.float16` value produces a segmentation fault ([CVE-2020-5215](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5215))\r
* Updates `curl` to `7.66.0` to handle [CVE-2019-5482](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5482) and [CVE-2019-5481](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5481)\r
* Updates `sqlite3` to `3.30.01` to handle [CVE-2019-19646](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19646), [CVE-2019-19645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19645) and [CVE-2019-16168](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16168)"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.2"^^xsd:anyURI ;
    sd:hasVersionId "v1.15.2"^^xsd:string ;
    sd:name "TensorFlow 1.15.2"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v1.15.3> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/mihaimaruseac> ;
    sd:dateCreated "2020-05-14T22:21:31+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-05-18T16:02:26+00:00"^^xsd:dateTime ;
    sd:description """## Bug Fixes and Other Changes\r
* Updates `sqlite3` to `3.31.01` to handle [CVE-2019-19880](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19880), [CVE-2019-19244](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19244) and [CVE-2019-19645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19645)\r
* Updates `curl` to `7.69.1` to handle [CVE-2019-15601](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15601)\r
* Updates `libjpeg-turbo` to `2.0.4` to handle [CVE-2018-19664](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19664), [CVE-2018-20330](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20330) and [CVE-2019-13960](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13960)\r
* Updates Apache Spark to `2.4.5` to handle [CVE-2019-10099](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10099), [CVE-2018-17190](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17190) and [CVE-2018-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11770)"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.3"^^xsd:anyURI ;
    sd:hasVersionId "v1.15.3"^^xsd:string ;
    sd:name "TensorFlow 1.15.3"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2019-09-27T21:56:33+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-09-30T17:47:54+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.0.0\r
\r
## Major Features and Improvements\r
\r
TensorFlow 2.0 focuses on **simplicity** and **ease of use**, featuring updates like:\r
\r
* Easy model building with Keras and eager execution.\r
* Robust model deployment in production on any platform.\r
* Powerful experimentation for research.\r
* API simplification by reducing duplication and removing deprecated endpoints.\r
\r
For details on best practices with 2.0, see [the Effective 2.0 guide](https://www.tensorflow.org/beta/guide/effective_tf2)\r
\r
\r
For information on upgrading your existing TensorFlow 1.x models, please refer to our [Upgrade](https://medium.com/tensorflow/upgrading-your-code-to-tensorflow-2-0-f72c3a4d83b5) and [Migration](https://www.tensorflow.org/guide/migrate) guides. We have also released a collection of [tutorials and getting started guides](https://www.tensorflow.org/beta).\r
\r
## Highlights\r
\r
* TF 2.0 delivers Keras as the central high level API used to build and train models. Keras provides several model-building APIs such as Sequential, Functional, and Subclassing along with eager execution, for immediate iteration and intuitive debugging, and `tf.data`, for building scalable input pipelines. Checkout [guide](https://www.tensorflow.org/beta/guide/keras/overview) for additional details.\r
* Distribution Strategy: TF 2.0 users will be able to use the [`tf.distribute.Strategy`](https://www.tensorflow.org/beta/guide/distribute_strategy) API to distribute training with minimal code changes, yielding great out-of-the-box performance. It supports distributed training with Keras model.fit, as well as with custom training loops. Multi-GPU support is available, along with experimental support for multi worker and Cloud TPUs. Check out the [guide](https://www.tensorflow.org/beta/guide/distribute_strategy) for more details.\r
* Functions, not Sessions. The traditional declarative programming model of building a graph and executing it via a `tf.Session` is discouraged, and replaced with by writing regular Python functions. Using the `tf.function` decorator, such functions can be turned into graphs which can be executed remotely, serialized, and optimized for performance.\r
* Unification of `tf.train.Optimizers` and `tf.keras.Optimizers`. Use `tf.keras.Optimizers` for TF2.0. `compute_gradients` is removed as public API, use `GradientTape` to compute gradients.\r
* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with tf.data, tf.distribute and tf.keras APIs. \r
* Unification of exchange formats to SavedModel. All TensorFlow ecosystem projects (TensorFlow Lite, TensorFlow JS, TensorFlow Serving, TensorFlow Hub) accept SavedModels. Model state should be saved to and restored from SavedModels.\r
* API Changes: Many API symbols have been renamed or removed, and argument names have changed. Many of these changes are motivated by consistency and clarity. The 1.x API remains available in the compat.v1 module. A list of all symbol changes can be found [here](https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0). \r
 * API clean-up, included removing `tf.app`, `tf.flags`, and `tf.logging` in favor of [absl-py](https://github.com/abseil/abseil-py).\r
* No more global variables with helper methods like `tf.global_variables_initializer` and `tf.get_global_step`.\r
* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r
* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r
* Fixes autocomplete for most TensorFlow API references by switching to use relative imports in API `__init__.py` files.\r
* Auto Mixed-Precision graph optimizer simplifies converting models to `float16` for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r
* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to `TRUE` or "1" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r
\r
## Breaking Changes\r
* Many backwards incompatible API changes have been made to clean up the APIs and make them more consistent.\r
* Toolchains:\r
  * TensorFlow 2.0.0 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r
  * Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r
  Removed the `freeze_graph` command line tool; `SavedModel` should be used in place of frozen graphs.\r
  \r
* `tf.contrib`:\r
  * `tf.contrib` has been deprecated, and functionality has been either migrated to the core TensorFlow API, to an ecosystem project such as [tensorflow/addons](https://www.github.com/tensorflow/addons) or [tensorflow/io](https://www.github.com/tensorflow/io), or removed entirely.\r
  * Remove `tf.contrib.timeseries` dependency on TF distributions.\r
  * Replace contrib references with `tf.estimator.experimental.*` for apis in `early_stopping.py`.\r
  \r
* `tf.estimator`:\r
  * Premade estimators in the tf.estimator.DNN/Linear/DNNLinearCombined family have been updated to use `tf.keras.optimizers` instead of the `tf.compat.v1.train.Optimizer`s. If you do not pass in an `optimizer=` arg or if you use a string, the premade estimator will use the Keras optimizer. This is checkpoint breaking, as the optimizers have separate variables. A checkpoint converter tool for converting optimizers is included with the release,  but if you want to avoid any change, switch to the v1 version of the estimator:  `tf.compat.v1.estimator.DNN/Linear/DNNLinearCombined*`.\r
  * Default aggregation for canned Estimators is now `SUM_OVER_BATCH_SIZE`. To maintain previous default behavior, please pass `SUM` as the loss aggregation method.\r
  * Canned Estimators don’t support `input_layer_partitioner` arg in the API. If you have this arg, you will have to switch to `tf.compat.v1 canned Estimators`.\r
  * `Estimator.export_savedmodel` has been renamed to `export_saved_model`.\r
  * When saving to SavedModel, Estimators will strip default op attributes. This is almost always the correct behavior, as it is more forwards compatible, but if you require that default attributes to be saved with the model, please use `tf.compat.v1.Estimator`.\r
  * Feature Columns have been upgraded to be more Eager-friendly and to work with Keras. As a result, `tf.feature_column.input_layer` has been deprecated in favor of `tf.keras.layers.DenseFeatures`. v1 feature columns have direct analogues in v2 except for `shared_embedding_columns`, which are not cross-compatible with v1 and v2. Use `tf.feature_column.shared_embeddings` instead.\r
  \r
* `tf.keras`:\r
  * `OMP_NUM_THREADS` is no longer used by the default Keras config.  To configure the number of threads, use `tf.config.threading` APIs.\r
  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel. HDF5 files are still supported.\r
  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r
  * Layers now default to float32, and automatically cast their inputs to the layer's dtype. If you had a model that used float64, it will probably silently use float32 in TensorFlow 2, and a warning will be issued that starts with `Layer <layer-name>` is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r
 \r
* `tf.lite`:\r
  * Removed `lite.OpHint`, `lite.experimental`, and `lite.constant` from 2.0 API.\r
* Tensors are no longer hashable, but instead compare element-wise with `==` and `!=`. Use `tf.compat.v1.disable_tensor_equality()` to return to the previous behavior.\r
* Performing equality operations on Tensors or Variables with incompatible shapes an exception is no longer thrown. Instead `__eq__` returns False and `__ne__` returns True.\r
* Removed `tf.string_split` from v2 API.\r
* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r
* Add `UnifiedGRU` as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from `hard_sigmoid` to `sigmoid`, and `reset_after` to True in 2.0. Historically recurrent activation is `hard_sigmoid` since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r
* `CUDNN_INSTALL_PATH`, `TENSORRT_INSTALL_PATH`, `NCCL_INSTALL_PATH`, `NCCL_HDR_PATH` are deprecated. Use `TF_CUDA_PATHS` instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r
\r
Refer to our [public project status tracker](https://github.com/orgs/tensorflow/projects/4) and [issues tagged with 2.0](https://github.com/tensorflow/tensorflow/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22TF+2.0%22+) on GitHub for insight into recent issues and development progress.\r
\r
If you experience any snags when using TF 2.0, please let us know at the [TF 2.0 Testing User Group](https://groups.google.com/a/tensorflow.org/forum/?utm_medium=email&utm_source=footer#!forum/testing). We have a support mailing list as well as weekly testing meetings, and would love to hear your migration feedback and questions.\r
\r
\r
## Bug Fixes and Other Changes\r
\r
* `tf.contrib`:\r
  * Expose `tf.contrib.proto.*` ops in `tf.io` (they will exist in TF2)\r
  \r
* `tf.data`:\r
  * Add support for TensorArrays to `tf.data Dataset`.\r
  * Integrate Ragged Tensors with `tf.data`.\r
  * All core and experimental tf.data transformations that input user-defined functions can span multiple devices now.\r
  * Extending the TF 2.0 support for `shuffle(..., reshuffle_each_iteration=True)` and `cache()` to work across different Python iterators for the same dataset.\r
  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r
  * Add `num_parallel_reads` and passing in a Dataset containing filenames into `TextLineDataset` and `FixedLengthRecordDataset`.\r
  * Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r
  * Promoting `tf.data.experimental.enumerate_dataset` to core as `tf.data.Dataset.enumerate`.\r
  * Promoting `tf.data.experimental.unbatch` to core as `tf.data.Dataset.unbatch`.\r
  * Adds option for introducing slack in the pipeline to reduce CPU contention, via `tf.data.Options().experimental_slack = True`\r
  * Added experimental support for parallel batching to `batch()` and `padded_batch()`. This functionality can be enabled through `tf.data.Options()`.\r
  * Support cancellation of long-running `reduce`.\r
  * Now we use `dataset` node name as prefix instead of the op name, to identify the component correctly in metrics, for pipelines with repeated components.\r
  * Improve the performance of datasets using `from_tensors()`.\r
  * Promoting `unbatch` from experimental to core API.\r
  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r
\r
* `tf.distribute`:\r
  * Enable `tf.distribute.experimental.MultiWorkerMirroredStrategy` working in eager mode.\r
  * Callbacks are supported in `MultiWorkerMirroredStrategy`.\r
  * Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r
  * Loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a `tf.distribute.Strategy`.\r
  * Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r
  * Support for multi-host `ncclAllReduce` in Distribution Strategy.\r
\r
* `tf.estimator`:\r
  * Replace `tf.contrib.estimator.add_metrics` with `tf.estimator.add_metrics`\r
  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r
  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_s in Estimator\r
  * Canned Estimators will now use keras optimizers by default. An error will be raised if tf.train.Optimizers are used, and you will have to switch to tf.keras.optimizers or tf.compat.v1 canned Estimators.\r
  * A checkpoint converter for canned Estimators has been provided to transition canned Estimators that are warm started from `tf.train.Optimizers` to `tf.keras.optimizers`.\r
  * Losses are scaled in canned estimator v2 and not in the optimizers anymore. If you are using Estimator + distribution strategy + optimikzer v1 then the behavior does not change. This implies that if you are using custom estimator with optimizer v2, you have to scale losses. We have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r
\r
* `tf.keras`:\r
  * Premade models (including Linear and WideDeep) have been introduced for the purpose of replacing Premade estimators.\r
  * Model saving changes\r
  * `model.save` and `tf.saved_model.save` may now save to the TensorFlow SavedModel format. The model can be restored using `tf.keras.models.load_model`. HDF5 files are still supported, and may be used by specifying `save_format="h5"` when saving.\r
  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r
  * Add support for passing list of lists to the `metrics` argument in Keras `compile`.\r
  * Add `tf.keras.layers.AbstractRNNCell` as the preferred implementation for RNN cells in TF v2. User can use it to implement RNN cells with custom behavior.\r
  * Keras training and validation curves are shown on the same plot when using the TensorBoard callback.\r
  * Switched Keras `fit/evaluate/predict` execution to use only a single unified path by default unless eager execution has been explicitly disabled, regardless of input type. This unified path places an eager-friendly training step inside of a `tf.function`. With this \r
   1.  All input types are converted to `Dataset`.\r
   2. The path assumes there is always a distribution strategy. when distribution strategy is not specified the path uses a no-op distribution strategy. \r
   3. The training step is wrapped in `tf.function` unless `run_eagerly=True` is set in compile. The single path execution code does not yet support all use cases. We fallback to the existing v1 execution paths if your model contains the following: \r
     1. `sample_weight_mode` in compile \r
     2. `weighted_metrics` in compile \r
     3. v1 optimizer \r
     4. target tensors in compile\r
If you are experiencing any issues because of this change, please inform us (file an issue) about your use case and you can unblock yourself by setting `experimental_run_tf_function=False` in compile meanwhile. We have seen couple of use cases where the model usage pattern is not as expected and would not work with this change.\r
   1. output tensors of one layer is used in the constructor of another.\r
   2. symbolic tensors outside the scope of the model are used in custom loss functions.\r
   The flag can be disabled for these cases and ideally the usage pattern will need to be fixed.\r
  * Mark Keras `set_session` as `compat.v1` only.\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint format`, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r
  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r
  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r
  * Update TF 2.0 `keras.backend.name_scope` to use TF 2.0 `name_scope`.\r
  * Add v2 module aliases for losses, metrics, initializers and optimizers: `tf.losses = tf.keras.losses` & `tf.metrics = tf.keras.metrics` &  `tf.initializers = tf.keras.initializers` & `tf.optimizers = tf.keras.optimizers`.\r
  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r
  * Added public APIs for `cumsum` and `cumprod` keras backend functions.\r
  * Add support for temporal sample weight mode in subclassed models.\r
  * Raise `ValueError` if an integer is passed to the training APIs. \r
  * Added fault-tolerance support for training Keras model via `model.fit()` with `MultiWorkerMirroredStrategy`, tutorial available.\r
  * Custom Callback tutorial is now available.\r
  * To train with `tf.distribute`, Keras API is recommended over estimator.\r
  * `steps_per_epoch` and `steps` arguments are supported with numpy arrays.\r
  * New error message when unexpected keys are used in sample_weight/class_weight dictionaries \r
  * Losses are scaled in Keras compile/fit and not in the optimizers anymore. If you are using custom training loop, we have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r
  * `Layer` apply and add_variable APIs are deprecated.\r
  * Added support for channels first data format in cross entropy losses with logits and support for tensors with unknown ranks.\r
  * Error messages will be raised if `add_update`, `add_metric`, `add_loss`, activity regularizers are used inside of a control flow branch.\r
  * New loss reduction types: \r
    1. `AUTO`: Indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When    used with `tf.distribute.Strategy`, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be `SUM` or `NONE`. Using `AUTO` in that case will raise an error. \r
    2. `NONE`: Weighted losses with one dimension reduced (axis=-1, or axis specified by loss function). When this reduction type used with built-in Keras training loops like `fit`/`evaluate`, the unreduced vector loss is passed to the optimizer but the reported loss will be a scalar value. \r
    3. `SUM`: Scalar sum of weighted losses. 4. `SUM_OVER_BATCH_SIZE`: Scalar `SUM` divided by number of elements in losses. This reduction type is not supported when used with `tf.distribute.Strategy` outside of built-in training loops like `tf.keras` `compile`/`fit`.\r
  * Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r
  * `model.add_loss(symbolic_tensor)` should work in ambient eager.\r
  * Update metric name to always reflect what the user has given in compile. Affects following cases \r
    1. When name is given as 'accuracy'/'crossentropy' \r
    2. When an aliased function name is used eg. 'mse' \r
    3. Removing the `weighted` prefix from weighted metric names.\r
  * Allow non-Tensors through v2 losses.\r
  * Add v2 sparse categorical crossentropy metric.\r
  * Add v2 APIs for `AUCCurve` and `AUCSummationMethod` enums.\r
  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r
  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r
  * Fixed critical bugs that help with DenseFeatures usability in TF2\r
\r
* `tf.lite`:\r
  * Added evaluation script for `COCO` minival\r
  * Add delegate support for `QUANTIZE`.\r
  * Add `GATHER` support to NN API delegate.\r
  * Added support for TFLiteConverter Python API in 2.0. Contains functions from_saved_model, from_keras_file, and from_concrete_functions.\r
  * Add `EXPAND_DIMS` support to NN API delegate TEST.\r
  * Add `narrow_range` attribute to QuantizeAndDequantizeV2 and V3.\r
  * Added support for `tflite_convert` command line tool in 2.0.\r
  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r
  * Post-training quantization tool supports fp16 weights and GPU delegate acceleration for fp16.\r
  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r
  * Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r
\r
* TensorRT\r
  * Add TensorFlow 2.0-compatible `TrtGraphConverterV2` API for TensorRT conversion.\r
    TensorRT initialization arguments are now passed wrapped in a named-tuple,\r
    `TrtConversionParams`, rather than as separate arguments as in `TrtGraphConverter`.\r
  * Changed API to optimize TensorRT enginges during graph optimization. This is now\r
    done by calling `converter.build()` where previously `is_dynamic_op=False` would\r
    be set.\r
  * `converter.convert()` no longer returns a `tf.function`. Now the funtion must be\r
    accessed from the saved model.\r
  * The `converter.calibrate()` method has been removed. To trigger calibration, a\r
    `calibration_input_fn` should be provided to `converter.convert()`.\r
\r
* Other:\r
  * Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r
  * ResourceVariable's gather op supports batch dimensions.\r
  * ResourceVariable support for `gather_nd`.\r
  * `ResourceVariable` and `Variable` no longer accepts `constraint` in the constructor, nor expose it as a @property.\r
  * Added gradient for `SparseToDense` op.\r
  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r
  * `image.resize` in 2.0 now supports gradients for the new resize kernels.\r
  * `image.resize` now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r
  * Renamed `tf.image` functions to remove duplicate "image" where it is redundant.\r
  * Variadic reduce is supported on CPU Variadic reduce is supported on CPU\r
  * Remove unused `StringViewVariantWrapper`.\r
  * Delete unused `Fingerprint64Map` op registration\r
  * Add broadcasting support to `tf.matmul`.\r
  * Add C++ Gradient for `BatchMatMulV2`.\r
  * Add `tf.math.cumulative_logsumexp` operation.\r
  * Add ellipsis (...) support for `tf.einsum()`.\r
  * Add expand_composites argument to all `nest.*` methods.\r
  * Added `strings.byte_split`.\r
  * Add a new "result_type" parameter to `tf.strings.split`.\r
  * Add name argument to `tf.string_split` and `tf.strings_split`.\r
  * Extend `tf.strings.split` to support inputs with any rank.\r
  * Added `tf.random.binomial`.\r
  * Added `key` and `skip` methods to `random.experimental.Generator`.\r
  * Extend `tf.function` with basic support for CompositeTensors arguments (such as `SparseTensor` and `RaggedTensor`).\r
  * `parallel_for.pfor`: add converters for Softmax, LogSoftmax, IsNaN, All, Any, and MatrixSetDiag.\r
  * `parallel_for`: add converters for LowerTriangularSolve and Cholesky.\r
  * `parallel_for`: add converters for `LogMatrixDeterminant` and `MatrixBandPart`.\r
  * `parallel_for`: Add converter for `MatrixDiag`.\r
  * `parallel_for`: Add converters for `OneHot`, `LowerBound`, `UpperBound`.\r
  * `parallel_for`: add converter for `BroadcastTo`.\r
  * Add `pfor` converter for `Squeeze`.\r
  * Add `RaggedTensor.placeholder()`.\r
  * Add ragged tensor support to `tf.squeeze`.\r
  * Update RaggedTensors to support int32 row_splits.\r
  * Allow `LinearOperator.solve` to take a `LinearOperator`.\r
  * Allow all dtypes for `LinearOperatorCirculant`.\r
  * Introduce MaxParallelism method\r
  * Add `LinearOperatorHouseholder`.\r
  * Adds Philox support to new stateful RNG's XLA path.\r
  * Added `TensorSpec` support for CompositeTensors.\r
  * Added `tf.linalg.tridiagonal_solve` op.\r
  * Added partial_pivoting input parameter to `tf.linalg.tridiagonal_solve`.\r
  * Added gradient to `tf.linalg.tridiagonal_solve`.\r
  * Added `tf.linalg.tridiagonal_mul op`.\r
  * Added GPU implementation of `tf.linalg.tridiagonal_matmul`.\r
  * Added `LinearOperatorToeplitz`.\r
  * Upgraded LIBXSMM to version 1.11.\r
  * Uniform processing of quantized embeddings by Gather and EmbeddingLookup Ops.\r
  * Correct a misstatement in the documentation of the sparse softmax cross entropy logit parameter.\r
  * Add `tf.ragged.boolean_mask`.\r
  * `tf.switch_case` added, which selects a branch_fn based on a branch_index.\r
  * The C++ kernel of gather op supports batch dimensions.\r
  * Fixed default value and documentation for `trainable` arg of tf.Variable.\r
  * `EagerTensor` now supports numpy buffer interface for tensors.\r
  * This change bumps the version number of the `FullyConnected` Op to 5.\r
  * Added new op: `tf.strings.unsorted_segment_join`.\r
  * Added HW acceleration support for `topK_v2`.\r
  * CloudBigtable version updated to v0.10.0 BEGIN_PUBLIC CloudBigtable version updated to v0.10.0.\r
  * Expose `Head` as public API.\r
  * Added `tf.sparse.from_dense` utility function.\r
  * Improved ragged tensor support in `TensorFlowTestCase`.\r
  * Added a function `nested_value_rowids` for ragged tensors.\r
  * Added `tf.ragged.stack`.\r
  * Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r
  * `ResizeInputTensor` now works for all delegates.\r
  * `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r
  * Add support of local soft device placement for eager op.\r
  * Pass partial_pivoting to the `_TridiagonalSolveGrad`.\r
  * Add HW acceleration support for `LogSoftMax`.\r
  * Add guard to avoid acceleration of L2 Normalization with input rank != 4\r
  * Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r
  * Delegate application failure leaves interpreter in valid state\r
  * `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r
  * `tf.cond`, `tf.while` and if and while in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r
  * Fix potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access.\r
  * Only create a GCS directory object if the object does not already exist.\r
  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to `True` when using imperative control flow in the `call` method.\r
  * Begin adding Go wrapper for C Eager API.\r
  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r
  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r
  * Add `batch_dims` argument to `tf.gather`.\r
  * The behavior of `tf.gather` is now correct when `axis=None` and `batch_dims<0`.\r
  * Update docstring for gather to properly describe the non-empty `batch_dims` case.\r
  * Removing of dtype in the constructor of initializers and partition_info in call.\r
  * Add `tf.math.nextafter` op.\r
  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with `--define=tensorflow_mkldnn_contraction_kernel=0`.\r
  * `tf.linspace(start, stop, num)` now always uses "stop" as last value (for num > 1)\r
  * Added top-k to precision and recall to keras metrics.\r
  * Add a ragged size op and register it to the op dispatcher\r
  * Transitive dependencies on :`pooling_ops` were removed.  Some users may need to add explicit dependencies on :`pooling_ops` if they reference the operators from that library.\r
  * Add `CompositeTensor` base class.\r
  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r
  * Add templates and interfaces for creating lookup tables\r
  * `Tensor::UnsafeCopyFromInternal` deprecated in favor `Tensor::BitcastFrom`.\r
  * In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r
  * Add variant wrapper for `absl::string_view`.\r
  * Add OpKernels for some stateless maps.\r
  * DType is no longer convertible to an int. Use `dtype.as_datatype_enum` instead of `int(dtype)` to get the same result.\r
  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r
  * Added `LinearOperator.adjoint` and `LinearOperator.H` (alias).\r
  * Expose CriticalSection in core as `tf.CriticalSection`.\r
  * Enhanced graphviz output.\r
  * Add opkernel templates for common table operations.\r
  * Fix callbacks do not log values in eager mode when a deferred build model is used.\r
  * `SignatureDef` util functions have been deprecated.\r
  * Update `Fingerprint64Map` to use aliases\r
  * Add legacy string flat hash map op kernels.\r
  * Add support for `add_metric` in the graph function mode.\r
  * Updating cosine similarity loss - removed the negate sign from cosine similarity.\r
  * Changed default for gradient accumulation for TPU embeddings to true.\r
  * Adds summary trace API for collecting graph and profile information. \r
  * The `precision_mode` argument to `TrtGraphConverter` is now case insensitive.\r
\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
1e100, a6802739, 4d55397500, a6802739, Abdullah Selek, abenmao, Abolfazl Shahbazi, Adam Richter, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Alex, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, amoitra, Andreas Eberle, Andrew Lihonosov, Andy Craze, Anshuman Tripathy, Anthony Hsu, Anthony Platanios, Anuj Rawat, arp95, Arpit Shah, Armen Poghosov, armenpoghosov, Astropeak, Ashwin Ramaswami, Arpit Shah, Augustina Ragwitz, Aurelien Geron, AuréLien Geron, avasid, aweers, awesomealex1, Ayush Agrawal, Bas Aarts, Bastian Eichenberger, Bairen Yi, Bayberry Z, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, BléNesi Attila, Bodin-E, Brandon Carter, Bryan Cutler, candy.dc, Cao Zongyan, Casper Da Costa-Luis, Chao Liu, Chen Guoyin, chenchc, chengchingwen, chie8842, Christian Hansen, Christoph Boeddeker, Christopher Yeh, Clayne Robison, Coady, Patrick, crafet, csukuangfj, ctiijima, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Daniel Rasmussen, Daniel Salvadori, Dave Airlie, David Norman, Dayananda V, delock, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, Diego Caballero, dmitrievanthony, Donovan Ong, Drew Szurko, Duncan Dean, Duncan Riach, Dustin Neighly, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, Edward Forgacs, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Evgeniy Polyakov, Fangjun Kuang, Federico Martinez, Fei Hu, Felix Lemke, Filip Matzner, FlashTek, fo40225, formath, FrançOis Chollet, frreiss, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, Gautam, gehring, Geoffrey Irving, George Grzegorz Pawelczak, Grzegorz Pawelczak, George Sterpu, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, Gyoung-Yoon Ryoo, haison, Hanton Yang, HanGuo97, Haraldur TóMas HallgríMsson, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, Huan Li (李卓桓), HåKon Sandsmark, I-Hong, I-Hong Jhuo, Ilham Firdausi Putra, Ilango R, Imran Salam, Innovimax, Jacky Ko, Irene Dea, Ivan Habernal, Jakub Lipinski, Jacky, Jason Zaman, Jason Zavaglia, jayhpark530, jcf94, jefby, Jeff Daily, Jeff Poznanovic, Jeffrey Poznanovic, Jekyll Lai, jer, Jeroen BéDorf, jerryyin, jhalakp, jiakai, Jia Qingtong, Jiankang, JiangXIAO, Joe Bowser, Joe Q, Joe Quadrino, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Jonas Rauber, Jonathan Kyl, Jonathan, Joon, Joppe Geluykens, Joseph Friedman, Josh Beal,  jtressle, Julian Niedermeier, Junqin Zhang, Justin Dujardin, Justin Tunis, jwu, K. Hodges, kaixih, Kaixi Hou, kjopek, Karl Lessard, Karl Weinmeister, Karthik Muthuraman, Kashif Rasul, Kay Zhu, Kbhute-Ibm, KDR, Keno Fischer, Kevin Mader, khanhlvg, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Koock Yoon, kouml, ktaebum, Kyuwon Kim, Lakshay Tokas, Laurent Le Brun, leike666666, leonard951, Leslie-Fang, Letian Kang, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Folle, Lukas Geiger, Luke Han, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, manhyuk, Manraj Singh Grover, Marco Gaido, Marek Drozdowski, Margaret Maynard-Reid, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, mbhuiyan, mdfaijul, Mei Jie, Melissa Grueter, merturl, MichaelKonobeev, Michael KäUfl, Michal W. Tarnowski, MickaëL Schoentgen, Miguel Morin, Mihail Salnikov, Mikalai Drabovich, Mike Arpaia, Mike Holcomb, minds, monklof, Moses Marin, mpppk, Mr. Metal, Mshr-H, musikisomorphie, nammbash, Natalia Gimelshein, Nathan Luehr, Nayana-Ibm, Nayana Thorat, neargye, Neeraj Pradhan, Nehal J Wani, Neil, Nick, Nick Lewycky, Niels Ole Salscheider, Niklas SilfverströM, Niranjan Hasabnis, Nuka-137, Nutti, ocjosen, olicht, omeir1, P Sudeepam, Paige Bailey, Palmer Lao, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Patrick J. Lopresti, Patrik Gustavsson, Pavel Akhtyamov, Pavel Samolysov, PENGWA, per1234, PeterLee, Phan Van Nguyen Duc, Philipp Jund, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, R S Nikhil Krishna, Rajeshwar Reddy T, Ramon ViñAs, Rasmus Diederichsen, Reuben Morais, robert, Rohit Gupta, Roland Zimmermann, Roman Soldatow, RonLek, Ruizhe, Ryan Jiang, saishruthi, Saleem Abdulrasool, Samantha Andow, Sami Kama, Sami Kama, Sana-Damani, Saurabh Deoras, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Serv-Inc, Severen Redwood, Shahzad Lone, Shashank Gupta, shashvat, Shashvat Chand Shahi, Shubham Goyal, Shashi, Sigrid Keydana, Siju, Siju Samuel, sleighsoft, smilu97, Snease-Abq, Son Tran, Spencer Schaber, sremedios, Srini511, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Subin, Sumesh Udayakumaran, Sungmann Cho, sunway513, Supriya Rao, sxwang, Tae-Hwan Jung, Taehoon Lee, Takeo Sawada, Taylor Jakobson, Taylor Thornton, Ted Chang, TengLu, terryky, ThisIsIsaac, ThisIsPIRI, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Till Hoffmann, Tim Zaman, tomguluson92, Tongxuan Liu, Trent Lo, Trevor Morris, TungJerry, Tyorden, Uday Bondhugula, v1incent, Vagif, Vasileios Lioutas, vbvg2008, vcarpani, Vijay Ravichandran, Vikram Tiwari,Viktor Gal,  Vishwak Srinivasan, Vincent, Vishnuvardhan Janapati, Vitor-Alves, Vivek Suryamurthy, wangsiyu, wateryzephyr, WeberXie, Wei Wang, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Xinping Wang, Yan Facai (颜发才), Yann-Yy, Yasir Modak, Yasuhiro Matsumoto, ymodak, Yong Tang, Yongfeng Gu, Younes Khoudli, Yuan Lin, Yuan (Terry) Tang, Yuchen Ying, Yves-Noel Weweler, zhangyujing, zjjott, zyeric, 王振华 (Zhenhua Wang), 黄鑫"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0"^^xsd:anyURI ;
    sd:hasVersionId "v2.0.0"^^xsd:string ;
    sd:name "TensorFlow 2.0.0"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0-beta0> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2019-06-07T07:00:18+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-06-07T15:03:27+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.0.0-beta0\r
\r
## Major Features and Improvements\r
\r
TensorFlow 2.0 focuses on **simplicity** and **ease of use**, featuring updates like:\r
\r
* Easy model building with Keras and eager execution\r
* Robust model deployment in production on any platform\r
* Powerful experimentation for research\r
* API simplification by reducing duplication and removing deprecated endpoints\r
\r
The feature improvements, fixes noted here are post TF 2.0 Alpha release. Please refer to [Alpha release notes](https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-alpha0) in case you missed it.\r
\r
For information on upgrading your existing TensorFlow 1.x models, please refer to our [Upgrade](https://medium.com/tensorflow/upgrading-your-code-to-tensorflow-2-0-f72c3a4d83b5) and [Migration](https://github.com/tensorflow/docs/blob/master/site/en/r2/guide/migration_guide.ipynb) guides.\r
We have also released a collection of [tutorials and getting started guides](https://www.tensorflow.org/beta), and an [Effective Style Guide for TF 2.0](https://github.com/tensorflow/docs/blob/master/site/en/r2/guide/effective_tf2.md)\r
For more information on these community-driven changes, be sure to check out the [RFCs](https://github.com/tensorflow/community/tree/master/rfcs) we have on Github. If you care about details, all of the RFCs are important.\r
\r
## Highlights\r
\r
* Distribution Strategy: TF 2.0 users will be able to use the new [`tf.distribute.Strategy`](https://www.tensorflow.org/beta/guide/distribute_strategy) API to distribute training with minimal code changes, yielding good out-of-the-box performance. We have more strategies supported in the beta release, as well as improved support for custom training loops and Keras subclassed models. Check out the [guide](https://www.tensorflow.org/beta/guide/distribute_strategy) to see what’s supported now.\r
* API Freeze: Symbol renaming/deprecation and 2.0 API changes are complete. 2.0 API is final and is also available as part of the [TensorFlow 1.14 release](https://github.com/tensorflow/tensorflow/releases/tag/v1.14.0-rc0) in compat.v2 module. A list of all symbol changes can be found [here](https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0)\r
\r
## Breaking Changes\r
\r
* `tf.contrib` has been deprecated, and functionality has been either migrated to the core TensorFlow API, to [tensorflow/addons](https://www.github.com/tensorflow/addons), or removed entirely.\r
* Premade estimators in the tf.estimator.DNN/Linear/DNNLinearCombined family have been updated to use `tf.keras.optimizers` instead of the `tf.compat.v1.train.Optimizer`s. If you do not pass in an `optimizer=` arg or if you use a string, the premade estimator will use the keras optimizer. This is checkpoint breaking, as the optimizers have separate variables. A checkpoint converter tool for converting optimizers is included with the release,  but if you want to avoid any change, switch to the v1 version of the estimator:  `tf.compat.v1.estimator.DNN/Linear/DNNLinearCombined*`.\r
\r
Refer to our [public project status tracker](https://github.com/orgs/tensorflow/projects/4) and [issues tagged with `2.0`](https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3A2.0) on GitHub for insight into recent issues and development progress.\r
\r
If you experience any snags when using TF 2.0, please let us know at the [TF 2.0 Testing User Group](https://groups.google.com/a/tensorflow.org/forum/?utm_medium=email&utm_source=footer#!forum/testing). We have a support mailing list as well as weekly testing meetings, and would love to hear your migration feedback and questions.\r
\r
\r
## Bug Fixes and Other Changes\r
\r
* `tf.data`:\r
  * Adds option for introducing slack in the pipeline to reduce CPU contention, via `options =    `tf.data.Options()`; `options.experimental_slack = True; dataset = dataset.with_options(options)`\r
  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r
  * Add support for TensorArrays to `tf.data Dataset`.\r
* `tf.keras`:\r
  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint format`, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r
  * `OMP_NUM_THREADS` is no longer used by the default Keras config.  To configure the number of threads, use `tf.config.threading` APIs.\r
  * Mark Keras `set_session` as `compat.v1` only\r
* `tf.estimator`:\r
  * Replace `tf.contrib.estimator.add_metrics` with `tf.estimator.add_metrics`\r
* `tf.lite`:\r
  * "Update the TFLiteConverter API in 2.0. Changes from_concrete_function to from_concrete_functions."\r
  * "Add support for tflite_convert in 2.0."\r
* `tf.contrib`:\r
  * Expose tf.contrib.proto.* ops in tf.io (they will exist in TF2)\r
* Other:\r
  * Eliminate race condition during XLA convolution autotuning.\r
  * Bug fix for `tf.tile` gradient\r
  * TF code now resides in `tensorflow_core` and `tensorflow` is just a virtual pip package. No code changes are needed for projects using TensorFlow, the change is transparent.\r
  * Added gradient for SparseToDense op.\r
  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r
  * ResourceVariable's gather op supports batch dimensions.\r
  * `image.resize` in 2.0 now supports gradients for the new resize kernels.\r
  * removed `tf.string_split` from v2 API.\r
  * Variadic reduce is supported on CPU Variadic reduce is supported on CPU\r
  * Added GPU implementation of `tf.linalg.tridiagonal_solve`.\r
  * Delete unused lookup table code.\r
  * Going forward we operate in TF 2.0, this change is part of the effort to slowly converting XYZDataset to DatasetV2 type which is the official version going to be used in TF 2.0 and motivated by some compatibility issue found, `_BigtableXYZDataset` (of type `DatasetV2`) does not implement the `_as_variant_tensor()` of DatasetV1, when moving `contrib.bigtable` to `tensorflow_io`. Converting into `DatasetV2` removes the overheads to maintain V1 while we are moving into TF 2.0.\r
  * Remove unused `StringViewVariantWrapper`.\r
  * Delete unused Fingerprint64Map op registration.\r
  * Add broadcasting support to `tf.matmul`.\r
  * Add ellipsis (...) support for `tf.einsum()`.\r
  * ResourceVariable support for `gather_nd`.\r
  * Add expand_composites argument to all nest.* methods.\r
  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r
  * Add a new "result_type" parameter to `tf.strings.split`.\r
  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r
  * Added `tf.random.binomial`.\r
  * Extend `tf.function` with basic support for CompositeTensors arguments (such as SparseTensor and RaggedTensor).\r
  * Add name argument to `tf.string_split` and `tf.strings_split`\r
  * Added `strings.byte_split`\r
  * Add num_parallel_reads and passing in a Dataset containing filenames into TextLineDataset and FixedLengthRecordDataset\r
  * "Remove `lite.OpHint`, `lite.experimental`, and `lite.constant` from 2.0 API."\r
  * CUDNN_INSTALL_PATH, TENSORRT_INSTALL_PATH, NCCL_INSTALL_PATH, NCCL_HDR_PATH are deprecated. Use TF_CUDA_PATHS instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r
  * Add RaggedTensor.placeholder()\r
  * Add pfor converter for Squeeze.\r
  * Renamed `tf.image` functions to remove duplicate "image" where it is redundant.\r
  * Add C++ Gradient for BatchMatMulV2.\r
  * Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r
  * `parallel_for.pfor`: add converters for Softmax, LogSoftmax, IsNaN, All, Any, and MatrixSetDiag.\r
  * parallel_for: add converters for LowerTriangularSolve and Cholesky.\r
  * Add ragged tensor support to `tf.squeeze`\r
  * Allow `LinearOperator.solve` to take a `LinearOperator`.\r
  * Allow all dtypes for `LinearOperatorCirculant`.\r
  * Introduce MaxParallelism method\r
  * parallel_for: add converter for `BroadcastTo`.\r
  * Add LinearOperatorHouseholder.\r
  * Added `key` and `skip` methods to `random.experimental.Generator`.\r
  * Adds Philox support to new stateful RNG's XLA path.\r
  * Update RaggedTensors to support int32 row_splits.\r
  * Add TensorSpec support for CompositeTensors.\r
  * Added partial_pivoting input parameter to tf.linalg.tridiagonal_solve.\r
  * Extend `tf.strings.split` to support inputs with any rank\r
  * Improve the performance of datasets using `from_tensors()`.\r
  * Add `tf.linalg.tridiagonal_mul` op.\r
  * Add `LinearOperatorToeplitz`.\r
  * Added gradient to `tf.linalg.tridiagonal_solve`.\r
  * Removed TensorFlow Lite Android example (moved to new examples repo).\r
  * Updating TF 2.0 `keras.backend.name_scope` to use TF 2.0 `name_scope`.\r
  * Upgraded LIBXSMM to version 1.11.\r
  * parallel_for: add converters for `LogMatrixDeterminant` and `MatrixBandPart`.\r
  * Promoting `tf.data.experimental.enumerate_dataset` to core as `tf.data.Dataset.enumerate`.\r
  * Uniform processing of quantized embeddings by Gather and EmbeddingLookup Ops\r
  * Integrate Ragged Tensors with `tf.data`.\r
  * Correct a misstatement in the documentation of the sparse softmax cross entropy logit parameter.\r
  * parallel_for: Add converters for `OneHot`, `LowerBound`, `UpperBound`.\r
  * Added GPU implementation of `tf.linalg.tridiagonal_matmul`.\r
  * Add gradient to `tf.linalg.tridiagonal_matmul`.\r
  * Add `tf.ragged.boolean_mask`.\r
  * `tf.switch_case` added, which selects a branch_fn based on a branch_index.\r
  * The C++ kernel of gather op supports batch dimensions.\r
  * Promoting `unbatch` from experimental to core API.\r
  * Fixed default value and documentation for `trainable` arg of tf.Variable.\r
  * Adds `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()`\r
  * EagerTensor now support buffer interface for tensors.\r
  * This change bumps the version number of the FullyConnected Op to 5.\r
  * tensorflow : crash when pointer become nullptr.\r
  * Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r
* Minor docs fix for `is_gpu_available`.\r
* Fix multiline magic.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
4d55397500, a6802739, abenmao, Adam Richter, Ag Ramesh, Albin Joy, Alex, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, Andreas Eberle, Anthony Hsu, Anthony Platanios, Anuj Rawat, arp95, Arpit Shah, Astropeak, Augustina Ragwitz, Aurelien Geron, AuréLien Geron, avasid, aweers, Ayush Agrawal, Bairen Yi, Bayberry Z, Ben Barsdell, bhack, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, BléNesi Attila, Bodin-E, Bryan Cutler, Cao Zongyan, chenchc, Cheng Chang, chengchingwen, chie8842, Christian Hansen, Christian Sigg, Christoph Boeddeker, Christopher Yeh, Clayne Robison, crafet, ctiijima, Daniel Rasmussen, Daniel Salvadori, David Norman, delock, Deven Desai, Donovan Ong, Duncan Dean, Duncan Riach, Dustin Neighly, Edward Forgacs, EFanZh, Evgeniy Polyakov, FAIJUL, Fangjun Kuang, Federico Martinez, Fei Hu, Filip Matzner, FlashTek, Fred Reiss, Fredrik Knutsson, Geoffrey Irving, George Sterpu, Grzegorz Pawelczak, Guozhong Zhuang, Gu\r
rpreet Singh, Gyoung-Yoon Ryoo, Hanton Yang, Haraldur TóMas HallgríMsson, Huan Li (李卓桓), I-Hong, Irene Dea, Jacky, Jason Zaman, Jason Zavaglia, Jeff Daily, Jeffrey Poznanovic, jer, Jeroen BéDorf, jerryyin, jhalakp, jiakai, Jonathan, Justin Dujardin, Justin Tunis, Kaixi Hou, Karthik Muthuraman, Kay Zhu, KDR, Keno Fischer, Kevin Mader, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Lakshay Tokas, leonard951, Letian Kang, Li, Guizi, Lukas Geiger, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Mihail Salnikov, Mikalai Drabovich, Mike Holcomb, monklof, Moses Marin, Mr. Metal, Mshr-H, nammbash, Nathan Luehr, Neeraj Pradhan, Nick, Nick Lewycky, Niels Ole Salscheider, Niklas SilfverströM, Niranjan Hasabnis, Nuka-137, omeir1, P Sudeepam, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Patrick J. Lopresti, Pavel Akhtyamov, PENGWA, PeterLee, Philipp Jund, Pooya Davoodi, Pranav Marathe, R S Nikhil Krishna, Rohit Gupta, Roland Zimmermann, Roman Soldatow, rthadur, Ruizhe, saishruthi, Sami Kama, Sana-Damani, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Sergii Khomenko, Serv-Inc, Shashank Gupta, shashvat, Shashvat Chand Shahi, Siju Samuel, smilu97, sremedios, srinivasan.narayanamoorthy, Subin, Sumesh Udayakumaran, sunway513, sxwang, Takeo Sawada, Taylor Jakobson, Ted Chang, ThisIsIsaac, Thomas Deegan, Thomas Hagebols, Tim Zaman, Tongxuan Liu, Trent Lo, Trevor Morris, TungJerry, Tyorden, v1incent, Vijay Ravichandran, Viktor Gal, Vincent, Vishnuvardhan Janapati, wangsiyu, wateryzephyr, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Yann-Yy, Yasuhiro Matsumoto, ymodak, Yong Tang, Yuan (Terry) Tang, Zantares, 王振华 (Zhenhua Wang), 黄\r
"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-beta0"^^xsd:anyURI ;
    sd:hasVersionId "v2.0.0-beta0"^^xsd:string ;
    sd:name "TensorFlow 2.0.0-beta0"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0-beta1> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/annarev> ;
    sd:dateCreated "2019-06-13T17:41:13+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-06-14T07:16:31+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.0.0-beta1\r
\r
Tensorflow 2.0.0-beta1 is a minor update to 2.0.0-beta0 with a few important bug\r
fixes. Please refer to [2.0.0-beta0 release notes](https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-beta0) for a complete list of changes in 2.0.0-beta0.\r
\r
## Bug Fixes and Other Changes\r
* Partially fix the function inlining and performance regression for LSTM/GRU.\r
* Replace training tensor argument with python boolean. Required for TFLite, which does not yet support control flow ops.\r
* Allow SavedModel serialization to accept `None` InputSpec values.\r
"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-beta1"^^xsd:anyURI ;
    sd:hasVersionId "v2.0.0-beta1"^^xsd:string ;
    sd:name "TensorFlow 2.0.0-beta1"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0-rc0> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2019-08-22T17:40:23+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-08-23T19:01:47+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.0.0-rc0\r
\r
## Major Features and Improvements\r
\r
TensorFlow 2.0 focuses on **simplicity** and **ease of use**, featuring updates like:\r
\r
* Easy model building with Keras and eager execution.\r
* Robust model deployment in production on any platform.\r
* Powerful experimentation for research.\r
* API simplification by reducing duplication and removing deprecated endpoints.\r
\r
For details on best practices with 2.0, see [the Effective 2.0 guide](https://www.tensorflow.org/beta/guide/effective_tf2)\r
\r
\r
For information on upgrading your existing TensorFlow 1.x models, please refer to our [Upgrade](https://medium.com/tensorflow/upgrading-your-code-to-tensorflow-2-0-f72c3a4d83b5) and [Migration](https://www.tensorflow.org/beta/guide/migration_guide) guides. We have also released a collection of [tutorials and getting started guides](https://www.tensorflow.org/beta).\r
\r
## Highlights\r
\r
* TF 2.0 delivers Keras as the central high level API used to build and train models. Keras provides several model-building APIs such as Sequential, Functional, and Subclassing along with eager execution, for immediate iteration and intuitive debugging, and tf.data, for building scalable input pipelines. Checkout [guide](https://www.tensorflow.org/beta/guide/keras/overview) for additional details.\r
* Distribution Strategy: TF 2.0 users will be able to use the [`tf.distribute.Strategy`](https://www.tensorflow.org/beta/guide/distribute_strategy) API to distribute training with minimal code changes, yielding great out-of-the-box performance. It supports distributed training with Keras model.fit, as well as with custom training loops. Multi-GPU support is available, along with experimental support for multi worker and Cloud TPUs. Check out the [guide](https://www.tensorflow.org/beta/guide/distribute_strategy) for more details.\r
* Functions, not Sessions. The traditional declarative programming model of building a graph and executing it via a `tf.Session` is discouraged, and replaced with by writing regular Python functions. Using the `tf.function` decorator, such functions can be turned into graphs which can be executed remotely, serialized, and optimized for performance.\r
* Unification of tf.train.Optimizers and tf.keras.Optimizers. Use tf.keras.Optimizers for TF2.0. `compute_gradients` is removed as public API, and use GradientTape to compute gradients.\r
* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with tf.data, tf.distribute and tf.keras APIs. \r
* Unification of exchange formats to SavedModel. All TensorFlow ecosystem projects (TensorFlow Lite, TensorFlow JS, TensorFlow Serving, TensorFlow Hub) accept SavedModels. Model state should be saved to and restored from SavedModels.\r
* API Changes: Many API symbols have been renamed or removed, and argument names have changed. Many of these changes are motivated by consistency and clarity. The 1.x API remains available in the compat.v1 module. A list of all symbol changes can be found [here](https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0). \r
 * API clean-up, included removing `tf.app`, `tf.flags`, and `tf.logging` in favor of [absl-py](https://github.com/abseil/abseil-py).\r
* No more global variables with helper methods like `tf.global_variables_initializer` and `tf.get_global_step`.\r
\r
## Breaking Changes\r
* Many backwards incompatible API changes have been made to clean up the APIs and make them more consistent.\r
* `tf.contrib` has been deprecated, and functionality has been either migrated to the core TensorFlow API, to an ecosystem project such as [tensorflow/addons](https://www.github.com/tensorflow/addons) or [tensorflow/io](https://www.github.com/tensorflow/io), or removed entirely.\r
* Premade estimators in the tf.estimator.DNN/Linear/DNNLinearCombined family have been updated to use `tf.keras.optimizers` instead of the `tf.compat.v1.train.Optimizer`s. If you do not pass in an `optimizer=` arg or if you use a string, the premade estimator will use the Keras optimizer. This is checkpoint breaking, as the optimizers have separate variables. A checkpoint converter tool for converting optimizers is included with the release,  but if you want to avoid any change, switch to the v1 version of the estimator:  `tf.compat.v1.estimator.DNN/Linear/DNNLinearCombined*`.\r
* The equality operation on Tensors & Variables now compares on value instead of `id()`. As a result, both Tensors & Variables are no longer hashable types.\r
* Layers now default to float32, and automatically cast their inputs to the layer's dtype. If you had a model that used float64, it will probably silently use float32 in TensorFlow 2, and a warning will be issued that starts with "Layer <layer-name> is casting an input tensor from dtype float64 to the layer's dtype of float32". To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r
\r
Refer to our [public project status tracker](https://github.com/orgs/tensorflow/projects/4) and [issues tagged with `2.0`](https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3A2.0) on GitHub for insight into recent issues and development progress.\r
\r
If you experience any snags when using TF 2.0, please let us know at the [TF 2.0 Testing User Group](https://groups.google.com/a/tensorflow.org/forum/?utm_medium=email&utm_source=footer#!forum/testing). We have a support mailing list as well as weekly testing meetings, and would love to hear your migration feedback and questions.\r
\r
\r
## Bug Fixes and Other Changes\r
\r
* `tf.data`:\r
  * Add support for TensorArrays to `tf.data Dataset`.\r
  * Integrate Ragged Tensors with `tf.data`.\r
  * All core and experimental tf.data transformations that input user-defined functions can span multiple devices now.\r
  * Extending the TF 2.0 support for `shuffle(..., reshuffle_each_iteration=True)` and `cache()` to work across different Python iterators for the same dataset.\r
  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r
  * Add `num_parallel_reads` and passing in a Dataset containing filenames into `TextLineDataset` and `FixedLengthRecordDataset`.\r
  * Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r
  * Promoting `tf.data.experimental.enumerate_dataset` to core as `tf.data.Dataset.enumerate`.\r
  * Promoting `tf.data.experimental.unbatch` to core as `tf.data.Dataset.unbatch`.\r
  * Adds option for introducing slack in the pipeline to reduce CPU contention, via `tf.data.Options().experimental_slack = True`\r
  * Added experimental support for parallel batching to `batch()` and `padded_batch()`. This functionality can be enabled through tf.data.Options()\r
  * Support cancellation of long-running `reduce`.\r
  * Now we use `dataset` node name as prefix instead of the op name, to identify the component correctly in metrics, for pipelines with repeated components.\r
\r
* `tf.distribute`:\r
  * Enable `tf.distribute.experimental.MultiWorkerMirroredStrategy` working in eager mode.\r
  * Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r
  * Bug fix: loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a `tf.distribute.Strategy`.\r
  * Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r
  * Support for multi-host `ncclAllReduce` in Distribution Strategy.\r
\r
* `tf.estimator`:\r
  * Replace `tf.contrib.estimator.add_metrics` with `tf.estimator.add_metrics`\r
  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r
  * Replace contrib references with tf.estimator.experimental.* for apis in early_s in Estimator\r
  * Canned Estimators will now use keras optimizers by default. An error will be raised if tf.train.Optimizers are used, and you will have to switch to tf.keras.optimizers or tf.compat.v1 canned Estimators.\r
  * A checkpoint converter for canned Estimators has been provided to transition canned Estimators that are warm started from tf.train.Optimizers to tf.keras.optimizers.\r
  * Default aggregation for canned Estimators is now SUM_OVER_BATCH_SIZE. To maintain previous default behavior, please pass SUM as the loss aggregation method.\r
  * Canned Estimators don’t support `input_layer_partitioner` arg in the API. If you have this arg, you will have to switch to tf.compat.v1 canned Estimators.\r
  * Estimator.export_savedmodel has been renamed export_saved_model\r
  * When saving to SavedModel, Estimators will strip default op attributes. This is almost always the correct behavior, as it is more forwards compatible, but if you require that default attributes are saved with the model, please use tf.compat.v1.Estimator\r
  * Feature Columns have been upgraded to be more Eager-friendly and to work with Keras. As a result, tf.feature_column.input_layer has been deprecated in favor of tf.keras.layers.DenseFeatures. v1 feature columns have direct analogues in v2 except for shared_embedding_columns, which are not cross-compatible with v1 and v2. Use tf.feature_column.shared_embeddings instead.\r
  * Losses are scaled in canned estimator v2 and not in the optimizers anymore. If you are using Estimator + distribution strategy + optimikzer v1 then the behavior does not change. This implies that if you are using custom estimator with optimizer v2, you have to scale losses. We have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r
\r
* `tf.keras`:\r
  * Premade models (including Linear and WideDeep) have been introduced for the purpose of replacing Premade estimators.\r
  * Model saving changes\r
  * `model.save` and `tf.saved_model.save` may now save to the TensorFlow SavedModel format. The model can be restored using `tf.keras.models.load_model`. HDF5 files are still supported, and may be used by specifying `save_format="h5"` when saving.\r
  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel. HDF5 files are still supported.\r
  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and tf.keras.models.load_model` instead.\r
  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r
  * Add support for passing list of lists to the `metrics` argument in Keras `compile. \r
  * Add `tf.keras.layers.AbstractRNNCell` as the preferred implementation for RNN cells in TF v2. User can use it to implement RNN cells with custom behavior.\r
  * Keras training and validation curves are shown on the same plot when using the TensorBoard callback.\r
  * Switched Keras `fit/evaluate/predict` execution to use only a single unified path by default unless eager execution has been explicitly disabled, regardless of input type. This unified path places an eager-friendly training step inside of a `tf.function`. With this 1. All input types are converted to `Dataset`. 2. The path assumes there is always a distribution strategy. when distribution strategy is not specified the path uses a no-op distribution strategy. 3. The training step is wrapped in tf.function unless `run_eagerly=True` is set in compile. The single path execution code does not yet support all use cases. We fallback to the existing v1 execution paths if your model contains the following: 1. sample_weight_mode in compile 2. weighted_metrics in compile 3. v1 optimizer 4. target tensors in compile. If you are experiencing any issues because of this change, please inform us (file an issue) about your use case and you can unblock yourself by setting `experimental_run_tf_function=False` in compile meanwhile. We have seen couple of use cases where the model usage pattern is not as expected and would not work with this change. 1. output tensors of one layer is used in the constructor of another. 2. symbolic tensors outside the scope of the model are used in custom loss functions. The flag can be disabled for these cases and ideally the usage pattern will need to be fixed.\r
  * `OMP_NUM_THREADS` is no longer used by the default Keras config.  To configure the number of threads, use `tf.config.threading` APIs.\r
  * Mark Keras `set_session` as `compat.v1` only.\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint format`, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r
  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r
  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r
  * Update TF 2.0 `keras.backend.name_scope` to use TF 2.0 `name_scope`.\r
  * Add v2 module aliases for losses, metrics, initializers and optimizers: `tf.losses = tf.keras.losses` & `tf.metrics = tf.keras.metrics` &  `tf.initializers = tf.keras.initializers` & `tf.optimizers = tf.keras.optimizers`.\r
  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r
  * Added public APIs for `cumsum` and `cumprod` keras backend functions.\r
  * Add support for temporal sample weight mode in subclassed models.\r
  * Raise ValueError if an integer is passed to the training APIs. \r
  * Added fault-tolerance support for training Keras model via `model.fit()` with `MultiWorkerMirroredStrategy`, tutorial available.\r
  * Callbacks are supported in `MultiWorkerMirroredStrategy`.\r
  * Custom Callback tutorial is now available.\r
  * To train with `tf.distribute`, Keras api is recommended over estimator.\r
  * `steps_per_epoch` and `steps` arguments are supported with numpy arrays.\r
  * New error message when unexpected keys are used in sample_weight/class_weight dictionaries \r
  * Losses are scaled in Keras compile/fit and not in the optimizers anymore. If you are using custom training loop, we have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r
  * `Layer` apply and add_variable APIs are deprecated.\r
  * Added support for channels first data format in cross entropy losses with logits and support for tensors with unknown ranks.\r
  * Error messages will be raised if `add_update`, `add_metric`, `add_loss`, activity regularizers are used inside of a control flow branch.\r
  * New loss reduction types: 1. `AUTO`: Indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When    used with `tf.distribute.Strategy`, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be `SUM` or `NONE`. Using `AUTO` in that case will raise an error. 2. `NONE`: Weighted losses with one dimension reduced (axis=-1, or axis specified by loss function). When this reduction type used with built-in Keras training loops like `fit`/`evaluate`, the unreduced vector loss is passed to the optimizer but the reported loss will be a scalar value. 3. `SUM`: Scalar sum of weighted losses. 4. `SUM_OVER_BATCH_SIZE`: Scalar `SUM` divided by number of elements in losses. This reduction type is not supported when used with `tf.distribute.Strategy` outside of built-in training loops like `tf.keras` `compile`/`fit`.\r
\r
* `tf.lite`:\r
  * Added support for TFLiteConverter Python API in 2.0. Contains functions from_saved_model, from_keras_file, and from_concrete_functions.\r
  * Removed `lite.OpHint`, `lite.experimental`, and `lite.constant` from 2.0 API.\r
  * Added support for `tflite_convert` command line tool in 2.0.\r
  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r
  * Post-training quantization tool supports fp16 weights and GPU delegate acceleration for fp16.\r
\r
* `tf.contrib`:\r
  * Expose `tf.contrib.proto.*` ops in `tf.io` (they will exist in TF2)\r
  * Remove `tf.contrib.timeseries` dependency on TF distributions.\r
  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_stopping.py\r
\r
* Other:\r
  * Bug fix for `tf.tile gradient`.\r
  * TF code now resides in `tensorflow_core` and `tensorflow` is just a virtual pip package. No code changes are needed for projects using TensorFlow, the change is transparent\r
  * Added gradient for `SparseToDense` op.\r
  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r
  * ResourceVariable's gather op supports batch dimensions.\r
  * `image.resize` in 2.0 now supports gradients for the new resize kernels.\r
  * removed `tf.string_split` from v2 API\r
  * Variadic reduce is supported on CPU Variadic reduce is supported on CPU\r
  * Added GPU implementation of `tf.linalg.tridiagonal_solve`.\r
  * Delete unused lookup table code\r
  * Remove unused `StringViewVariantWrapper`.\r
  * Delete unused `Fingerprint64Map` op registration\r
  * Add broadcasting support to `tf.matmul`.\r
  * Add ellipsis (...) support for `tf.einsum()`.\r
  * ResourceVariable support for `gather_nd`.\r
  * Add expand_composites argument to all nest.* methods.\r
  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r
  * Add a new "result_type" parameter to `tf.strings.split`\r
  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r
  * Added `tf.random.binomial`.\r
  * Extend `tf.function` with basic support for CompositeTensors arguments (such as SparseTensor and RaggedTensor).\r
  * Add name argument to `tf.string_split` and `tf.strings_split`.\r
  * Added `strings.byte_split`.\r
  * CUDNN_INSTALL_PATH, TENSORRT_INSTALL_PATH, NCCL_INSTALL_PATH, NCCL_HDR_PATH are deprecated. Use TF_CUDA_PATHS instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r
  * Add `RaggedTensor.placeholder()`.\r
  * Add pfor converter for `Squeeze`.\r
  * Renamed `tf.image` functions to remove duplicate "image" where it is redundant.\r
  * Add C++ Gradient for BatchMatMulV2.\r
  * `parallel_for.pfor`: add converters for Softmax, LogSoftmax, IsNaN, All, Any, and MatrixSetDiag.\r
  * `parallel_for`: add converters for LowerTriangularSolve and Cholesky.\r
  * Add ragged tensor support to `tf.squeeze`.\r
  * Allow `LinearOperator.solve` to take a `LinearOperator`.\r
  * Allow all dtypes for `LinearOperatorCirculant`.\r
  * Introduce MaxParallelism method\r
  * `parallel_for`: add converter for `BroadcastTo`.\r
  * Add `LinearOperatorHouseholder`.\r
  * Added `key` and `skip` methods to `random.experimental.Generator`.\r
  * Adds Philox support to new stateful RNG's XLA path.\r
  * Update RaggedTensors to support int32 row_splits.\r
  * Add `TensorSpec` support for CompositeTensors.\r
  * Added partial_pivoting input parameter to `tf.linalg.tridiagonal_solve`.\r
  * Extend `tf.strings.split` to support inputs with any rank\r
  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r
  * Improve the performance of datasets using `from_tensors()`.\r
  * Add `tf.linalg.tridiagonal_mul op`.\r
  * Add `LinearOperatorToeplitz`.\r
  * Added gradient to `tf.linalg.tridiagonal_solve`.\r
  * Upgraded LIBXSMM to version 1.11.\r
  * `parallel_for`: add converters for `LogMatrixDeterminant` and `MatrixBandPart`.\r
  * Uniform processing of quantized embeddings by Gather and EmbeddingLookup Ops\r
  * Correct a misstatement in the documentation of the sparse softmax cross entropy logit parameter.\r
  * `parallel_for`: Add converters for `OneHot`, `LowerBound`, `UpperBound`.\r
  * Added GPU implementation of `tf.linalg.tridiagonal_matmul`.\r
  * Add gradient to `tf.linalg.tridiagonal_matmul`.\r
  * Add `tf.ragged.boolean_mask`.\r
  * `tf.switch_case` added, which selects a branch_fn based on a branch_index.\r
  * The C++ kernel of gather op supports batch dimensions.\r
  * Promoting `unbatch` from experimental to core API.\r
  * Fixed default value and documentation for `trainable` arg of tf.Variable.\r
  * Adds `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()`.\r
  * EagerTensor now supports buffer interface for tensors.\r
  * This change bumps the version number of the FullyConnected Op to 5.\r
  * tensorflow : crash when pointer become nullptr.\r
  * `parallel_for`: Add converter for `MatrixDiag`.\r
  * Add 'narrow_range' attribute to QuantizeAndDequantizeV2 and V3.\r
  * Added new op: `tf.strings.unsorted_segment_join`.\r
  * Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow)\r
  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r
  * Add HW acceleration support for topK_v2\r
  * Add new TypeSpec classes\r
  * CloudBigtable version updated to v0.10.0 BEGIN_PUBLIC CloudBigtable version updated to v0.10.0\r
  * Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r
  * Expose Head as public API.\r
   * Update docstring for gather to properly describe the non-empty batch_dims case.\r
  * Added `tf.sparse.from_dense` utility function.\r
  * Add `GATHER` support to NN API delegate\r
  * Improved ragged tensor support in `TensorFlowTestCase`.\r
  * Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r
  * `ResizeInputTensor` now works for all delegates\r
  * Start of open development of TF, TFLite, XLA MLIR dialects.\r
  * Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r
  * `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r
  * Add support of local soft device placement for eager op.\r
  * Pass partial_pivoting to the `_TridiagonalSolveGrad`.\r
  * Add HW acceleration support for LogSoftMax\r
  * Added a function nested_value_rowids for ragged tensors.\r
  * fixed a bug in histogram_op.cc.\r
  * Add guard to avoid acceleration of L2 Normalization with input rank != 4\r
  * Added evaluation script for COCO minival\r
  * Add delegate support for `QUANTIZE`\r
  * add `tf.math.cumulative_logsumexp` operation.\r
  * Add `tf.ragged.stack`.\r
  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r
  * `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r
  * Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r
  * Delegate application failure leaves interpreter in valid state\r
  * tf.cond, tf.while and if and while in AutoGraph now accept a nonscalar predicate if has a single element. This does not affec non-V2 control flow.\r
  * Enables v2 control flow as part of tf.enable_v2_behavior() and TF2_BEHAVIOR=1.\r
  * Fix potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access.\r
  * Extracts NNAPIDelegateKernel from nnapi_delegate.cc\r
  * Only create a GCS directory object if the object does not already exist.\r
  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r
  * `ResourceVariable` and `Variable` no longer accepts `constraint` in the constructor, nor expose it as a @property.\r
  * Add UnifiedGRU as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from 'hard_sigmoid' to 'sigmoid', and 'reset_after' to True in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r
  * Begin adding Go wrapper for C Eager API\r
  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r
  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r
  * Add batch_dims argument to tf.gather.\r
  * Removing of dtype in the constructor of initializers and partition_info in call.\r
  * Add `tf.math.nextafter` op.\r
  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r
  * `tf.linspace(start, stop, num)` now always uses "stop" as last value (for num > 1)\r
  * Added top-k to precision and recall to keras metrics.\r
  * Add a ragged size op and register it to the op dispatcher\r
  * Transitive dependencies on :pooling_ops were removed.  Some users may need to add explicit dependencies on :pooling_ops if they reference the operators from that library.\r
  * Add CompositeTensor base class.\r
  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r
  * Add templates and interfaces for creating lookup tables\r
  * Tensor::UnsafeCopyFromInternal deprecated in favor Tensor::BitcastFrom\r
  * In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r
  * Add variant wrapper for absl::string_view\r
  * Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r
  * Add OpKernels for some stateless maps\r
  * Add v2 APIs for AUCCurve and AUCSummationMethod enums. #tf-metrics-convergence\r
  * Allow non-Tensors through v2 losses.\r
  * Add v2 sparse categorical crossentropy metric. GITHUB_PR_OR_BUG=b/123431691\r
  * DType is no longer convertible to an int. Use dtype.as_datatype_enum instead of int(dtype) to get the same result.\r
  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r
  * Added LinearOperator.adjoint and LinearOperator.H (alias).\r
  * Expose CriticalSection in core as `tf.CriticalSection`.\r
  * Enhanced graphviz output.\r
  * The behavior of `tf.gather` is now correct when axis=None and batch_dims<0.\r
  * Add `tf.linalg.tridiagonal_solve` op.\r
  * Add opkernel templates for common table operations.\r
  * Fix issue: Callbacks do not log values in eager mode when a deferred build model is used.\r
  * SignatureDef util functions have been deprecated.\r
  * Update Fingerprint64Map to use aliases\r
  * Add legacy string flat hash map op kernels\r
  * Fix: `model.add_loss(symbolic_tensor)` should work in ambient eager.\r
  * Adding `clear_losses` API to be able to clear losses at the end of forward pass in a custom training loop in eager. GITHUB_PR_OR_BUG=b/123431691\r
  * Add support for `add_metric` in the graph function mode. GITHUB_PR_OR_BUG=tf_only\r
  * Updating cosine similarity loss - removed the negate sign from cosine similarity. GITHUB_PR_OR_BUG=b/123431691\r
  * TF 2.0 - Update metric name to always reflect what the user has given in compile. Affects following cases 1. When name is given as 'accuracy'/'crossentropy' 2. When an aliased function name is used eg. 'mse' 3. Removing the `weighted` prefix from weighted metric names.\r
  * Workaround for compiler bug(?)\r
  * Changed default for gradient accumulation for TPU embeddings to true.\r
  * Adds summary trace API for collecting graph and profile information.\r
  * `image.resize` now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r
 \r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
1e100, a6802739, Abolfazl Shahbazi, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Amit, Amit Srivastava, Andy Craze, Anshuman Tripathy, Armen Poghosov, armenpoghosov, Arpit Shah, Ashwin Ramaswami, Aurelien Geron, AuréLien Geron, aweers, awesomealex1, Bairen Yi, Ben Barsdell, Bhavani Subramanian, Brandon Carter, candy.dc, Chao Liu, Clayne Robison, csukuangfj, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Dave Airlie, David Norman, Dayananda V, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Drew Szurko, Duncan Riach, Fei Hu, Felix Lemke, Filip Matzner, fo40225, frreiss, Gautam, gehring, Grzegorz George Pawelczak, Grzegorz Pawelczak, HanGuo97, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, I-Hong Jhuo, Ilango R, Innovimax, Jacky Ko, Jakub Lipinski,  jcf94, Jeff Poznanovic, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Jonas Rauber, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K. Hodges, kaixih, Karl Lessard, Karl Weinmeister, Kashif Rasul, kjopek, Koan-Sin Tan, kouml, ktaebum, Laurent Le Brun, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, Mahmoud Abuzaina, manhyuk, Marco Gaido, Marek Drozdowski, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael KäUfl, MickaëL Schoentgen, Miguel Morin, Mike Arpaia, nammbash, Natalia Gimelshein, Nayana-Ibm, neargye, Nehal J Wani, Niels Ole Salscheider, Niranjan Hasabnis, Nutti, olicht, P Sudeepam, Paige Bailey, Palmer Lao, Pariksheet Pinjari, Pavel Samolysov, Pooya Davoodi, Ryan Jiang, Samantha Andow, Sami Kama, Saurabh Deoras, Shahzad Lone, Shashi, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Supriya Rao, Taylor Jakobson, Taylor Thornton, ThisIsPIRI, Thomas Deegan, tomguluson92, Tongxuan Liu, Vagif, vcarpani, Vikram Tiwari, Vishwak Srinivasan, Vitor-Alves, wangsiyu, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, Yan Facai (颜发才), ymodak, Yong Tang, Younes Khoudli, Yuan Lin, Yves-Noel Weweler, zjjott, 卜居, 王振华 (Wang Zhenhua), \r
\r
4d55397500, a6802739, Abdullah Selek, abenmao, Adam Richter, Ag Ramesh, Albin Joy, Alex, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, amoitra, Andreas Eberle, Andrew Lihonosov, Anthony Hsu, Anthony Platanios, Anuj Rawat, arp95, Arpit Shah, Astropeak, Augustina Ragwitz, Aurelien Geron, AuréLien Geron, avasid, aweers, Ayush Agrawal, Bas Aarts, Bastian Eichenberger, Bayberry Z, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, BléNesi Attila, Bodin-E, Bryan Cutler, Cao Zongyan, Casper Da Costa-Luis, Chen Guoyin, chenchc, chengchingwen, chie8842, Christian Hansen, Christoph Boeddeker, Christopher Yeh, Clayne Robison, Coady, Patrick, crafet, ctiijima, Daniel Rasmussen, Daniel Salvadori, David Norman, delock, Denis Khalikov, Deven Desai, Diego Caballero, Donovan Ong, Duncan Dean, Duncan Riach, Dustin Neighly, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, Edward Forgacs, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Evgeniy Polyakov, Fangjun Kuang, Federico Martinez, Fei Hu, Filip Matzner, FlashTek, fo40225, formath, FrançOis Chollet, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, Geoffrey Irving, George Grzegorz Pawelczak, George Sterpu, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, Gyoung-Yoon Ryoo, haison, Hanton Yang, Haraldur TóMas HallgríMsson, Huan Li (李卓桓), HåKon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Irene Dea, Ivan Habernal, Jacky, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, jer, Jeroen BéDorf, jerryyin, jhalakp, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Jonathan, Joon, Josh Beal, Julian Niedermeier, Junqin Zhang, Justin Dujardin, Justin Tunis, Kaixi Hou, Karthik Muthuraman, Kay Zhu, Kbhute-Ibm, KDR, Keno Fischer, Kevin Mader, khanhlvg, Kilaru Yasaswi Sri Chandra Gandhi, Koock Yoon, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Letian Kang, Li, Guizi, Lukas Folle, Lukas Geiger, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, Mihail Salnikov, Mikalai Drabovich, Mike Holcomb, minds, monklof, Moses Marin, mpppk, Mr. Metal, Mshr-H, musikisomorphie, nammbash, Nathan Luehr, Nayana Thorat, Neeraj Pradhan, Neil, Nick, Nick Lewycky, Niels Ole Salscheider, Niklas SilfverströM, Niranjan Hasabnis, Nuka-137, ocjosen, omeir1, P Sudeepam, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Patrick J. Lopresti, Patrik Gustavsson, Pavel Akhtyamov, PENGWA, per1234, PeterLee, Phan Van Nguyen Duc, Philipp Jund, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, R S Nikhil Krishna, Rajeshwar Reddy T, Ramon ViñAs, Rasmus Diederichsen, Reuben Morais, robert, Rohit Gupta, Roland Zimmermann, Roman Soldatow, RonLek, Ruizhe, Ryan Jiang, saishruthi, Saleem Abdulrasool, Sami Kama, Sana-Damani, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Serv-Inc, Severen Redwood, Shashank Gupta, shashvat, Shashvat Chand Shahi, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, sremedios, Srini511, srinivasan.narayanamoorthy, Subin Modeel, Sumesh Udayakumaran, Sungmann Cho, sunway513, sxwang, Tae-Hwan Jung, Taehoon Lee, Takeo Sawada, Taylor Jakobson, Ted Chang, TengLu, terryky, ThisIsIsaac, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Till Hoffmann, Tim Zaman, Tongxuan Liu, Trent Lo, Trevor Morris, TungJerry, Tyorden, Uday Bondhugula, v1incent, Vasileios Lioutas, vbvg2008, Vijay Ravichandran, Viktor Gal, Vincent, Vishnuvardhan Janapati, Vivek Suryamurthy, wangsiyu, wateryzephyr, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Xinping Wang, Yann-Yy, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Yuan (Terry) Tang, Yuchen Ying, zhangyujing, zyeric, 王振华 (Zhenhua Wang), 黄鑫\r
\r
"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-rc0"^^xsd:anyURI ;
    sd:hasVersionId "v2.0.0-rc0"^^xsd:string ;
    sd:name "TensorFlow 2.0.0-rc0"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0-rc1> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2019-09-11T17:43:51+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-09-11T21:43:03+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.0.0-rc1\r
\r
## Major Features and Improvements\r
\r
TensorFlow 2.0 focuses on **simplicity** and **ease of use**, featuring updates like:\r
\r
* Easy model building with Keras and eager execution.\r
* Robust model deployment in production on any platform.\r
* Powerful experimentation for research.\r
* API simplification by reducing duplication and removing deprecated endpoints.\r
\r
For details on best practices with 2.0, see [the Effective 2.0 guide](https://www.tensorflow.org/beta/guide/effective_tf2)\r
\r
\r
For information on upgrading your existing TensorFlow 1.x models, please refer to our [Upgrade](https://medium.com/tensorflow/upgrading-your-code-to-tensorflow-2-0-f72c3a4d83b5) and [Migration](https://www.tensorflow.org/beta/guide/migration_guide) guides. We have also released a collection of [tutorials and getting started guides](https://www.tensorflow.org/beta).\r
\r
## Highlights\r
\r
* TF 2.0 delivers Keras as the central high level API used to build and train models. Keras provides several model-building APIs such as Sequential, Functional, and Subclassing along with eager execution, for immediate iteration and intuitive debugging, and tf.data, for building scalable input pipelines. Checkout [guide](https://www.tensorflow.org/beta/guide/keras/overview) for additional details.\r
* Distribution Strategy: TF 2.0 users will be able to use the [`tf.distribute.Strategy`](https://www.tensorflow.org/beta/guide/distribute_strategy) API to distribute training with minimal code changes, yielding great out-of-the-box performance. It supports distributed training with Keras model.fit, as well as with custom training loops. Multi-GPU support is available, along with experimental support for multi worker and Cloud TPUs. Check out the [guide](https://www.tensorflow.org/beta/guide/distribute_strategy) for more details.\r
* Functions, not Sessions. The traditional declarative programming model of building a graph and executing it via a `tf.Session` is discouraged, and replaced by writing regular Python functions. Using the `tf.function` decorator, such functions can be turned into graphs which can be executed remotely, serialized, and optimized for performance.\r
* Unification of tf.train.Optimizers and tf.keras.Optimizers. Use tf.keras.Optimizers for TF2.0. `compute_gradients` is removed as public API, and use GradientTape to compute gradients.\r
* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with tf.data, tf.distribute and tf.keras APIs. \r
* Unification of exchange formats to SavedModel. All TensorFlow ecosystem projects (TensorFlow Lite, TensorFlow JS, TensorFlow Serving, TensorFlow Hub) accept SavedModels. Model state should be saved to and restored from SavedModels.\r
* API Changes: Many API symbols have been renamed or removed, and argument names have changed. Many of these changes are motivated by consistency and clarity. The 1.x API remains available in the compat.v1 module. A list of all symbol changes can be found [here](https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0). \r
 * API clean-up, included removing `tf.app`, `tf.flags`, and `tf.logging` in favor of [absl-py](https://github.com/abseil/abseil-py).\r
* No more global variables with helper methods like `tf.global_variables_initializer` and `tf.get_global_step`.\r
* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r
* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r
* Fixes autocomplete for most TensorFlow API references by switching to use relative imports in API `__init__.py` files.\r
\r
## Breaking Changes\r
* Many backwards incompatible API changes have been made to clean up the APIs and make them more consistent.\r
* Toolchains:\r
  * TensorFlow 2.0.0 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r
  * Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r
\r
* `tf.contrib`:\r
  * `tf.contrib` has been deprecated, and functionality has been either migrated to the core TensorFlow API, to an ecosystem project such as [tensorflow/addons](https://www.github.com/tensorflow/addons) or [tensorflow/io](https://www.github.com/tensorflow/io), or removed entirely.\r
  * Remove `tf.contrib.timeseries` dependency on TF distributions.\r
  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_stopping.py.\r
\r
* `tf.estimator`:\r
  * Premade estimators in the tf.estimator.DNN/Linear/DNNLinearCombined family have been updated to use `tf.keras.optimizers` instead of the `tf.compat.v1.train.Optimizer`s. If you do not pass in an `optimizer=` arg or if you use a string, the premade estimator will use the Keras optimizer. This is checkpoint breaking, as the optimizers have separate variables. A checkpoint converter tool for converting optimizers is included with the release,  but if you want to avoid any change, switch to the v1 version of the estimator:  `tf.compat.v1.estimator.DNN/Linear/DNNLinearCombined*`.\r
  * Default aggregation for canned Estimators is now `SUM_OVER_BATCH_SIZE`. To maintain previous default behavior, please pass `SUM` as the loss aggregation method.\r
  * Canned Estimators don’t support `input_layer_partitioner` arg in the API. If you have this arg, you will have to switch to `tf.compat.v1 canned Estimators`.\r
  * `Estimator.export_savedmodel` has been renamed `export_saved_model`.\r
  * When saving to SavedModel, Estimators will strip default op attributes. This is almost always the correct behavior, as it is more forwards compatible, but if you require that default attributes are saved with the model, please use `tf.compat.v1.Estimator`.\r
  * Feature Columns have been upgraded to be more Eager-friendly and to work with Keras. As a result, `tf.feature_column.input_layer` has been deprecated in favor of `tf.keras.layers.DenseFeatures`. v1 feature columns have direct analogues in v2 except for `shared_embedding_columns`, which are not cross-compatible with v1 and v2. Use `tf.feature_column.shared_embeddings` instead.\r
\r
* `tf.keras`:\r
  * `OMP_NUM_THREADS` is no longer used by the default Keras config.  To configure the number of threads, use `tf.config.threading` APIs.\r
  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel. HDF5 files are still supported.\r
  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r
  * Layers now default to float32, and automatically cast their inputs to the layer's dtype. If you had a model that used float64, it will probably silently use float32 in TensorFlow 2, and a warning will be issued that starts with "Layer <layer-name> is casting an input tensor from dtype float64 to the layer's dtype of float32". To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r
\r
* `tf.lite`:\r
  * Removed `lite.OpHint`, `lite.experimental`, and `lite.constant` from 2.0 API.\r
* Tensors are no longer hashable, but instead compare element-wise with `==` and `!=`. Use `tf.compat.v1.disable_tensor_equality()` to return to the previous behavior.\r
* Performing equality operations on Tensors or Variables with incompatible shapes an exception is no longer thrown. Instead `__eq__` returns False and `__ne__` returns True.\r
* Removed `tf.string_split` from v2 API.\r
* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r
* Add `UnifiedGRU` as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from `hard_sigmoid` to `sigmoid`, and `reset_after` to True in 2.0. Historically recurrent activation is `hard_sigmoid` since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r
* `CUDNN_INSTALL_PATH`, `TENSORRT_INSTALL_PATH`, `NCCL_INSTALL_PATH`, `NCCL_HDR_PATH` are deprecated. Use `TF_CUDA_PATHS` instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r
\r
Refer to our [public project status tracker](https://github.com/orgs/tensorflow/projects/4) and [issues tagged with `2.0`](https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3A2.0) on GitHub for insight into recent issues and development progress.\r
\r
If you experience any snags when using TF 2.0, please let us know at the [TF 2.0 Testing User Group](https://groups.google.com/a/tensorflow.org/forum/?utm_medium=email&utm_source=footer#!forum/testing). We have a support mailing list as well as weekly testing meetings, and would love to hear your migration feedback and questions.\r
\r
\r
## Bug Fixes and Other Changes\r
\r
* `tf.contrib`:\r
  * Expose `tf.contrib.proto.*` ops in `tf.io` (they will exist in TF2)\r
  \r
* `tf.data`:\r
  * Add support for TensorArrays to `tf.data Dataset`.\r
  * Integrate Ragged Tensors with `tf.data`.\r
  * All core and experimental tf.data transformations that input user-defined functions can span multiple devices now.\r
  * Extending the TF 2.0 support for `shuffle(..., reshuffle_each_iteration=True)` and `cache()` to work across different Python iterators for the same dataset.\r
  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r
  * Add `num_parallel_reads` and passing in a Dataset containing filenames into `TextLineDataset` and `FixedLengthRecordDataset`.\r
  * Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r
  * Promoting `tf.data.experimental.enumerate_dataset` to core as `tf.data.Dataset.enumerate`.\r
  * Promoting `tf.data.experimental.unbatch` to core as `tf.data.Dataset.unbatch`.\r
  * Adds option for introducing slack in the pipeline to reduce CPU contention, via `tf.data.Options().experimental_slack = True`\r
  * Added experimental support for parallel batching to `batch()` and `padded_batch()`. This functionality can be enabled through tf.data.Options()\r
  * Support cancellation of long-running `reduce`.\r
  * Now we use `dataset` node name as prefix instead of the op name, to identify the component correctly in metrics, for pipelines with repeated components.\r
  * Improve the performance of datasets using `from_tensors()`.\r
  * Promoting `unbatch` from experimental to core API.\r
  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r
\r
* `tf.distribute`:\r
  * Enable `tf.distribute.experimental.MultiWorkerMirroredStrategy` working in eager mode.\r
  * Callbacks are supported in `MultiWorkerMirroredStrategy`.\r
  * Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r
  * Loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a `tf.distribute.Strategy`.\r
  * Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r
  * Support for multi-host `ncclAllReduce` in Distribution Strategy.\r
\r
* `tf.estimator`:\r
  * Replace `tf.contrib.estimator.add_metrics` with `tf.estimator.add_metrics`\r
  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r
  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_s in Estimator\r
  * Canned Estimators will now use keras optimizers by default. An error will be raised if tf.train.Optimizers are used, and you will have to switch to tf.keras.optimizers or tf.compat.v1 canned Estimators.\r
  * A checkpoint converter for canned Estimators has been provided to transition canned Estimators that are warm started from `tf.train.Optimizers` to `tf.keras.optimizers`.\r
  * Losses are scaled in canned estimator v2 and not in the optimizers anymore. If you are using Estimator + distribution strategy + optimikzer v1 then the behavior does not change. This implies that if you are using custom estimator with optimizer v2, you have to scale losses. We have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r
\r
* `tf.keras`:\r
  * Premade models (including Linear and WideDeep) have been introduced for the purpose of replacing Premade estimators.\r
  * Model saving changes\r
  * `model.save` and `tf.saved_model.save` may now save to the TensorFlow SavedModel format. The model can be restored using `tf.keras.models.load_model`. HDF5 files are still supported, and may be used by specifying `save_format="h5"` when saving.\r
  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r
  * Add support for passing list of lists to the `metrics` argument in Keras `compile`.\r
  * Add `tf.keras.layers.AbstractRNNCell` as the preferred implementation for RNN cells in TF v2. User can use it to implement RNN cells with custom behavior.\r
  * Keras training and validation curves are shown on the same plot when using the TensorBoard callback.\r
  * Switched Keras `fit/evaluate/predict` execution to use only a single unified path by default unless eager execution has been explicitly disabled, regardless of input type. This unified path places an eager-friendly training step inside of a `tf.function`. With this \r
   1.  All input types are converted to `Dataset`.\r
   2. The path assumes there is always a distribution strategy. when distribution strategy is not specified the path uses a no-op distribution strategy. \r
   3. The training step is wrapped in `tf.function` unless `run_eagerly=True` is set in compile. The single path execution code does not yet support all use cases. We fallback to the existing v1 execution paths if your model contains the following: \r
     1. `sample_weight_mode` in compile \r
     2. `weighted_metrics` in compile \r
     3. v1 optimizer \r
     4. target tensors in compile\r
If you are experiencing any issues because of this change, please inform us (file an issue) about your use case and you can unblock yourself by setting `experimental_run_tf_function=False` in compile meanwhile. We have seen couple of use cases where the model usage pattern is not as expected and would not work with this change.\r
   1. output tensors of one layer is used in the constructor of another.\r
   2. symbolic tensors outside the scope of the model are used in custom loss functions.\r
   The flag can be disabled for these cases and ideally the usage pattern will need to be fixed.\r
  * Mark Keras `set_session` as `compat.v1` only.\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint format`, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r
  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r
  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r
  * Update TF 2.0 `keras.backend.name_scope` to use TF 2.0 `name_scope`.\r
  * Add v2 module aliases for losses, metrics, initializers and optimizers: `tf.losses = tf.keras.losses` & `tf.metrics = tf.keras.metrics` &  `tf.initializers = tf.keras.initializers` & `tf.optimizers = tf.keras.optimizers`.\r
  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r
  * Added public APIs for `cumsum` and `cumprod` keras backend functions.\r
  * Add support for temporal sample weight mode in subclassed models.\r
  * Raise ValueError if an integer is passed to the training APIs. \r
  * Added fault-tolerance support for training Keras model via `model.fit()` with `MultiWorkerMirroredStrategy`, tutorial available.\r
  * Custom Callback tutorial is now available.\r
  * To train with `tf.distribute`, Keras api is recommended over estimator.\r
  * `steps_per_epoch` and `steps` arguments are supported with numpy arrays.\r
  * New error message when unexpected keys are used in sample_weight/class_weight dictionaries \r
  * Losses are scaled in Keras compile/fit and not in the optimizers anymore. If you are using custom training loop, we have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r
  * `Layer` apply and add_variable APIs are deprecated.\r
  * Added support for channels first data format in cross entropy losses with logits and support for tensors with unknown ranks.\r
  * Error messages will be raised if `add_update`, `add_metric`, `add_loss`, activity regularizers are used inside of a control flow branch.\r
  * New loss reduction types: \r
    1. `AUTO`: Indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When    used with `tf.distribute.Strategy`, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be `SUM` or `NONE`. Using `AUTO` in that case will raise an error. \r
    2. `NONE`: Weighted losses with one dimension reduced (axis=-1, or axis specified by loss function). When this reduction type used with built-in Keras training loops like `fit`/`evaluate`, the unreduced vector loss is passed to the optimizer but the reported loss will be a scalar value. \r
    3. `SUM`: Scalar sum of weighted losses. 4. `SUM_OVER_BATCH_SIZE`: Scalar `SUM` divided by number of elements in losses. This reduction type is not supported when used with `tf.distribute.Strategy` outside of built-in training loops like `tf.keras` `compile`/`fit`.\r
  * Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r
  * `model.add_loss(symbolic_tensor)` should work in ambient eager.\r
  * Update metric name to always reflect what the user has given in compile. Affects following cases \r
    1. When name is given as 'accuracy'/'crossentropy' \r
    2. When an aliased function name is used eg. 'mse' \r
    3. Removing the `weighted` prefix from weighted metric names.\r
  * Allow non-Tensors through v2 losses.\r
  * Add v2 sparse categorical crossentropy metric.\r
  * Add v2 APIs for `AUCCurve` and `AUCSummationMethod` enums.\r
  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r
  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r
  * Fixed critical bugs that help with DenseFeatures usability in TF2\r
\r
* `tf.lite`:\r
  * Added evaluation script for `COCO` minival\r
  * Add delegate support for `QUANTIZE`.\r
  * Add `GATHER` support to NN API delegate.\r
  * Added support for TFLiteConverter Python API in 2.0. Contains functions from_saved_model, from_keras_file, and from_concrete_functions.\r
  * Add `EXPAND_DIMS` support to NN API delegate TEST.\r
  * Add `narrow_range` attribute to QuantizeAndDequantizeV2 and V3.\r
  * Added support for `tflite_convert` command line tool in 2.0.\r
  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r
  * Post-training quantization tool supports fp16 weights and GPU delegate acceleration for fp16.\r
  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r
  * Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r
  \r
* Other:\r
  * Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r
  * ResourceVariable's gather op supports batch dimensions.\r
  * ResourceVariable support for `gather_nd`.\r
  * `ResourceVariable` and `Variable` no longer accepts `constraint` in the constructor, nor expose it as a @property.\r
  * Added gradient for `SparseToDense` op.\r
  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r
  * `image.resize` in 2.0 now supports gradients for the new resize kernels.\r
  * `image.resize` now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r
  * Renamed `tf.image` functions to remove duplicate "image" where it is redundant.\r
  * Variadic reduce is supported on CPU Variadic reduce is supported on CPU\r
  * Remove unused `StringViewVariantWrapper`.\r
  * Delete unused `Fingerprint64Map` op registration\r
  * Add broadcasting support to `tf.matmul`.\r
  * Add C++ Gradient for `BatchMatMulV2`.\r
  * Add `tf.math.cumulative_logsumexp` operation.\r
  * Add ellipsis (...) support for `tf.einsum()`.\r
  * Add expand_composites argument to all `nest.*` methods.\r
  * Added `strings.byte_split`.\r
  * Add a new "result_type" parameter to `tf.strings.split`.\r
  * Add name argument to `tf.string_split` and `tf.strings_split`.\r
  * Extend `tf.strings.split` to support inputs with any rank.\r
  * Added `tf.random.binomial`.\r
  * Added `key` and `skip` methods to `random.experimental.Generator`.\r
  * Extend `tf.function` with basic support for CompositeTensors arguments (such as `SparseTensor` and `RaggedTensor`).\r
  * `parallel_for.pfor`: add converters for Softmax, LogSoftmax, IsNaN, All, Any, and MatrixSetDiag.\r
  * `parallel_for`: add converters for LowerTriangularSolve and Cholesky.\r
  * `parallel_for`: add converters for `LogMatrixDeterminant` and `MatrixBandPart`.\r
  * `parallel_for`: Add converter for `MatrixDiag`.\r
  * `parallel_for`: Add converters for `OneHot`, `LowerBound`, `UpperBound`.\r
  * `parallel_for`: add converter for `BroadcastTo`.\r
  * Add `pfor` converter for `Squeeze`.\r
  * Add `RaggedTensor.placeholder()`.\r
  * Add ragged tensor support to `tf.squeeze`.\r
  * Update RaggedTensors to support int32 row_splits.\r
  * Allow `LinearOperator.solve` to take a `LinearOperator`.\r
  * Allow all dtypes for `LinearOperatorCirculant`.\r
  * Introduce MaxParallelism method\r
  * Add `LinearOperatorHouseholder`.\r
  * Adds Philox support to new stateful RNG's XLA path.\r
  * Add `TensorSpec` support for CompositeTensors.\r
  * Add `tf.linalg.tridiagonal_solve` op.\r
  * Added partial_pivoting input parameter to `tf.linalg.tridiagonal_solve`.\r
  * Added gradient to `tf.linalg.tridiagonal_solve`.\r
  * Add `tf.linalg.tridiagonal_mul op`.\r
  * Added GPU implementation of `tf.linalg.tridiagonal_matmul`.\r
  * Add `LinearOperatorToeplitz`.\r
  * Upgraded LIBXSMM to version 1.11.\r
  * Uniform processing of quantized embeddings by Gather and EmbeddingLookup Ops\r
  * Correct a misstatement in the documentation of the sparse softmax cross entropy logit parameter.\r
  * Add `tf.ragged.boolean_mask`.\r
  * `tf.switch_case` added, which selects a branch_fn based on a branch_index.\r
  * The C++ kernel of gather op supports batch dimensions.\r
  * Fixed default value and documentation for `trainable` arg of tf.Variable.\r
  * EagerTensor now supports numpy buffer interface for tensors.\r
  * This change bumps the version number of the FullyConnected Op to 5.\r
  * Added new op: `tf.strings.unsorted_segment_join`.\r
  * Add HW acceleration support for `topK_v2`.\r
  * CloudBigtable version updated to v0.10.0 BEGIN_PUBLIC CloudBigtable version updated to v0.10.0.\r
  * Expose `Head` as public API.\r
  * Added `tf.sparse.from_dense` utility function.\r
  * Improved ragged tensor support in `TensorFlowTestCase`.\r
  * Added a function `nested_value_rowids` for ragged tensors.\r
  * Add `tf.ragged.stack`.\r
  * Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r
  * `ResizeInputTensor` now works for all delegates.\r
  * `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r
  * Add support of local soft device placement for eager op.\r
  * Pass partial_pivoting to the `_TridiagonalSolveGrad`.\r
  * Add HW acceleration support for `LogSoftMax`.\r
  * Add guard to avoid acceleration of L2 Normalization with input rank != 4\r
  * Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r
  * Delegate application failure leaves interpreter in valid state\r
  * `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r
  * tf.cond, tf.while and if and while in AutoGraph now accept a nonscalar predicate if has a single element. This does not affec non-V2 control flow.\r
  * Fix potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access.\r
  * Only create a GCS directory object if the object does not already exist.\r
  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r
  * Begin adding Go wrapper for C Eager API.\r
  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r
  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r
  * Add `batch_dims` argument to `tf.gather`.\r
  * The behavior of `tf.gather` is now correct when axis=None and batch_dims<0.\r
  * Update docstring for gather to properly describe the non-empty `batch_dims` case.\r
  * Removing of dtype in the constructor of initializers and partition_info in call.\r
  * Add `tf.math.nextafter` op.\r
  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with `--define=tensorflow_mkldnn_contraction_kernel=0`.\r
  * `tf.linspace(start, stop, num)` now always uses "stop" as last value (for num > 1)\r
  * Added top-k to precision and recall to keras metrics.\r
  * Add a ragged size op and register it to the op dispatcher\r
  * Transitive dependencies on :`pooling_ops` were removed.  Some users may need to add explicit dependencies on :`pooling_ops` if they reference the operators from that library.\r
  * Add `CompositeTensor` base class.\r
  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r
  * Add templates and interfaces for creating lookup tables\r
  * `Tensor::UnsafeCopyFromInternal` deprecated in favor `Tensor::BitcastFrom`.\r
  * In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r
  * Add variant wrapper for `absl::string_view`.\r
  * Add OpKernels for some stateless maps.\r
  * DType is no longer convertible to an int. Use `dtype.as_datatype_enum` instead of `int(dtype)` to get the same result.\r
  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r
  * Added `LinearOperator.adjoint` and `LinearOperator.H` (alias).\r
  * Expose CriticalSection in core as `tf.CriticalSection`.\r
  * Enhanced graphviz output.\r
  * Add opkernel templates for common table operations.\r
  * Fix callbacks do not log values in eager mode when a deferred build model is used.\r
  * `SignatureDef` util functions have been deprecated.\r
  * Update `Fingerprint64Map` to use aliases\r
  * Add legacy string flat hash map op kernels.\r
  * Add support for `add_metric` in the graph function mode.\r
  * Updating cosine similarity loss - removed the negate sign from cosine similarity.\r
  * Changed default for gradient accumulation for TPU embeddings to true.\r
  * Adds summary trace API for collecting graph and profile information. \r
  \r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
1e100, a6802739, Abolfazl Shahbazi, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Amit, Amit Srivastava, Andy Craze, Anshuman Tripathy, Armen Poghosov, armenpoghosov, Arpit Shah, Ashwin Ramaswami, Aurelien Geron, AuréLien Geron, aweers, awesomealex1, Bairen Yi, Ben Barsdell, Bhavani Subramanian, Brandon Carter, candy.dc, Chao Liu, Clayne Robison, csukuangfj, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Dave Airlie, David Norman, Dayananda V, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Drew Szurko, Duncan Riach, Fei Hu, Felix Lemke, Filip Matzner, fo40225, frreiss, Gautam, gehring, Grzegorz George Pawelczak, Grzegorz Pawelczak, HanGuo97, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, I-Hong Jhuo, Ilango R, Innovimax, Jacky Ko, Jakub Lipinski,  jcf94, Jeff Poznanovic, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Jonas Rauber, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K. Hodges, kaixih, Karl Lessard, Karl Weinmeister, Kashif Rasul, kjopek, Koan-Sin Tan, kouml, ktaebum, Laurent Le Brun, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, Mahmoud Abuzaina, manhyuk, Marco Gaido, Marek Drozdowski, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael KäUfl, MickaëL Schoentgen, Miguel Morin, Mike Arpaia, nammbash, Natalia Gimelshein, Nayana-Ibm, neargye, Nehal J Wani, Niels Ole Salscheider, Niranjan Hasabnis, Nutti, olicht, P Sudeepam, Paige Bailey, Palmer Lao, Pariksheet Pinjari, Pavel Samolysov, Pooya Davoodi, Ryan Jiang, Samantha Andow, Sami Kama, Saurabh Deoras, Shahzad Lone, Shashi, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Supriya Rao, Taylor Jakobson, Taylor Thornton, ThisIsPIRI, Thomas Deegan, tomguluson92, Tongxuan Liu, Vagif, vcarpani, Vikram Tiwari, Vishwak Srinivasan, Vitor-Alves, wangsiyu, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, Yan Facai (颜发才), ymodak, Yong Tang, Younes Khoudli, Yuan Lin, Yves-Noel Weweler, zjjott, 卜居, 王振华 (Wang Zhenhua), \r
\r
4d55397500, a6802739, Abdullah Selek, abenmao, Adam Richter, Ag Ramesh, Albin Joy, Alex, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, amoitra, Andreas Eberle, Andrew Lihonosov, Anthony Hsu, Anthony Platanios, Anuj Rawat, arp95, Arpit Shah, Astropeak, Augustina Ragwitz, Aurelien Geron, AuréLien Geron, avasid, aweers, Ayush Agrawal, Bas Aarts, Bastian Eichenberger, Bayberry Z, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, BléNesi Attila, Bodin-E, Bryan Cutler, Cao Zongyan, Casper Da Costa-Luis, Chen Guoyin, chenchc, chengchingwen, chie8842, Christian Hansen, Christoph Boeddeker, Christopher Yeh, Clayne Robison, Coady, Patrick, crafet, ctiijima, Daniel Rasmussen, Daniel Salvadori, David Norman, delock, Denis Khalikov, Deven Desai, Diego Caballero, Donovan Ong, Duncan Dean, Duncan Riach, Dustin Neighly, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, Edward Forgacs, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Evgeniy Polyakov, Fangjun Kuang, Federico Martinez, Fei Hu, Filip Matzner, FlashTek, fo40225, formath, FrançOis Chollet, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, Geoffrey Irving, George Grzegorz Pawelczak, George Sterpu, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, Gyoung-Yoon Ryoo, haison, Hanton Yang, Haraldur TóMas HallgríMsson, Huan Li (李卓桓), HåKon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Irene Dea, Ivan Habernal, Jacky, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, jer, Jeroen BéDorf, jerryyin, jhalakp, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Jonathan, Joon, Josh Beal, Julian Niedermeier, Junqin Zhang, Justin Dujardin, Justin Tunis, Kaixi Hou, Karthik Muthuraman, Kay Zhu, Kbhute-Ibm, KDR, Keno Fischer, Kevin Mader, khanhlvg, Kilaru Yasaswi Sri Chandra Gandhi, Koock Yoon, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Letian Kang, Li, Guizi, Lukas Folle, Lukas Geiger, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, Mihail Salnikov, Mikalai Drabovich, Mike Holcomb, minds, monklof, Moses Marin, mpppk, Mr. Metal, Mshr-H, musikisomorphie, nammbash, Nathan Luehr, Nayana Thorat, Neeraj Pradhan, Neil, Nick, Nick Lewycky, Niels Ole Salscheider, Niklas SilfverströM, Niranjan Hasabnis, Nuka-137, ocjosen, omeir1, P Sudeepam, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Patrick J. Lopresti, Patrik Gustavsson, Pavel Akhtyamov, PENGWA, per1234, PeterLee, Phan Van Nguyen Duc, Philipp Jund, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, R S Nikhil Krishna, Rajeshwar Reddy T, Ramon ViñAs, Rasmus Diederichsen, Reuben Morais, robert, Rohit Gupta, Roland Zimmermann, Roman Soldatow, RonLek, Ruizhe, Ryan Jiang, saishruthi, Saleem Abdulrasool, Sami Kama, Sana-Damani, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Serv-Inc, Severen Redwood, Shashank Gupta, shashvat, Shashvat Chand Shahi, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, sremedios, Srini511, srinivasan.narayanamoorthy, Subin, Sumesh Udayakumaran, Sungmann Cho, sunway513, sxwang, Tae-Hwan Jung, Taehoon Lee, Takeo Sawada, Taylor Jakobson, Ted Chang, TengLu, terryky, ThisIsIsaac, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Till Hoffmann, Tim Zaman, Tongxuan Liu, Trent Lo, Trevor Morris, TungJerry, Tyorden, Uday Bondhugula, v1incent, Vasileios Lioutas, vbvg2008, Vijay Ravichandran, Viktor Gal, Vincent, Vishnuvardhan Janapati, Vivek Suryamurthy, wangsiyu, wateryzephyr, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Xinping Wang, Yann-Yy, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Yuan (Terry) Tang, Yuchen Ying, zhangyujing, zyeric, 王振华 (Zhenhua Wang), 黄鑫"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-rc1"^^xsd:anyURI ;
    sd:hasVersionId "v2.0.0-rc1"^^xsd:string ;
    sd:name "TensorFlow 2.0.0-rc1"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.0.0-rc2> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2019-09-19T21:51:25+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-09-23T13:22:21+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.0.0-rc2\r
\r
## Major Features and Improvements\r
\r
TensorFlow 2.0 focuses on **simplicity** and **ease of use**, featuring updates like:\r
\r
* Easy model building with Keras and eager execution.\r
* Robust model deployment in production on any platform.\r
* Powerful experimentation for research.\r
* API simplification by reducing duplication and removing deprecated endpoints.\r
\r
For details on best practices with 2.0, see [the Effective 2.0 guide](https://www.tensorflow.org/beta/guide/effective_tf2)\r
\r
\r
For information on upgrading your existing TensorFlow 1.x models, please refer to our [Upgrade](https://medium.com/tensorflow/upgrading-your-code-to-tensorflow-2-0-f72c3a4d83b5) and [Migration](https://www.tensorflow.org/beta/guide/migration_guide) guides. We have also released a collection of [tutorials and getting started guides](https://www.tensorflow.org/beta).\r
\r
## Highlights\r
\r
* TF 2.0 delivers Keras as the central high level API used to build and train models. Keras provides several model-building APIs such as Sequential, Functional, and Subclassing along with eager execution, for immediate iteration and intuitive debugging, and tf.data, for building scalable input pipelines. Checkout [guide](https://www.tensorflow.org/beta/guide/keras/overview) for additional details.\r
* Distribution Strategy: TF 2.0 users will be able to use the [`tf.distribute.Strategy`](https://www.tensorflow.org/beta/guide/distribute_strategy) API to distribute training with minimal code changes, yielding great out-of-the-box performance. It supports distributed training with Keras model.fit, as well as with custom training loops. Multi-GPU support is available, along with experimental support for multi worker and Cloud TPUs. Check out the [guide](https://www.tensorflow.org/beta/guide/distribute_strategy) for more details.\r
* Functions, not Sessions. The traditional declarative programming model of building a graph and executing it via a `tf.Session` is discouraged, and replaced by writing regular Python functions. Using the `tf.function` decorator, such functions can be turned into graphs which can be executed remotely, serialized, and optimized for performance.\r
* Unification of tf.train.Optimizers and tf.keras.Optimizers. Use tf.keras.Optimizers for TF2.0. `compute_gradients` is removed as public API, and use GradientTape to compute gradients.\r
* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with tf.data, tf.distribute and tf.keras APIs. \r
* Unification of exchange formats to SavedModel. All TensorFlow ecosystem projects (TensorFlow Lite, TensorFlow JS, TensorFlow Serving, TensorFlow Hub) accept SavedModels. Model state should be saved to and restored from SavedModels.\r
* API Changes: Many API symbols have been renamed or removed, and argument names have changed. Many of these changes are motivated by consistency and clarity. The 1.x API remains available in the compat.v1 module. A list of all symbol changes can be found [here](https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0). \r
 * API clean-up, included removing `tf.app`, `tf.flags`, and `tf.logging` in favor of [absl-py](https://github.com/abseil/abseil-py).\r
* No more global variables with helper methods like `tf.global_variables_initializer` and `tf.get_global_step`.\r
* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r
* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r
* Fixes autocomplete for most TensorFlow API references by switching to use relative imports in API `__init__.py` files.\r
* Auto Mixed-Precision graph optimizer simplifies converting models to float16 for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r
* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to "true" or "1" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r
\r
## Breaking Changes\r
* Many backwards incompatible API changes have been made to clean up the APIs and make them more consistent.\r
* Toolchains:\r
  * TensorFlow 2.0.0 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r
  * Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r
\r
* `tf.contrib`:\r
  * `tf.contrib` has been deprecated, and functionality has been either migrated to the core TensorFlow API, to an ecosystem project such as [tensorflow/addons](https://www.github.com/tensorflow/addons) or [tensorflow/io](https://www.github.com/tensorflow/io), or removed entirely.\r
  * Remove `tf.contrib.timeseries` dependency on TF distributions.\r
  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_stopping.py.\r
\r
* `tf.estimator`:\r
  * Premade estimators in the tf.estimator.DNN/Linear/DNNLinearCombined family have been updated to use `tf.keras.optimizers` instead of the `tf.compat.v1.train.Optimizer`s. If you do not pass in an `optimizer=` arg or if you use a string, the premade estimator will use the Keras optimizer. This is checkpoint breaking, as the optimizers have separate variables. A checkpoint converter tool for converting optimizers is included with the release,  but if you want to avoid any change, switch to the v1 version of the estimator:  `tf.compat.v1.estimator.DNN/Linear/DNNLinearCombined*`.\r
  * Default aggregation for canned Estimators is now `SUM_OVER_BATCH_SIZE`. To maintain previous default behavior, please pass `SUM` as the loss aggregation method.\r
  * Canned Estimators don’t support `input_layer_partitioner` arg in the API. If you have this arg, you will have to switch to `tf.compat.v1 canned Estimators`.\r
  * `Estimator.export_savedmodel` has been renamed `export_saved_model`.\r
  * When saving to SavedModel, Estimators will strip default op attributes. This is almost always the correct behavior, as it is more forwards compatible, but if you require that default attributes are saved with the model, please use `tf.compat.v1.Estimator`.\r
  * Feature Columns have been upgraded to be more Eager-friendly and to work with Keras. As a result, `tf.feature_column.input_layer` has been deprecated in favor of `tf.keras.layers.DenseFeatures`. v1 feature columns have direct analogues in v2 except for `shared_embedding_columns`, which are not cross-compatible with v1 and v2. Use `tf.feature_column.shared_embeddings` instead.\r
\r
* `tf.keras`:\r
  * `OMP_NUM_THREADS` is no longer used by the default Keras config.  To configure the number of threads, use `tf.config.threading` APIs.\r
  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel. HDF5 files are still supported.\r
  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r
  * Layers now default to float32, and automatically cast their inputs to the layer's dtype. If you had a model that used float64, it will probably silently use float32 in TensorFlow 2, and a warning will be issued that starts with "Layer <layer-name> is casting an input tensor from dtype float64 to the layer's dtype of float32". To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r
\r
* `tf.lite`:\r
  * Removed `lite.OpHint`, `lite.experimental`, and `lite.constant` from 2.0 API.\r
\r
* Tensors are no longer hashable, but instead compare element-wise with `==` and `!=`. Use `tf.compat.v1.disable_tensor_equality()` to return to the previous behavior.\r
* Performing equality operations on Tensors or Variables with incompatible shapes an exception is no longer thrown. Instead `__eq__` returns False and `__ne__` returns True.\r
* Removed `tf.string_split` from v2 API.\r
* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r
* Add `UnifiedGRU` as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from `hard_sigmoid` to `sigmoid`, and `reset_after` to True in 2.0. Historically recurrent activation is `hard_sigmoid` since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r
* `CUDNN_INSTALL_PATH`, `TENSORRT_INSTALL_PATH`, `NCCL_INSTALL_PATH`, `NCCL_HDR_PATH` are deprecated. Use `TF_CUDA_PATHS` instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r
\r
Refer to our [public project status tracker](https://github.com/orgs/tensorflow/projects/4) and [issues tagged with `2.0`](https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3A2.0) on GitHub for insight into recent issues and development progress.\r
\r
If you experience any snags when using TF 2.0, please let us know at the [TF 2.0 Testing User Group](https://groups.google.com/a/tensorflow.org/forum/?utm_medium=email&utm_source=footer#!forum/testing). We have a support mailing list as well as weekly testing meetings, and would love to hear your migration feedback and questions.\r
\r
\r
## Bug Fixes and Other Changes\r
\r
* `tf.contrib`:\r
  * Expose `tf.contrib.proto.*` ops in `tf.io` (they will exist in TF2)\r
  \r
* `tf.data`:\r
  * Add support for TensorArrays to `tf.data Dataset`.\r
  * Integrate Ragged Tensors with `tf.data`.\r
  * All core and experimental tf.data transformations that input user-defined functions can span multiple devices now.\r
  * Extending the TF 2.0 support for `shuffle(..., reshuffle_each_iteration=True)` and `cache()` to work across different Python iterators for the same dataset.\r
  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r
  * Add `num_parallel_reads` and passing in a Dataset containing filenames into `TextLineDataset` and `FixedLengthRecordDataset`.\r
  * Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r
  * Promoting `tf.data.experimental.enumerate_dataset` to core as `tf.data.Dataset.enumerate`.\r
  * Promoting `tf.data.experimental.unbatch` to core as `tf.data.Dataset.unbatch`.\r
  * Adds option for introducing slack in the pipeline to reduce CPU contention, via `tf.data.Options().experimental_slack = True`\r
  * Added experimental support for parallel batching to `batch()` and `padded_batch()`. This functionality can be enabled through tf.data.Options()\r
  * Support cancellation of long-running `reduce`.\r
  * Now we use `dataset` node name as prefix instead of the op name, to identify the component correctly in metrics, for pipelines with repeated components.\r
  * Improve the performance of datasets using `from_tensors()`.\r
  * Promoting `unbatch` from experimental to core API.\r
  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r
\r
* `tf.distribute`:\r
  * Enable `tf.distribute.experimental.MultiWorkerMirroredStrategy` working in eager mode.\r
  * Callbacks are supported in `MultiWorkerMirroredStrategy`.\r
  * Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r
  * Loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a `tf.distribute.Strategy`.\r
  * Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r
  * Support for multi-host `ncclAllReduce` in Distribution Strategy.\r
\r
* `tf.estimator`:\r
  * Replace `tf.contrib.estimator.add_metrics` with `tf.estimator.add_metrics`\r
  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r
  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_s in Estimator\r
  * Canned Estimators will now use keras optimizers by default. An error will be raised if tf.train.Optimizers are used, and you will have to switch to tf.keras.optimizers or tf.compat.v1 canned Estimators.\r
  * A checkpoint converter for canned Estimators has been provided to transition canned Estimators that are warm started from `tf.train.Optimizers` to `tf.keras.optimizers`.\r
  * Losses are scaled in canned estimator v2 and not in the optimizers anymore. If you are using Estimator + distribution strategy + optimikzer v1 then the behavior does not change. This implies that if you are using custom estimator with optimizer v2, you have to scale losses. We have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r
\r
* `tf.keras`:\r
  * Premade models (including Linear and WideDeep) have been introduced for the purpose of replacing Premade estimators.\r
  * Model saving changes\r
  * `model.save` and `tf.saved_model.save` may now save to the TensorFlow SavedModel format. The model can be restored using `tf.keras.models.load_model`. HDF5 files are still supported, and may be used by specifying `save_format="h5"` when saving.\r
  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r
  * Add support for passing list of lists to the `metrics` argument in Keras `compile`.\r
  * Add `tf.keras.layers.AbstractRNNCell` as the preferred implementation for RNN cells in TF v2. User can use it to implement RNN cells with custom behavior.\r
  * Keras training and validation curves are shown on the same plot when using the TensorBoard callback.\r
  * Switched Keras `fit/evaluate/predict` execution to use only a single unified path by default unless eager execution has been explicitly disabled, regardless of input type. This unified path places an eager-friendly training step inside of a `tf.function`. With this\r
    1.  All input types are converted to `Dataset`.\r
    2. The path assumes there is always a distribution strategy, when distribution strategy is not specified the path uses a no-op distribution strategy. \r
    3. The training step is wrapped in `tf.function` unless `run_eagerly=True` is set in compile. The single path execution code does not yet support all use cases. We fallback to the existing v1 execution paths if your model contains the following: \r
       1. `sample_weight_mode` in compile \r
       2. `weighted_metrics` in compile \r
       3. v1 optimizer \r
       4. target tensors in compile.  \r
    4. If you are experiencing any issues because of this change, please inform us (file an issue) about your use case and you can unblock yourself by setting `experimental_run_tf_function=False` in compile meanwhile. We have seen couple of use cases where the model usage pattern is not as expected and would not work with this change. \r
       1. output tensors of one layer is used in the constructor of another. \r
       2. symbolic tensors outside the scope of the model are used in custom loss functions.\r
The flag can be disabled for these cases and ideally the usage pattern will need to be fixed.\r
  * Mark Keras `set_session` as `compat.v1` only.\r
  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint format`, which allows the saved checkpoints to be compatible with `model.load_weights`.\r
  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r
  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r
  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r
  * Update TF 2.0 `keras.backend.name_scope` to use TF 2.0 `name_scope`.\r
  * Add v2 module aliases for losses, metrics, initializers and optimizers: `tf.losses = tf.keras.losses` & `tf.metrics = tf.keras.metrics` &  `tf.initializers = tf.keras.initializers` & `tf.optimizers = tf.keras.optimizers`.\r
  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r
  * Added public APIs for `cumsum` and `cumprod` keras backend functions.\r
  * Add support for temporal sample weight mode in subclassed models.\r
  * Raise ValueError if an integer is passed to the training APIs. \r
  * Added fault-tolerance support for training Keras model via `model.fit()` with `MultiWorkerMirroredStrategy`, tutorial available.\r
  * Custom Callback tutorial is now available.\r
  * To train with `tf.distribute`, Keras api is recommended over estimator.\r
  * `steps_per_epoch` and `steps` arguments are supported with numpy arrays.\r
  * New error message when unexpected keys are used in sample_weight/class_weight dictionaries \r
  * Losses are scaled in Keras compile/fit and not in the optimizers anymore. If you are using custom training loop, we have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r
  * `Layer` apply and add_variable APIs are deprecated.\r
  * Added support for channels first data format in cross entropy losses with logits and support for tensors with unknown ranks.\r
  * Error messages will be raised if `add_update`, `add_metric`, `add_loss`, activity regularizers are used inside of a control flow branch.\r
  * New loss reduction types: \r
    1. `AUTO`: Indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When    used with `tf.distribute.Strategy`, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be `SUM` or `NONE`. Using `AUTO` in that case will raise an error. \r
    2. `NONE`: Weighted losses with one dimension reduced (axis=-1, or axis specified by loss function). When this reduction type used with built-in Keras training loops like `fit`/`evaluate`, the unreduced vector loss is passed to the optimizer but the reported loss will be a scalar value. \r
    3. `SUM`: Scalar sum of weighted losses. 4. `SUM_OVER_BATCH_SIZE`: Scalar `SUM` divided by number of elements in losses. This reduction type is not supported when used with `tf.distribute.Strategy` outside of built-in training loops like `tf.keras` `compile`/`fit`.\r
  * Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r
  * `model.add_loss(symbolic_tensor)` should work in ambient eager.\r
  * Update metric name to always reflect what the user has given in compile. Affects following cases \r
    1. When name is given as 'accuracy'/'crossentropy' \r
    2. When an aliased function name is used eg. 'mse' \r
    3. Removing the `weighted` prefix from weighted metric names.\r
  * Allow non-Tensors through v2 losses.\r
  * Add v2 sparse categorical crossentropy metric.\r
  * Add v2 APIs for `AUCCurve` and `AUCSummationMethod` enums.\r
  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r
  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r
  * Fixed critical bugs that help with DenseFeatures usability in TF2\r
\r
* `tf.lite`:\r
  * Added evaluation script for `COCO` minival\r
  * Add delegate support for `QUANTIZE`.\r
  * Add `GATHER` support to NN API delegate.\r
  * Added support for TFLiteConverter Python API in 2.0. Contains functions from_saved_model, from_keras_file, and from_concrete_functions.\r
  * Add `EXPAND_DIMS` support to NN API delegate TEST.\r
  * Add `narrow_range` attribute to QuantizeAndDequantizeV2 and V3.\r
  * Added support for `tflite_convert` command line tool in 2.0.\r
  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r
  * Post-training quantization tool supports fp16 weights and GPU delegate acceleration for fp16.\r
  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r
  * Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r
\r
* TensorRT\r
  * Add TensorFlow 2.0-compatible `TrtGraphConverterV2` API for TensorRT conversion. TensorRT initialization arguments are now passed wrapped in a named-tuple,`TrtConversionParams`, rather than as separate arguments as in `TrtGraphConverter`.\r
  * Changed API to optimize TensorRT engines during graph optimization. This is nowdone by calling `converter.build()` where previously `is_dynamic_op=False` would be set.\r
  * `converter.convert()` no longer returns a `tf.function`. Now the function must beaccessed from the saved model.\r
  * The `converter.calibrate()` method has been removed. To trigger calibration, a`calibration_input_fn` should be provided to `converter.convert()`.\r
  \r
* Other:\r
  * Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r
  * ResourceVariable's gather op supports batch dimensions.\r
  * ResourceVariable support for `gather_nd`.\r
  * `ResourceVariable` and `Variable` no longer accepts `constraint` in the constructor, nor expose it as a @property.\r
  * Added gradient for `SparseToDense` op.\r
  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r
  * `image.resize` in 2.0 now supports gradients for the new resize kernels.\r
  * `image.resize` now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r
  * Renamed `tf.image` functions to remove duplicate "image" where it is redundant.\r
  * Variadic reduce is supported on CPU Variadic reduce is supported on CPU\r
  * Remove unused `StringViewVariantWrapper`.\r
  * Delete unused `Fingerprint64Map` op registration\r
  * Add broadcasting support to `tf.matmul`.\r
  * Add C++ Gradient for `BatchMatMulV2`.\r
  * Add `tf.math.cumulative_logsumexp` operation.\r
  * Add ellipsis (...) support for `tf.einsum()`.\r
  * Add expand_composites argument to all `nest.*` methods.\r
  * Added `strings.byte_split`.\r
  * Add a new "result_type" parameter to `tf.strings.split`.\r
  * Add name argument to `tf.string_split` and `tf.strings_split`.\r
  * Extend `tf.strings.split` to support inputs with any rank.\r
  * Added `tf.random.binomial`.\r
  * Added `key` and `skip` methods to `random.experimental.Generator`.\r
  * Extend `tf.function` with basic support for CompositeTensors arguments (such as `SparseTensor` and `RaggedTensor`).\r
  * `parallel_for.pfor`: add converters for Softmax, LogSoftmax, IsNaN, All, Any, and MatrixSetDiag.\r
  * `parallel_for`: add converters for LowerTriangularSolve and Cholesky.\r
  * `parallel_for`: add converters for `LogMatrixDeterminant` and `MatrixBandPart`.\r
  * `parallel_for`: Add converter for `MatrixDiag`.\r
  * `parallel_for`: Add converters for `OneHot`, `LowerBound`, `UpperBound`.\r
  * `parallel_for`: add converter for `BroadcastTo`.\r
  * Add `pfor` converter for `Squeeze`.\r
  * Add `RaggedTensor.placeholder()`.\r
  * Add ragged tensor support to `tf.squeeze`.\r
  * Update RaggedTensors to support int32 row_splits.\r
  * Allow `LinearOperator.solve` to take a `LinearOperator`.\r
  * Allow all dtypes for `LinearOperatorCirculant`.\r
  * Introduce MaxParallelism method\r
  * Add `LinearOperatorHouseholder`.\r
  * Adds Philox support to new stateful RNG's XLA path.\r
  * Add `TensorSpec` support for CompositeTensors.\r
  * Add `tf.linalg.tridiagonal_solve` op.\r
  * Added partial_pivoting input parameter to `tf.linalg.tridiagonal_solve`.\r
  * Added gradient to `tf.linalg.tridiagonal_solve`.\r
  * Add `tf.linalg.tridiagonal_mul op`.\r
  * Added GPU implementation of `tf.linalg.tridiagonal_matmul`.\r
  * Add `LinearOperatorToeplitz`.\r
  * Upgraded LIBXSMM to version 1.11.\r
  * Uniform processing of quantized embeddings by Gather and EmbeddingLookup Ops\r
  * Correct a misstatement in the documentation of the sparse softmax cross entropy logit parameter.\r
  * Add `tf.ragged.boolean_mask`.\r
  * `tf.switch_case` added, which selects a branch_fn based on a branch_index.\r
  * The C++ kernel of gather op supports batch dimensions.\r
  * Fixed default value and documentation for `trainable` arg of tf.Variable.\r
  * EagerTensor now supports numpy buffer interface for tensors.\r
  * This change bumps the version number of the FullyConnected Op to 5.\r
  * Added new op: `tf.strings.unsorted_segment_join`.\r
  * Add HW acceleration support for `topK_v2`.\r
  * CloudBigtable version updated to v0.10.0 BEGIN_PUBLIC CloudBigtable version updated to v0.10.0.\r
  * Expose `Head` as public API.\r
  * Added `tf.sparse.from_dense` utility function.\r
  * Improved ragged tensor support in `TensorFlowTestCase`.\r
  * Added a function `nested_value_rowids` for ragged tensors.\r
  * Add `tf.ragged.stack`.\r
  * Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r
  * `ResizeInputTensor` now works for all delegates.\r
  * `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r
  * Add support of local soft device placement for eager op.\r
  * Pass partial_pivoting to the `_TridiagonalSolveGrad`.\r
  * Add HW acceleration support for `LogSoftMax`.\r
  * Add guard to avoid acceleration of L2 Normalization with input rank != 4\r
  * Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r
  * Delegate application failure leaves interpreter in valid state\r
  * `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r
  * tf.cond, tf.while and if and while in AutoGraph now accept a nonscalar predicate if has a single element. This does not affec non-V2 control flow.\r
  * Fix potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access.\r
  * Only create a GCS directory object if the object does not already exist.\r
  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r
  * Begin adding Go wrapper for C Eager API.\r
  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r
  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r
  * Add `batch_dims` argument to `tf.gather`.\r
  * The behavior of `tf.gather` is now correct when axis=None and batch_dims<0.\r
  * Update docstring for gather to properly describe the non-empty `batch_dims` case.\r
  * Removing of dtype in the constructor of initializers and partition_info in call.\r
  * Add `tf.math.nextafter` op.\r
  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with `--define=tensorflow_mkldnn_contraction_kernel=0`.\r
  * `tf.linspace(start, stop, num)` now always uses "stop" as last value (for num > 1)\r
  * Added top-k to precision and recall to keras metrics.\r
  * Add a ragged size op and register it to the op dispatcher\r
  * Transitive dependencies on :`pooling_ops` were removed.  Some users may need to add explicit dependencies on :`pooling_ops` if they reference the operators from that library.\r
  * Add `CompositeTensor` base class.\r
  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r
  * Add templates and interfaces for creating lookup tables\r
  * `Tensor::UnsafeCopyFromInternal` deprecated in favor `Tensor::BitcastFrom`.\r
  * In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r
  * Add variant wrapper for `absl::string_view`.\r
  * Add OpKernels for some stateless maps.\r
  * DType is no longer convertible to an int. Use `dtype.as_datatype_enum` instead of `int(dtype)` to get the same result.\r
  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r
  * Added `LinearOperator.adjoint` and `LinearOperator.H` (alias).\r
  * Expose CriticalSection in core as `tf.CriticalSection`.\r
  * Enhanced graphviz output.\r
  * Add opkernel templates for common table operations.\r
  * Fix callbacks do not log values in eager mode when a deferred build model is used.\r
  * `SignatureDef` util functions have been deprecated.\r
  * Update `Fingerprint64Map` to use aliases\r
  * Add legacy string flat hash map op kernels.\r
  * Add support for `add_metric` in the graph function mode.\r
  * Updating cosine similarity loss - removed the negate sign from cosine similarity.\r
  * Changed default for gradient accumulation for TPU embeddings to true.\r
  * Adds summary trace API for collecting graph and profile information. \r
  \r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
1e100, a6802739, Abolfazl Shahbazi, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Amit, Amit Srivastava, Andy Craze, Anshuman Tripathy, Armen Poghosov, armenpoghosov, Arpit Shah, Ashwin Ramaswami, Aurelien Geron, AuréLien Geron, aweers, awesomealex1, Bairen Yi, Ben Barsdell, Bhavani Subramanian, Brandon Carter, candy.dc, Chao Liu, Clayne Robison, csukuangfj, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Dave Airlie, David Norman, Dayananda V, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Drew Szurko, Duncan Riach, Fei Hu, Felix Lemke, Filip Matzner, fo40225, frreiss, Gautam, gehring, Grzegorz George Pawelczak, Grzegorz Pawelczak, HanGuo97, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, I-Hong Jhuo, Ilango R, Innovimax, Jacky Ko, Jakub Lipinski,  jcf94, Jeff Poznanovic, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Jonas Rauber, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K. Hodges, kaixih, Karl Lessard, Karl Weinmeister, Kashif Rasul, kjopek, Koan-Sin Tan, kouml, ktaebum, Laurent Le Brun, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, Mahmoud Abuzaina, manhyuk, Marco Gaido, Marek Drozdowski, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael KäUfl, MickaëL Schoentgen, Miguel Morin, Mike Arpaia, nammbash, Natalia Gimelshein, Nayana-Ibm, neargye, Nehal J Wani, Niels Ole Salscheider, Niranjan Hasabnis, Nutti, olicht, P Sudeepam, Paige Bailey, Palmer Lao, Pariksheet Pinjari, Pavel Samolysov, Pooya Davoodi, Ryan Jiang, Samantha Andow, Sami Kama, Saurabh Deoras, Shahzad Lone, Shashi, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Supriya Rao, Taylor Jakobson, Taylor Thornton, ThisIsPIRI, Thomas Deegan, tomguluson92, Tongxuan Liu, Vagif, vcarpani, Vikram Tiwari, Vishwak Srinivasan, Vitor-Alves, wangsiyu, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, Yan Facai (颜发才), ymodak, Younes Khoudli, Yuan Lin, Yves-Noel Weweler, zjjott, 卜居, 王振华 (Wang Zhenhua), \r
\r
4d55397500, a6802739, Abdullah Selek, abenmao, Adam Richter, Ag Ramesh, Albin Joy, Alex, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, amoitra, Andreas Eberle, Andrew Lihonosov, Anthony Hsu, Anthony Platanios, Anuj Rawat, arp95, Arpit Shah, Astropeak, Augustina Ragwitz, Aurelien Geron, AuréLien Geron, avasid, aweers, Ayush Agrawal, Bas Aarts, Bastian Eichenberger, Bayberry Z, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, BléNesi Attila, Bodin-E, Bryan Cutler, Cao Zongyan, Casper Da Costa-Luis, Chen Guoyin, chenchc, chengchingwen, chie8842, Christian Hansen, Christoph Boeddeker, Christopher Yeh, Clayne Robison, Coady, Patrick, crafet, ctiijima, Daniel Rasmussen, Daniel Salvadori, David Norman, delock, Denis Khalikov, Deven Desai, Diego Caballero, Donovan Ong, Duncan Dean, Duncan Riach, Dustin Neighly, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, Edward Forgacs, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Evgeniy Polyakov, Fangjun Kuang, Federico Martinez, Fei Hu, Filip Matzner, FlashTek, fo40225, formath, FrançOis Chollet, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, Geoffrey Irving, George Grzegorz Pawelczak, George Sterpu, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, Gyoung-Yoon Ryoo, haison, Hanton Yang, Haraldur TóMas HallgríMsson, Huan Li (李卓桓), HåKon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Irene Dea, Ivan Habernal, Jacky, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, jer, Jeroen BéDorf, jerryyin, jhalakp, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Jonathan, Joon, Josh Beal, Julian Niedermeier, Junqin Zhang, Justin Dujardin, Justin Tunis, Kaixi Hou, Karthik Muthuraman, Kay Zhu, Kbhute-Ibm, KDR, Keno Fischer, Kevin Mader, khanhlvg, Kilaru Yasaswi Sri Chandra Gandhi, Koock Yoon, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Letian Kang, Li, Guizi, Lukas Folle, Lukas Geiger, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, Mihail Salnikov, Mikalai Drabovich, Mike Holcomb, minds, monklof, Moses Marin, mpppk, Mr. Metal, Mshr-H, musikisomorphie, nammbash, Nathan Luehr, Nayana Thorat, Neeraj Pradhan, Neil, Nick, Nick Lewycky, Niels Ole Salscheider, Niklas SilfverströM, Niranjan Hasabnis, Nuka-137, ocjosen, omeir1, P Sudeepam, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Patrick J. Lopresti, Patrik Gustavsson, Pavel Akhtyamov, PENGWA, per1234, PeterLee, Phan Van Nguyen Duc, Philipp Jund, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, R S Nikhil Krishna, Rajeshwar Reddy T, Ramon ViñAs, Rasmus Diederichsen, Reuben Morais, robert, Rohit Gupta, Roland Zimmermann, Roman Soldatow, RonLek, Ruizhe, Ryan Jiang, saishruthi, Saleem Abdulrasool, Sami Kama, Sana-Damani, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Serv-Inc, Severen Redwood, Shashank Gupta, shashvat, Shashvat Chand Shahi, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, sremedios, Srini511, srinivasan.narayanamoorthy, Subin, Sumesh Udayakumaran, Sungmann Cho, sunway513, sxwang, Tae-Hwan Jung, Taehoon Lee, Takeo Sawada, Taylor Jakobson, Ted Chang, TengLu, terryky, ThisIsIsaac, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Till Hoffmann, Tim Zaman, Tongxuan Liu, Trent Lo, Trevor Morris, TungJerry, Tyorden, Uday Bondhugula, v1incent, Vasileios Lioutas, vbvg2008, Vijay Ravichandran, Viktor Gal, Vincent, Vishnuvardhan Janapati, Vivek Suryamurthy, wangsiyu, wateryzephyr, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Xinping Wang, Yann-Yy, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Yuan (Terry) Tang, Yuchen Ying, zhangyujing, zyeric, 王振华 (Zhenhua Wang), 黄鑫"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-rc2"^^xsd:anyURI ;
    sd:hasVersionId "v2.0.0-rc2"^^xsd:string ;
    sd:name "TensorFlow 2.0.0-rc2"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.0.1> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2020-01-22T23:43:57+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-01-25T16:46:55+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.0.1\r
\r
## Bug Fixes and Other Changes\r
* Fixes a security vulnerability where converting a Python string to a `tf.float16` value produces a segmentation fault ([CVE-2020-5215](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5215))\r
* Updates `curl` to `7.66.0` to handle [CVE-2019-5482](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5482) and [CVE-2019-5481](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5481)\r
* Updates `sqlite3` to `3.30.01` to handle [CVE-2019-19646](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19646), [CVE-2019-19645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19645) and [CVE-2019-16168](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16168)"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.1"^^xsd:anyURI ;
    sd:hasVersionId "v2.0.1"^^xsd:string ;
    sd:name "TensorFlow 2.0.1"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.0.2> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/mihaimaruseac> ;
    sd:dateCreated "2020-05-12T19:46:23+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-05-18T16:03:17+00:00"^^xsd:dateTime ;
    sd:description """## Bug Fixes and Other Changes\r
* Updates `sqlite3` to `3.31.01` to handle [CVE-2019-19880](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19880), [CVE-2019-19244](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19244) and [CVE-2019-19645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19645)\r
* Updates `curl` to `7.69.1` to handle [CVE-2019-15601](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15601)\r
* Updates `libjpeg-turbo` to `2.0.4` to handle [CVE-2018-19664](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19664), [CVE-2018-20330](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20330) and [CVE-2019-13960](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13960)\r
* Updates Apache Spark to `2.4.5` to handle [CVE-2019-10099](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10099), [CVE-2018-17190](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17190) and [CVE-2018-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11770)"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.2"^^xsd:anyURI ;
    sd:hasVersionId "v2.0.2"^^xsd:string ;
    sd:name "TensorFlow 2.0.2"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.1.0> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2020-01-07T16:57:39+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-01-08T18:54:32+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.1.0\r
\r
TensorFlow 2.1 will be the last TF release supporting Python 2. Python 2 support [officially ends an January 1, 2020](https://www.python.org/dev/peps/pep-0373/#update). [As announced earlier](https://groups.google.com/a/tensorflow.org/d/msg/announce/gVwS5RC8mds/dCt1ka2XAAAJ), TensorFlow will also stop supporting Python 2 starting January 1, 2020, and no more releases are expected in 2019.\r
\r
## Major Features and Improvements\r
* The `tensorflow` pip package now includes GPU support by default (same as `tensorflow-gpu`) for both Linux and Windows. This runs on machines with and without NVIDIA GPUs. `tensorflow-gpu` is still available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r
* **Windows users:** Officially-released `tensorflow` Pip packages are now built with Visual Studio 2019 version 16.4 in order to take advantage of the new `/d2ReducedOptimizeHugeFunctions` compiler flag. To use these new packages, you must install "Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017 and 2019", available from Microsoft's website [here](https://support.microsoft.com/help/2977003/the-latest-supported-visual-c-downloads).\r
  * This does not change the minimum required version for building TensorFlow from source on Windows, but builds enabling `EIGEN_STRONG_INLINE` can take over 48 hours to compile without this flag. Refer to `configure.py` for more information about `EIGEN_STRONG_INLINE` and `/d2ReducedOptimizeHugeFunctions`.\r
  * If either of the required DLLs, `msvcp140.dll` (old) or `msvcp140_1.dll` (new), are missing on your machine, `import tensorflow` will print a warning message.\r
* The `tensorflow` pip package is built with CUDA 10.1 and cuDNN 7.6.\r
* `tf.keras`\r
  * Experimental support for mixed precision is available on GPUs and Cloud TPUs. See [usage guide](https://www.tensorflow.org/guide/keras/mixed_precision).\r
  * Introduced the `TextVectorization` layer, which takes as input raw strings and takes care of text standardization, tokenization, n-gram generation, and vocabulary indexing. See this [end-to-end text classification example](https://colab.research.google.com/drive/1RvCnR7h0_l4Ekn5vINWToI9TNJdpUZB3). \r
  * Keras `.compile` `.fit` `.evaluate` and `.predict` are allowed to be outside of the DistributionStrategy scope, as long as the model was constructed inside of a scope.\r
  * Experimental support for Keras `.compile`, `.fit`, `.evaluate`, and `.predict` is available for Cloud TPUs, Cloud TPU, for all types of Keras models (sequential, functional and subclassing models).\r
  * Automatic outside compilation is now enabled for Cloud TPUs. This allows `tf.summary` to be used more conveniently with Cloud TPUs.\r
  * Dynamic batch sizes with DistributionStrategy and Keras are supported on Cloud TPUs.\r
  * Support for `.fit`, `.evaluate`, `.predict` on TPU using numpy data, in addition to `tf.data.Dataset`.\r
  * Keras reference implementations for many popular models are available in the TensorFlow [Model Garden](https://github.com/tensorflow/models/tree/master/official).\r
* `tf.data`\r
  * Changes rebatching for `tf.data datasets` + DistributionStrategy for better performance. Note that the dataset also behaves slightly differently, in that the rebatched dataset cardinality will always be a multiple of the number of replicas.\r
  * `tf.data.Dataset` now supports automatic data distribution and sharding in distributed environments, including on TPU pods.\r
  * Distribution policies for `tf.data.Dataset` can now be tuned with 1. `tf.data.experimental.AutoShardPolicy(OFF, AUTO, FILE, DATA)` 2. `tf.data.experimental.ExternalStatePolicy(WARN, IGNORE, FAIL)`\r
* `tf.debugging`\r
  * Add `tf.debugging.enable_check_numerics()` and `tf.debugging.disable_check_numerics()` to help debugging the root causes of issues involving infinities and `NaN`s.\r
* `tf.distribute`\r
  * Custom training loop support on TPUs and TPU pods is avaiable through `strategy.experimental_distribute_dataset`, `strategy.experimental_distribute_datasets_from_function`, `strategy.experimental_run_v2`, `strategy.reduce`.\r
  * Support for a global distribution strategy through `tf.distribute.experimental_set_strategy(),` in addition to `strategy.scope()`.\r
* `TensorRT`\r
  * [TensorRT 6.0](https://developer.nvidia.com/tensorrt#tensorrt-whats-new) is now supported and enabled by default. This adds support for more TensorFlow ops including Conv3D, Conv3DBackpropInputV2, AvgPool3D, MaxPool3D, ResizeBilinear, and ResizeNearestNeighbor. In addition, the TensorFlow-TensorRT python conversion API is exported as `tf.experimental.tensorrt.Converter`.\r
* Environment variable `TF_DETERMINISTIC_OPS` has been added. When set to "true" or "1", this environment variable makes `tf.nn.bias_add` operate deterministically (i.e. reproducibly), but currently only when XLA JIT compilation is *not* enabled. Setting `TF_DETERMINISTIC_OPS` to "true" or "1" also makes cuDNN convolution and max-pooling operate deterministically. This makes Keras Conv\\*D and MaxPool\\*D layers operate deterministically in both the forward and backward directions when running on a CUDA-enabled GPU.\r
\r
## Breaking Changes\r
* Deletes `Operation.traceback_with_start_lines` for which we know of no usages.\r
* Removed `id` from `tf.Tensor.__repr__()` as `id` is not useful other than internal debugging.\r
* Some `tf.assert_*` methods now raise assertions at operation creation time if the input tensors' values are known at that time, not during the `session.run()`. This only changes behavior when the graph execution would have resulted in an error. When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r
* The following APIs are not longer experimental: `tf.config.list_logical_devices`, `tf.config.list_physical_devices`, `tf.config.get_visible_devices`, `tf.config.set_visible_devices`, `tf.config.get_logical_device_configuration`, `tf.config.set_logical_device_configuration`.\r
* `tf.config.experimentalVirtualDeviceConfiguration` has been renamed to `tf.config.LogicalDeviceConfiguration`.\r
* `tf.config.experimental_list_devices` has been removed, please use\r
`tf.config.list_logical_devices`.\r
\r
## Bug Fixes and Other Changes\r
* `tf.data`\r
  * Fixes concurrency issue with `tf.data.experimental.parallel_interleave` with `sloppy=True`.\r
  * Add `tf.data.experimental.dense_to_ragged_batch()`.\r
  * Extend `tf.data` parsing ops to support `RaggedTensors`.\r
* `tf.distribute`\r
  * Fix issue where GRU would crash or give incorrect output when a `tf.distribute.Strategy` was used. \r
* `tf.estimator`\r
  * Added option in `tf.estimator.CheckpointSaverHook` to not save the `GraphDef`.\r
  * Moving the checkpoint reader from swig to pybind11.\r
* `tf.keras`\r
  * Export `depthwise_conv2d` in `tf.keras.backend`.\r
  * In Keras Layers and Models, Variables in `trainable_weights`, `non_trainable_weights`, and `weights` are explicitly deduplicated.\r
  * Keras `model.load_weights` now accepts `skip_mismatch` as an argument. This was available in external Keras, and has now been copied over to `tf.keras`.\r
  * Fix the input shape caching behavior of Keras convolutional layers.\r
  * `Model.fit_generator`, `Model.evaluate_generator`, `Model.predict_generator`, `Model.train_on_batch`, `Model.test_on_batch`, and `Model.predict_on_batch` methods now respect the `run_eagerly` property, and will correctly run using `tf.function` by default. Note that `Model.fit_generator`, `Model.evaluate_generator`, and `Model.predict_generator` are deprecated endpoints. They are subsumed by `Model.fit`, `Model.evaluate`, and `Model.predict` which now support generators and Sequences.\r
* `tf.lite`\r
  * Legalization for `NMS` ops in TFLite.\r
  * add `narrow_range` and `axis` to `quantize_v2` and `dequantize` ops. \r
  * Added support for `FusedBatchNormV3` in converter.\r
  * Add an `errno`-like field to `NNAPI` delegate for detecting `NNAPI` errors for fallback behaviour.\r
  * Refactors `NNAPI` Delegate to support detailed reason why an operation is not accelerated.\r
  * Converts hardswish subgraphs into atomic ops.\r
* Other\r
  * Critical stability updates for TPUs, especially in cases where the XLA compiler produces compilation errors.\r
  * TPUs can now be re-initialized multiple times, using `tf.tpu.experimental.initialize_tpu_system`. \r
  * Add `RaggedTensor.merge_dims()`.\r
  * Added new `uniform_row_length` row-partitioning tensor to `RaggedTensor`.\r
  * Add `shape` arg to `RaggedTensor.to_tensor`; Improve speed of `RaggedTensor.to_tensor`.\r
  * `tf.io.parse_sequence_example` and `tf.io.parse_single_sequence_example` now support ragged features.\r
  * Fix `while_v2` with variables in custom gradient.\r
  * Support taking gradients of V2 `tf.cond` and `tf.while_loop` using `LookupTable`.\r
  * Fix bug where `vectorized_map` failed on inputs with unknown static shape.\r
  * Add preliminary support for sparse CSR matrices.\r
  * Tensor equality with `None` now behaves as expected.\r
  * Make calls to `tf.function(f)()`, `tf.function(f).get_concrete_function` and `tf.function(f).get_initialization_function` thread-safe.\r
  * Extend `tf.identity` to work with CompositeTensors (such as SparseTensor)\r
  * Added more `dtypes` and zero-sized inputs to `Einsum` Op and improved its performance\r
  * Enable multi-worker `NCCL` `all-reduce` inside functions executing eagerly.\r
  * Added complex128 support to `RFFT`, `RFFT2D`, `RFFT3D`, `IRFFT`, `IRFFT2D`, and `IRFFT3D`.\r
  * Add `pfor` converter for `SelfAdjointEigV2`.\r
  * Add `tf.math.ndtri` and `tf.math.erfinv`.\r
  * Add `tf.config.experimental.enable_mlir_bridge` to allow using MLIR compiler bridge in eager model.\r
  * Added support for MatrixSolve on Cloud TPU / XLA.\r
  * Added `tf.autodiff.ForwardAccumulator` for forward-mode autodiff\r
  * Add `LinearOperatorPermutation`.\r
  * A few performance optimizations on `tf.reduce_logsumexp`.\r
  * Added multilabel handling to `AUC` metric\r
  * Optimization on `zeros_like`.\r
  * Dimension constructor now requires `None` or types with an `__index__` method.\r
  * Add `tf.random.uniform` microbenchmark.\r
  * Use `_protogen` suffix for proto library targets instead of `_cc_protogen` suffix.\r
  * Moving the checkpoint reader from `swig` to `pybind11`.\r
  * `tf.device` & `MirroredStrategy` now supports passing in a `tf.config.LogicalDevice`\r
  * If you're building Tensorflow from source, consider using [bazelisk](https://github.com/bazelbuild/bazelisk) to automatically download and use the correct Bazel version. Bazelisk reads the `.bazelversion` file at the root of the project directory.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
8bitmp3, Aaron Ma, AbdüLhamit Yilmaz, Abhai Kollara, aflc, Ag Ramesh, Albert Z. Guo, Alex Torres, amoitra, Andrii Prymostka, angeliand, Anshuman Tripathy, Anthony Barbier, Anton Kachatkou, Anubh-V, Anuja Jakhade, Artem Ryabov, autoih, Bairen Yi, Bas Aarts, Basit Ayantunde, Ben Barsdell, Bhavani Subramanian, Brett Koonce, candy.dc, Captain-Pool, caster, cathy, Chong Yan, Choong Yin Thong, Clayne Robison, Colle, Dan Ganea, David Norman, David Refaeli, dengziming, Diego Caballero, Divyanshu, djshen, Douman, Duncan Riach, EFanZh, Elena Zhelezina, Eric Schweitz, Evgenii Zheltonozhskii, Fei Hu, fo40225, Fred Reiss, Frederic Bastien, Fredrik Knutsson, fsx950223, fwcore, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, giuros01, Gomathi Ramamurthy, Guozhong Zhuang, Haifeng Jin, Haoyu Wu, HarikrishnanBalagopal, HJYOO, Huang Chen-Yi, Ilham Firdausi Putra, Imran Salam, Jared Nielsen, Jason Zaman, Jasper Vicenti, Jeff Daily, Jeff Poznanovic, Jens Elofsson, Jerry Shih, jerryyin, Jesper Dramsch, jim.meyer, Jongwon Lee, Jun Wan, Junyuan Xie, Kaixi Hou, kamalkraj, Kan Chen, Karthik Muthuraman, Keiji Ariyama, Kevin Rose, Kevin Wang, Koan-Sin Tan, kstuedem, Kwabena W. Agyeman, Lakshay Tokas, latyas, Leslie-Fang-Intel, Li, Guizi, Luciano Resende, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manuel Freiberger, Mark Ryan, Martin Mlostek, Masaki Kozuki, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Muhwan Kim, Nagy Mostafa, nammbash, Nathan Luehr, Nathan Wells, Niranjan Hasabnis, Oleksii Volkovskyi, Olivier Moindrot, olramde, Ouyang Jin, OverLordGoldDragon, Pallavi G, Paul Andrey, Paul Wais, pkanwar23, Pooya Davoodi, Prabindh Sundareson, Rajeshwar Reddy T, Ralovich, Kristof, Refraction-Ray, Richard Barnes, richardbrks, Robert Herbig, Romeo Kienzler, Ryan Mccormick, saishruthi, Saket Khandelwal, Sami Kama, Sana Damani, Satoshi Tanaka, Sergey Mironov, Sergii Khomenko, Shahid, Shawn Presser, ShengYang1, Siddhartha Bagaria, Simon Plovyt, skeydan, srinivasan.narayanamoorthy, Stephen Mugisha, sunway513, Takeshi Watanabe, Taylor Jakobson, TengLu, TheMindVirus, ThisIsIsaac, Tim Gates, Timothy Liu, Tomer Gafner, Trent Lo, Trevor Hickey, Trevor Morris, vcarpani, Wei Wang, Wen-Heng (Jack) Chung, wenshuai, Wenshuai-Xiaomi, wenxizhu, william, William D. Irons, Xinan Jiang, Yannic, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Youwei Song, Zaccharie Ramzi, Zhang, Zhenyu Guo, 王振华 (Zhenhua Wang), 韩董, 이중건 Isaac Lee"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.1.0"^^xsd:anyURI ;
    sd:hasVersionId "v2.1.0"^^xsd:string ;
    sd:name "TensorFlow 2.1.0"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.1.0-rc0> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2019-11-26T23:28:10+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-11-27T18:19:59+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.1.0\r
\r
TensorFlow 2.1 will be the last TF release supporting Python 2. Python 2 support [officially ends an January 1, 2020](https://www.python.org/dev/peps/pep-0373/#update). [As announced earlier](https://groups.google.com/a/tensorflow.org/d/msg/announce/gVwS5RC8mds/dCt1ka2XAAAJ), TensorFlow will also stop supporting Python 2 starting January 1, 2020, and no more releases are expected in 2019.\r
\r
## Major Features and Improvements\r
* The `tensorflow` pip package now includes GPU support by default (same as `tensorflow-gpu`) for both Linux and Windows. This runs on machines with and without NVIDIA GPUs. `tensorflow-gpu` is still available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r
* `tf.keras`\r
  * `Model.fit_generator`, `Model.evaluate_generator`, `Model.predict_generator`, `Model.train_on_batch`, `Model.test_on_batch`, and `Model.predict_on_batch` methods now respect the `run_eagerly` property, and will correctly run using tf.function by default.\r
  * `Model.fit_generator`, `Model.evaluate_generator`, and `Model.predict_generator` are deprecated endpoints. They are subsumed by `Model.fit`, `Model.evaluate`, and `Model.predict` which now support generators and Sequences.\r
  * Keras `.compile` `.fit` `.evaluate` and `.predict` are allowed to be outside of the DistributionStrategy scope, as long as the model was constructed inside of a scope.\r
  * Keras `model.load_weights` now accepts `skip_mismatch` as an argument. This was available in external Keras, and has now been copied over to `tf.keras`.\r
  * Introduced the `TextVectorization` layer, which takes as input raw strings and takes care of text standardization, tokenization, n-gram generation, and vocabulary indexing. See this [end-to-end text classification example](https://colab.research.google.com/drive/1RvCnR7h0_l4Ekn5vINWToI9TNJdpUZB3). \r
  * Experimental support for Keras `.compile`, `.fit`, `.evaluate`, and `.predict` is available for Cloud TPU Pods.\r
  * Automatic outside compilation is now enabled for Cloud TPUs. This allows `tf.summary` to be used more conveniently with Cloud TPUs.\r
  * Dynamic batch sizes with DistributionStrategy and Keras are supported on Cloud TPUs.\r
  * Experimental support for mixed precision is available on GPUs and Cloud TPUs.\r
  * Keras reference implementations for many popular models are available in the TensorFlow [Model Garden](https://github.com/tensorflow/models/tree/master/official).\r
* `tf.data`\r
  * Changes rebatching for `tf.data datasets` + distribution strategies for better performance.   Note that the dataset also behaves slightly differently, in that the rebatched dataset cardinality will always be a multiple of the number of replicas.\r
* `TensorRT`\r
  * [TensorRT 6.0](https://developer.nvidia.com/tensorrt#tensorrt-whats-new) is now supported and enabled by default. This adds support for more TensorFlow ops including Conv3D, Conv3DBackpropInputV2, AvgPool3D, MaxPool3D, ResizeBilinear, and ResizeNearestNeighbor. In addition, the TensorFlow-TensorRT python conversion API is exported as `tf.experimental.tensorrt.Converter`.\r
\r
## Known issues\r
Because of [issues with building on windows](https://github.com/tensorflow/tensorflow/issues/10521), we turned off eigen strong inlining for the Windows builds. Windows binaries are expected to be slightly slower until the build issues are resolved. \r
\r
## Breaking Changes\r
* Deletes `Operation.traceback_with_start_lines` for which we know of no usages.\r
* Removed `id` from `tf.Tensor.__repr__()` as `id` is not useful other than internal debugging.\r
* Some `tf.assert_*` methods now raise assertions at operation creation time if the input tensors' values are known at that time, not during the `session.run()`. This only changes behavior when the graph execution would have resulted in an error. When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r
* The following APIs are not longer experimental: `tf.config.list_logical_devices`, `tf.config.list_physical_devices`, `tf.config.get_visible_devices`, `tf.config.set_visible_devices`, `tf.config.get_logical_device_configuration`, `tf.config.set_logical_device_configuration`.\r
* `tf.config.experimentalVirtualDeviceConfiguration` has been renamed to `tf.config.LogicalDeviceConfiguration`.\r
* `tf.config.experimental_list_devices` has been removed, please use\r
`tf.config.list_logical_devices`.\r
\r
## Bug Fixes and Other Changes\r
* `tf.data`\r
  * Fixes concurrency issue with `tf.data.experimental.parallel_interleave` with sloppy=True.\r
  * Add `tf.data.experimental.dense_to_ragged_batch()`.\r
  * Extend `tf.data` parsing ops to support `RaggedTensors`.\r
* `tf.distribute`\r
  * Fix issue where GRU would crash or give incorrect output when a `tf.distribute.Strategy` was used. \r
* `tf.estimator`\r
  * Added option in `tf.estimator.CheckpointSaverHook` to not save the `GraphDef`.\r
* `tf.keras`\r
  * Export depthwise_conv2d in `tf.keras.backend`.\r
  * In Keras Layers and Models, Variables in `trainable_weights`, `non_trainable_weights`, and `weights` are explicitly deduplicated.\r
  * Fix the incorrect stateful behavior of Keras convolutional layers.\r
* `tf.lite`\r
  * Legalization for `NMS` ops in TFLite.\r
  * add `narrow_range` and `axis` to `quantize_v2` and `dequantize` ops. \r
  * Added support for `FusedBatchNormV3` in converter.\r
  * Add an `errno`-like field to `NNAPI` delegate for detecting `NNAPI` errors for fallback behaviour.\r
  * Refactors `NNAPI` Delegate to support detailed reason why an operation is not accelerated.\r
  * Converts hardswish subgraphs into atomic ops.\r
* Other\r
  * Add `RaggedTensor.merge_dims()`.\r
  * Added new `uniform_row_length` row-partitioning tensor to `RaggedTensor`.\r
  * Add `shape` arg to `RaggedTensor.to_tensor`; Improve speed of `RaggedTensor.to_tensor`.\r
  * `tf.io.parse_sequence_example` and `tf.io.parse_single_sequence_example` now support ragged features.\r
  * Fix `while_v2` with variables in custom gradient.\r
  * Support taking gradients of V2 `tf.cond` and `tf.while_loop` using `LookupTable`.\r
  * Fix bug where `vectorized_map` failed on inputs with unknown static shape.\r
  * Add preliminary support for sparse CSR matrices.\r
  * Tensor equality with `None` now behaves as expected.\r
  * Make calls to `tf.function(f)()`, `tf.function(f).get_concrete_function` and `tf.function(f).get_initialization_function` thread-safe.\r
  * Add `tf.debugging.enable_check_numerics()` and `tf.debugging.disable_check_numerics()` to facilitate debugging of numeric instability (`Infinity`s and `NaN`s) under eager mode and `tf.function`s.\r
  * Extend `tf.identity` to work with CompositeTensors (such as SparseTensor)\r
  * Added more `dtypes` and zero-sized inputs to `Einsum` Op and improved its performance\r
  * Enable multi-worker `NCCL` `all-reduce` inside functions executing eagerly.\r
  * Added complex128 support to `RFFT`, `RFFT2D`, `RFFT3D`, `IRFFT`, `IRFFT2D`, and `IRFFT3D`.\r
  * Add `pfor` converter for `SelfAdjointEigV2`.\r
  * Add `tf.math.ndtri` and `tf.math.erfinv`.\r
  * Add `tf.config.experimental.enable_mlir_bridge` to allow using MLIR compiler bridge in eager model.\r
  * Added support for MatrixSolve on Cloud TPU / XLA.\r
  * Added `tf.autodiff.ForwardAccumulator` for forward-mode autodiff\r
  * Add `LinearOperatorPermutation`.\r
  * A few performance optimizations on `tf.reduce_logsumexp`.\r
  * Added multilabel handling to `AUC` metric\r
  * Optimization on `zeros_like`.\r
  * Dimension constructor now requires `None` or types with an `__index__` method.\r
  * Add `tf.random.uniform` microbenchmark.\r
  * Use `_protogen` suffix for proto library targets instead of `_cc_protogen` suffix.\r
  * Moving the checkpoint reader from `swig` to `pybind11`.\r
  * `tf.device` & `MirroredStrategy` now supports passing in a `tf.config.LogicalDevice`\r
  * If you're building Tensorflow from source, consider using [bazelisk](https://github.com/bazelisk/bazel) to automatically download and use the correct Bazel version. Bazelisk reads the `.bazelversion` file at the root of the project directory.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
8bitmp3, Aaron Ma, AbdüLhamit Yilmaz, Abhai Kollara, aflc, Ag Ramesh, Albert Z. Guo, Alex Torres, amoitra, Andrii Prymostka, angeliand, Anshuman Tripathy, Anthony Barbier, Anton Kachatkou, Anubh-V, Anuja Jakhade, Artem Ryabov, autoih, Bairen Yi, Bas Aarts, Basit Ayantunde, Ben Barsdell, Bhavani Subramanian, Brett Koonce, candy.dc, Captain-Pool, caster, cathy, Chong Yan, Choong Yin Thong, Clayne Robison, Colle, Dan Ganea, David Norman, David Refaeli, dengziming, Diego Caballero, Divyanshu, djshen, Douman, Duncan Riach, EFanZh, Elena Zhelezina, Eric Schweitz, Evgenii Zheltonozhskii, Fei Hu, fo40225, Fred Reiss, Frederic Bastien, Fredrik Knutsson, fsx950223, fwcore, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, giuros01, Gomathi Ramamurthy, Guozhong Zhuang, Haifeng Jin, Haoyu Wu, HarikrishnanBalagopal, HJYOO, Huang Chen-Yi, Ilham Firdausi Putra, Imran Salam, Jared Nielsen, Jason Zaman, Jasper Vicenti, Jeff Daily, Jeff Poznanovic, Jens Elofsson, Jerry Shih, jerryyin, Jesper Dramsch, jim.meyer, Jongwon Lee, Jun Wan, Junyuan Xie, Kaixi Hou, kamalkraj, Kan Chen, Karthik Muthuraman, Keiji Ariyama, Kevin Rose, Kevin Wang, Koan-Sin Tan, kstuedem, Kwabena W. Agyeman, Lakshay Tokas, latyas, Leslie-Fang-Intel, Li, Guizi, Luciano Resende, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manuel Freiberger, Mark Ryan, Martin Mlostek, Masaki Kozuki, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Muhwan Kim, Nagy Mostafa, nammbash, Nathan Luehr, Nathan Wells, Niranjan Hasabnis, Oleksii Volkovskyi, Olivier Moindrot, olramde, Ouyang Jin, OverLordGoldDragon, Pallavi G, Paul Andrey, Paul Wais, pkanwar23, Pooya Davoodi, Prabindh Sundareson, Rajeshwar Reddy T, Ralovich, Kristof, Refraction-Ray, Richard Barnes, richardbrks, Robert Herbig, Romeo Kienzler, Ryan Mccormick, saishruthi, Saket Khandelwal, Sami Kama, Sana Damani, Satoshi Tanaka, Sergey Mironov, Sergii Khomenko, Shahid, Shawn Presser, ShengYang1, Siddhartha Bagaria, Simon Plovyt, skeydan, srinivasan.narayanamoorthy, Stephen Mugisha, sunway513, Takeshi Watanabe, Taylor Jakobson, TengLu, TheMindVirus, ThisIsIsaac, Tim Gates, Timothy Liu, Tomer Gafner, Trent Lo, Trevor Hickey, Trevor Morris, vcarpani, Wei Wang, Wen-Heng (Jack) Chung, wenshuai, Wenshuai-Xiaomi, wenxizhu, william, William D. Irons, Xinan Jiang, Yannic, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Youwei Song, Zaccharie Ramzi, Zhang, Zhenyu Guo, 王振华 (Zhenhua Wang), 韩董, 이중건 Isaac Lee"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.1.0-rc0"^^xsd:anyURI ;
    sd:hasVersionId "v2.1.0-rc0"^^xsd:string ;
    sd:name "TensorFlow 2.1.0-rc0"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.1.0-rc1> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2019-12-10T22:17:34+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-12-11T05:39:02+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.1.0-rc1\r
\r
TensorFlow 2.1 will be the last TF release supporting Python 2. Python 2 support [officially ends an January 1, 2020](https://www.python.org/dev/peps/pep-0373/#update). [As announced earlier](https://groups.google.com/a/tensorflow.org/d/msg/announce/gVwS5RC8mds/dCt1ka2XAAAJ), TensorFlow will also stop supporting Python 2 starting January 1, 2020, and no more releases are expected in 2019.\r
\r
## Major Features and Improvements\r
* The `tensorflow` pip package now includes GPU support by default (same as `tensorflow-gpu`) for both Linux and Windows. This runs on machines with and without NVIDIA GPUs. `tensorflow-gpu` is still available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r
* The `tensorflow` pip package is built with CUDA 10.1 and cuDNN 7.6.\r
* `tf.keras`\r
  * `Model.fit_generator`, `Model.evaluate_generator`, `Model.predict_generator`, `Model.train_on_batch`, `Model.test_on_batch`, and `Model.predict_on_batch` methods now respect the `run_eagerly` property, and will correctly run using tf.function by default.\r
  * `Model.fit_generator`, `Model.evaluate_generator`, and `Model.predict_generator` are deprecated endpoints. They are subsumed by `Model.fit`, `Model.evaluate`, and `Model.predict` which now support generators and Sequences.\r
  * Keras `.compile` `.fit` `.evaluate` and `.predict` are allowed to be outside of the DistributionStrategy scope, as long as the model was constructed inside of a scope.\r
  * Keras `model.load_weights` now accepts `skip_mismatch` as an argument. This was available in external Keras, and has now been copied over to `tf.keras`.\r
  * Introduced the `TextVectorization` layer, which takes as input raw strings and takes care of text standardization, tokenization, n-gram generation, and vocabulary indexing. See this [end-to-end text classification example](https://colab.research.google.com/drive/1RvCnR7h0_l4Ekn5vINWToI9TNJdpUZB3). \r
  * Experimental support for Keras `.compile`, `.fit`, `.evaluate`, and `.predict` is available for Cloud TPU Pods.\r
  * Automatic outside compilation is now enabled for Cloud TPUs. This allows `tf.summary` to be used more conveniently with Cloud TPUs.\r
  * Dynamic batch sizes with DistributionStrategy and Keras are supported on Cloud TPUs.\r
  * Experimental support for mixed precision is available on GPUs and Cloud TPUs.\r
  * Keras reference implementations for many popular models are available in the TensorFlow [Model Garden](https://github.com/tensorflow/models/tree/master/official).\r
* `tf.data`\r
  * Changes rebatching for `tf.data datasets` + distribution strategies for better performance.   Note that the dataset also behaves slightly differently, in that the rebatched dataset cardinality will always be a multiple of the number of replicas.\r
* `TensorRT`\r
  * [TensorRT 6.0](https://developer.nvidia.com/tensorrt#tensorrt-whats-new) is now supported and enabled by default. This adds support for more TensorFlow ops including Conv3D, Conv3DBackpropInputV2, AvgPool3D, MaxPool3D, ResizeBilinear, and ResizeNearestNeighbor. In addition, the TensorFlow-TensorRT python conversion API is exported as `tf.experimental.tensorrt.Converter`.\r
* Environment variable `TF_DETERMINISTIC_OPS` has been added. When set to "true" or "1", this environment variable makes `tf.nn.bias_add` operate deterministically (i.e. reproducibly), but currently only when XLA JIT compilation is *not* enabled. Setting `TF_DETERMINISTIC_OPS` to "true" or "1" also makes cuDNN convolution and max-pooling operate deterministically. This makes Keras Conv\\*D and MaxPool\\*D layers operate deterministically in both the forward and backward directions when running on a CUDA-enabled GPU.\r
\r
## Breaking Changes\r
* Deletes `Operation.traceback_with_start_lines` for which we know of no usages.\r
* Removed `id` from `tf.Tensor.__repr__()` as `id` is not useful other than internal debugging.\r
* Some `tf.assert_*` methods now raise assertions at operation creation time if the input tensors' values are known at that time, not during the `session.run()`. This only changes behavior when the graph execution would have resulted in an error. When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r
* The following APIs are no longer experimental: `tf.config.list_logical_devices`, `tf.config.list_physical_devices`, `tf.config.get_visible_devices`, `tf.config.set_visible_devices`, `tf.config.get_logical_device_configuration`, `tf.config.set_logical_device_configuration`.\r
* `tf.config.experimentalVirtualDeviceConfiguration` has been renamed to `tf.config.LogicalDeviceConfiguration`.\r
* `tf.config.experimental_list_devices` has been removed, please use\r
`tf.config.list_logical_devices`.\r
\r
## Bug Fixes and Other Changes\r
* `tf.data`\r
  * Fixes concurrency issue with `tf.data.experimental.parallel_interleave` with sloppy=True.\r
  * Add `tf.data.experimental.dense_to_ragged_batch()`.\r
  * Extend `tf.data` parsing ops to support `RaggedTensors`.\r
* `tf.distribute`\r
  * Fix issue where GRU would crash or give incorrect output when a `tf.distribute.Strategy` was used. \r
* `tf.estimator`\r
  * Added option in `tf.estimator.CheckpointSaverHook` to not save the `GraphDef`.\r
  * Moving the checkpoint reader from swig to pybind11.\r
* `tf.keras`\r
  * Export depthwise_conv2d in `tf.keras.backend`.\r
  * In Keras Layers and Models, Variables in `trainable_weights`, `non_trainable_weights`, and `weights` are explicitly deduplicated.\r
  * Fix the incorrect stateful behavior of Keras convolutional layers.\r
* `tf.lite`\r
  * Legalization for `NMS` ops in TFLite.\r
  * add `narrow_range` and `axis` to `quantize_v2` and `dequantize` ops. \r
  * Added support for `FusedBatchNormV3` in converter.\r
  * Add an `errno`-like field to `NNAPI` delegate for detecting `NNAPI` errors for fallback behaviour.\r
  * Refactors `NNAPI` Delegate to support detailed reason why an operation is not accelerated.\r
  * Converts hardswish subgraphs into atomic ops.\r
* Other\r
  * Add `RaggedTensor.merge_dims()`.\r
  * Added new `uniform_row_length` row-partitioning tensor to `RaggedTensor`.\r
  * Add `shape` arg to `RaggedTensor.to_tensor`; Improve speed of `RaggedTensor.to_tensor`.\r
  * `tf.io.parse_sequence_example` and `tf.io.parse_single_sequence_example` now support ragged features.\r
  * Fix `while_v2` with variables in custom gradient.\r
  * Support taking gradients of V2 `tf.cond` and `tf.while_loop` using `LookupTable`.\r
  * Fix bug where `vectorized_map` failed on inputs with unknown static shape.\r
  * Add preliminary support for sparse CSR matrices.\r
  * Tensor equality with `None` now behaves as expected.\r
  * Make calls to `tf.function(f)()`, `tf.function(f).get_concrete_function` and `tf.function(f).get_initialization_function` thread-safe.\r
  * Add `tf.debugging.enable_check_numerics()` and `tf.debugging.disable_check_numerics()` to facilitate debugging of numeric instability (`Infinity`s and `NaN`s) under eager mode and `tf.function`s.\r
  * Extend `tf.identity` to work with CompositeTensors (such as SparseTensor)\r
  * Added more `dtypes` and zero-sized inputs to `Einsum` Op and improved its performance\r
  * Enable multi-worker `NCCL` `all-reduce` inside functions executing eagerly.\r
  * Added complex128 support to `RFFT`, `RFFT2D`, `RFFT3D`, `IRFFT`, `IRFFT2D`, and `IRFFT3D`.\r
  * Add `pfor` converter for `SelfAdjointEigV2`.\r
  * Add `tf.math.ndtri` and `tf.math.erfinv`.\r
  * Add `tf.config.experimental.enable_mlir_bridge` to allow using MLIR compiler bridge in eager model.\r
  * Added support for MatrixSolve on Cloud TPU / XLA.\r
  * Added `tf.autodiff.ForwardAccumulator` for forward-mode autodiff\r
  * Add `LinearOperatorPermutation`.\r
  * A few performance optimizations on `tf.reduce_logsumexp`.\r
  * Added multilabel handling to `AUC` metric\r
  * Optimization on `zeros_like`.\r
  * Dimension constructor now requires `None` or types with an `__index__` method.\r
  * Add `tf.random.uniform` microbenchmark.\r
  * Use `_protogen` suffix for proto library targets instead of `_cc_protogen` suffix.\r
  * Moving the checkpoint reader from `swig` to `pybind11`.\r
  * `tf.device` & `MirroredStrategy` now supports passing in a `tf.config.LogicalDevice`\r
  * If you're building Tensorflow from source, consider using [bazelisk](https://github.com/bazelisk/bazel) to automatically download and use the correct Bazel version. Bazelisk reads the `.bazelversion` file at the root of the project directory.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
8bitmp3, Aaron Ma, AbdüLhamit Yilmaz, Abhai Kollara, aflc, Ag Ramesh, Albert Z. Guo, Alex Torres, amoitra, Andrii Prymostka, angeliand, Anshuman Tripathy, Anthony Barbier, Anton Kachatkou, Anubh-V, Anuja Jakhade, Artem Ryabov, autoih, Bairen Yi, Bas Aarts, Basit Ayantunde, Ben Barsdell, Bhavani Subramanian, Brett Koonce, candy.dc, Captain-Pool, caster, cathy, Chong Yan, Choong Yin Thong, Clayne Robison, Colle, Dan Ganea, David Norman, David Refaeli, dengziming, Diego Caballero, Divyanshu, djshen, Douman, Duncan Riach, EFanZh, Elena Zhelezina, Eric Schweitz, Evgenii Zheltonozhskii, Fei Hu, fo40225, Fred Reiss, Frederic Bastien, Fredrik Knutsson, fsx950223, fwcore, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, giuros01, Gomathi Ramamurthy, Guozhong Zhuang, Haifeng Jin, Haoyu Wu, HarikrishnanBalagopal, HJYOO, Huang Chen-Yi, Ilham Firdausi Putra, Imran Salam, Jared Nielsen, Jason Zaman, Jasper Vicenti, Jeff Daily, Jeff Poznanovic, Jens Elofsson, Jerry Shih, jerryyin, Jesper Dramsch, jim.meyer, Jongwon Lee, Jun Wan, Junyuan Xie, Kaixi Hou, kamalkraj, Kan Chen, Karthik Muthuraman, Keiji Ariyama, Kevin Rose, Kevin Wang, Koan-Sin Tan, kstuedem, Kwabena W. Agyeman, Lakshay Tokas, latyas, Leslie-Fang-Intel, Li, Guizi, Luciano Resende, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manuel Freiberger, Mark Ryan, Martin Mlostek, Masaki Kozuki, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Muhwan Kim, Nagy Mostafa, nammbash, Nathan Luehr, Nathan Wells, Niranjan Hasabnis, Oleksii Volkovskyi, Olivier Moindrot, olramde, Ouyang Jin, OverLordGoldDragon, Pallavi G, Paul Andrey, Paul Wais, pkanwar23, Pooya Davoodi, Prabindh Sundareson, Rajeshwar Reddy T, Ralovich, Kristof, Refraction-Ray, Richard Barnes, richardbrks, Robert Herbig, Romeo Kienzler, Ryan Mccormick, saishruthi, Saket Khandelwal, Sami Kama, Sana Damani, Satoshi Tanaka, Sergey Mironov, Sergii Khomenko, Shahid, Shawn Presser, ShengYang1, Siddhartha Bagaria, Simon Plovyt, skeydan, srinivasan.narayanamoorthy, Stephen Mugisha, sunway513, Takeshi Watanabe, Taylor Jakobson, TengLu, TheMindVirus, ThisIsIsaac, Tim Gates, Timothy Liu, Tomer Gafner, Trent Lo, Trevor Hickey, Trevor Morris, vcarpani, Wei Wang, Wen-Heng (Jack) Chung, wenshuai, Wenshuai-Xiaomi, wenxizhu, william, William D. Irons, Xinan Jiang, Yannic, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Youwei Song, Zaccharie Ramzi, Zhang, Zhenyu Guo, 王振华 (Zhenhua Wang), 韩董, 이중건 Isaac Lee"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.1.0-rc1"^^xsd:anyURI ;
    sd:hasVersionId "v2.1.0-rc1"^^xsd:string ;
    sd:name "TensorFlow 2.1.0-rc1"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.1.0-rc2> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2019-12-21T02:27:18+00:00"^^xsd:dateTime ;
    sd:datePublished "2019-12-23T20:42:30+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.1.0\r
\r
TensorFlow 2.1 will be the last TF release supporting Python 2. Python 2 support [officially ends an January 1, 2020](https://www.python.org/dev/peps/pep-0373/#update). [As announced earlier](https://groups.google.com/a/tensorflow.org/d/msg/announce/gVwS5RC8mds/dCt1ka2XAAAJ), TensorFlow will also stop supporting Python 2 starting January 1, 2020, and no more releases are expected in 2019.\r
\r
## Major Features and Improvements\r
* The `tensorflow` pip package now includes GPU support by default (same as `tensorflow-gpu`) for both Linux and Windows. This runs on machines with and without NVIDIA GPUs. `tensorflow-gpu` is still available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r
* **Windows users:** Officially-released `tensorflow` Pip packages are now built with Visual Studio 2019 version 16.4 in order to take advantage of the new `/d2ReducedOptimizeHugeFunctions` compiler flag. To use these new packages, you must install "Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017 and 2019", available from Microsoft's website [here](https://support.microsoft.com/help/2977003/the-latest-supported-visual-c-downloads).\r
  * This does not change the minimum required version for building TensorFlow from source on Windows, but builds enabling `EIGEN_STRONG_INLINE` can take over 48 hours to compile without this flag. Refer to `configure.py` for more information about `EIGEN_STRONG_INLINE` and `/d2ReducedOptimizeHugeFunctions`.\r
  * If either of the required DLLs, `msvcp140.dll` (old) or `msvcp140_1.dll` (new), are missing on your machine, `import tensorflow` will print a warning message.\r
* The `tensorflow` pip package is built with CUDA 10.1 and cuDNN 7.6.\r
* `tf.keras`\r
  * Experimental support for mixed precision is available on GPUs and Cloud TPUs. See [usage guide](https://www.tensorflow.org/guide/keras/mixed_precision).\r
  * Introduced the `TextVectorization` layer, which takes as input raw strings and takes care of text standardization, tokenization, n-gram generation, and vocabulary indexing. See this [end-to-end text classification example](https://colab.research.google.com/drive/1RvCnR7h0_l4Ekn5vINWToI9TNJdpUZB3). \r
  * Keras `.compile` `.fit` `.evaluate` and `.predict` are allowed to be outside of the DistributionStrategy scope, as long as the model was constructed inside of a scope.\r
  * Experimental support for Keras `.compile`, `.fit`, `.evaluate`, and `.predict` is available for Cloud TPUs, Cloud TPU, for all types of Keras models (sequential, functional and subclassing models).\r
  * Automatic outside compilation is now enabled for Cloud TPUs. This allows `tf.summary` to be used more conveniently with Cloud TPUs.\r
  * Dynamic batch sizes with DistributionStrategy and Keras are supported on Cloud TPUs.\r
  * Support for `.fit`, `.evaluate`, `.predict` on TPU using numpy data, in addition to `tf.data.Dataset`.\r
  * Keras reference implementations for many popular models are available in the TensorFlow [Model Garden](https://github.com/tensorflow/models/tree/master/official).\r
* `tf.data`\r
  * Changes rebatching for `tf.data datasets` + DistributionStrategy for better performance. Note that the dataset also behaves slightly differently, in that the rebatched dataset cardinality will always be a multiple of the number of replicas.\r
  * `tf.data.Dataset` now supports automatic data distribution and sharding in distributed environments, including on TPU pods.\r
  * Distribution policies for `tf.data.Dataset` can now be tuned with 1. `tf.data.experimental.AutoShardPolicy(OFF, AUTO, FILE, DATA)` 2. `tf.data.experimental.ExternalStatePolicy(WARN, IGNORE, FAIL)`\r
* `tf.debugging`\r
  * Add `tf.debugging.enable_check_numerics()` and `tf.debugging.disable_check_numerics()` to help debugging the root causes of issues involving infinities and `NaN`s.\r
* `tf.distribute`\r
  * Custom training loop support on TPUs and TPU pods is avaiable through `strategy.experimental_distribute_dataset`, `strategy.experimental_distribute_datasets_from_function`, `strategy.experimental_run_v2`, `strategy.reduce`.\r
  * Support for a global distribution strategy through `tf.distribute.experimental_set_strategy(),` in addition to `strategy.scope()`.\r
* `TensorRT`\r
  * [TensorRT 6.0](https://developer.nvidia.com/tensorrt#tensorrt-whats-new) is now supported and enabled by default. This adds support for more TensorFlow ops including Conv3D, Conv3DBackpropInputV2, AvgPool3D, MaxPool3D, ResizeBilinear, and ResizeNearestNeighbor. In addition, the TensorFlow-TensorRT python conversion API is exported as `tf.experimental.tensorrt.Converter`.\r
* Environment variable `TF_DETERMINISTIC_OPS` has been added. When set to "true" or "1", this environment variable makes `tf.nn.bias_add` operate deterministically (i.e. reproducibly), but currently only when XLA JIT compilation is *not* enabled. Setting `TF_DETERMINISTIC_OPS` to "true" or "1" also makes cuDNN convolution and max-pooling operate deterministically. This makes Keras Conv\\*D and MaxPool\\*D layers operate deterministically in both the forward and backward directions when running on a CUDA-enabled GPU.\r
\r
## Breaking Changes\r
* Deletes `Operation.traceback_with_start_lines` for which we know of no usages.\r
* Removed `id` from `tf.Tensor.__repr__()` as `id` is not useful other than internal debugging.\r
* Some `tf.assert_*` methods now raise assertions at operation creation time if the input tensors' values are known at that time, not during the `session.run()`. This only changes behavior when the graph execution would have resulted in an error. When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r
* The following APIs are not longer experimental: `tf.config.list_logical_devices`, `tf.config.list_physical_devices`, `tf.config.get_visible_devices`, `tf.config.set_visible_devices`, `tf.config.get_logical_device_configuration`, `tf.config.set_logical_device_configuration`.\r
* `tf.config.experimentalVirtualDeviceConfiguration` has been renamed to `tf.config.LogicalDeviceConfiguration`.\r
* `tf.config.experimental_list_devices` has been removed, please use\r
`tf.config.list_logical_devices`.\r
\r
## Bug Fixes and Other Changes\r
* `tf.data`\r
  * Fixes concurrency issue with `tf.data.experimental.parallel_interleave` with `sloppy=True`.\r
  * Add `tf.data.experimental.dense_to_ragged_batch()`.\r
  * Extend `tf.data` parsing ops to support `RaggedTensors`.\r
* `tf.distribute`\r
  * Fix issue where GRU would crash or give incorrect output when a `tf.distribute.Strategy` was used. \r
* `tf.estimator`\r
  * Added option in `tf.estimator.CheckpointSaverHook` to not save the `GraphDef`.\r
  * Moving the checkpoint reader from swig to pybind11.\r
* `tf.keras`\r
  * Export `depthwise_conv2d` in `tf.keras.backend`.\r
  * In Keras Layers and Models, Variables in `trainable_weights`, `non_trainable_weights`, and `weights` are explicitly deduplicated.\r
  * Keras `model.load_weights` now accepts `skip_mismatch` as an argument. This was available in external Keras, and has now been copied over to `tf.keras`.\r
  * Fix the input shape caching behavior of Keras convolutional layers.\r
  * `Model.fit_generator`, `Model.evaluate_generator`, `Model.predict_generator`, `Model.train_on_batch`, `Model.test_on_batch`, and `Model.predict_on_batch` methods now respect the `run_eagerly` property, and will correctly run using `tf.function` by default. Note that `Model.fit_generator`, `Model.evaluate_generator`, and `Model.predict_generator` are deprecated endpoints. They are subsumed by `Model.fit`, `Model.evaluate`, and `Model.predict` which now support generators and Sequences.\r
* `tf.lite`\r
  * Legalization for `NMS` ops in TFLite.\r
  * add `narrow_range` and `axis` to `quantize_v2` and `dequantize` ops. \r
  * Added support for `FusedBatchNormV3` in converter.\r
  * Add an `errno`-like field to `NNAPI` delegate for detecting `NNAPI` errors for fallback behaviour.\r
  * Refactors `NNAPI` Delegate to support detailed reason why an operation is not accelerated.\r
  * Converts hardswish subgraphs into atomic ops.\r
* Other\r
  * Critical stability updates for TPUs, especially in cases where the XLA compiler produces compilation errors.\r
  * TPUs can now be re-initialized multiple times, using `tf.tpu.experimental.initialize_tpu_system`. \r
  * Add `RaggedTensor.merge_dims()`.\r
  * Added new `uniform_row_length` row-partitioning tensor to `RaggedTensor`.\r
  * Add `shape` arg to `RaggedTensor.to_tensor`; Improve speed of `RaggedTensor.to_tensor`.\r
  * `tf.io.parse_sequence_example` and `tf.io.parse_single_sequence_example` now support ragged features.\r
  * Fix `while_v2` with variables in custom gradient.\r
  * Support taking gradients of V2 `tf.cond` and `tf.while_loop` using `LookupTable`.\r
  * Fix bug where `vectorized_map` failed on inputs with unknown static shape.\r
  * Add preliminary support for sparse CSR matrices.\r
  * Tensor equality with `None` now behaves as expected.\r
  * Make calls to `tf.function(f)()`, `tf.function(f).get_concrete_function` and `tf.function(f).get_initialization_function` thread-safe.\r
  * Extend `tf.identity` to work with CompositeTensors (such as SparseTensor)\r
  * Added more `dtypes` and zero-sized inputs to `Einsum` Op and improved its performance\r
  * Enable multi-worker `NCCL` `all-reduce` inside functions executing eagerly.\r
  * Added complex128 support to `RFFT`, `RFFT2D`, `RFFT3D`, `IRFFT`, `IRFFT2D`, and `IRFFT3D`.\r
  * Add `pfor` converter for `SelfAdjointEigV2`.\r
  * Add `tf.math.ndtri` and `tf.math.erfinv`.\r
  * Add `tf.config.experimental.enable_mlir_bridge` to allow using MLIR compiler bridge in eager model.\r
  * Added support for MatrixSolve on Cloud TPU / XLA.\r
  * Added `tf.autodiff.ForwardAccumulator` for forward-mode autodiff\r
  * Add `LinearOperatorPermutation`.\r
  * A few performance optimizations on `tf.reduce_logsumexp`.\r
  * Added multilabel handling to `AUC` metric\r
  * Optimization on `zeros_like`.\r
  * Dimension constructor now requires `None` or types with an `__index__` method.\r
  * Add `tf.random.uniform` microbenchmark.\r
  * Use `_protogen` suffix for proto library targets instead of `_cc_protogen` suffix.\r
  * Moving the checkpoint reader from `swig` to `pybind11`.\r
  * `tf.device` & `MirroredStrategy` now supports passing in a `tf.config.LogicalDevice`\r
  * If you're building Tensorflow from source, consider using [bazelisk](https://github.com/bazelbuild/bazelisk) to automatically download and use the correct Bazel version. Bazelisk reads the `.bazelversion` file at the root of the project directory.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
8bitmp3, Aaron Ma, AbdüLhamit Yilmaz, Abhai Kollara, aflc, Ag Ramesh, Albert Z. Guo, Alex Torres, amoitra, Andrii Prymostka, angeliand, Anshuman Tripathy, Anthony Barbier, Anton Kachatkou, Anubh-V, Anuja Jakhade, Artem Ryabov, autoih, Bairen Yi, Bas Aarts, Basit Ayantunde, Ben Barsdell, Bhavani Subramanian, Brett Koonce, candy.dc, Captain-Pool, caster, cathy, Chong Yan, Choong Yin Thong, Clayne Robison, Colle, Dan Ganea, David Norman, David Refaeli, dengziming, Diego Caballero, Divyanshu, djshen, Douman, Duncan Riach, EFanZh, Elena Zhelezina, Eric Schweitz, Evgenii Zheltonozhskii, Fei Hu, fo40225, Fred Reiss, Frederic Bastien, Fredrik Knutsson, fsx950223, fwcore, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, giuros01, Gomathi Ramamurthy, Guozhong Zhuang, Haifeng Jin, Haoyu Wu, HarikrishnanBalagopal, HJYOO, Huang Chen-Yi, Ilham Firdausi Putra, Imran Salam, Jared Nielsen, Jason Zaman, Jasper Vicenti, Jeff Daily, Jeff Poznanovic, Jens Elofsson, Jerry Shih, jerryyin, Jesper Dramsch, jim.meyer, Jongwon Lee, Jun Wan, Junyuan Xie, Kaixi Hou, kamalkraj, Kan Chen, Karthik Muthuraman, Keiji Ariyama, Kevin Rose, Kevin Wang, Koan-Sin Tan, kstuedem, Kwabena W. Agyeman, Lakshay Tokas, latyas, Leslie-Fang-Intel, Li, Guizi, Luciano Resende, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manuel Freiberger, Mark Ryan, Martin Mlostek, Masaki Kozuki, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Muhwan Kim, Nagy Mostafa, nammbash, Nathan Luehr, Nathan Wells, Niranjan Hasabnis, Oleksii Volkovskyi, Olivier Moindrot, olramde, Ouyang Jin, OverLordGoldDragon, Pallavi G, Paul Andrey, Paul Wais, pkanwar23, Pooya Davoodi, Prabindh Sundareson, Rajeshwar Reddy T, Ralovich, Kristof, Refraction-Ray, Richard Barnes, richardbrks, Robert Herbig, Romeo Kienzler, Ryan Mccormick, saishruthi, Saket Khandelwal, Sami Kama, Sana Damani, Satoshi Tanaka, Sergey Mironov, Sergii Khomenko, Shahid, Shawn Presser, ShengYang1, Siddhartha Bagaria, Simon Plovyt, skeydan, srinivasan.narayanamoorthy, Stephen Mugisha, sunway513, Takeshi Watanabe, Taylor Jakobson, TengLu, TheMindVirus, ThisIsIsaac, Tim Gates, Timothy Liu, Tomer Gafner, Trent Lo, Trevor Hickey, Trevor Morris, vcarpani, Wei Wang, Wen-Heng (Jack) Chung, wenshuai, Wenshuai-Xiaomi, wenxizhu, william, William D. Irons, Xinan Jiang, Yannic, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Youwei Song, Zaccharie Ramzi, Zhang, Zhenyu Guo, 王振华 (Zhenhua Wang), 韩董, 이중건 Isaac Lee"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.1.0-rc2"^^xsd:anyURI ;
    sd:hasVersionId "v2.1.0-rc2"^^xsd:string ;
    sd:name "TensorFlow 2.1.0-rc2"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.1.1> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/mihaimaruseac> ;
    sd:dateCreated "2020-05-14T02:17:30+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-05-18T16:04:51+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.1.1\r
\r
## Bug Fixes and Other Changes\r
* Updates `sqlite3` to `3.31.01` to handle [CVE-2019-19880](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19880), [CVE-2019-19244](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19244) and [CVE-2019-19645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19645)\r
* Updates `curl` to `7.69.1` to handle [CVE-2019-15601](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15601)\r
* Updates `libjpeg-turbo` to `2.0.4` to handle [CVE-2018-19664](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19664), [CVE-2018-20330](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20330) and [CVE-2019-13960](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13960)\r
* Updates Apache Spark to `2.4.5` to handle [CVE-2019-10099](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10099), [CVE-2018-17190](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17190) and [CVE-2018-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11770)\r
* Fixes a versioning bug which causes Keras layers from TF 1.x to be used instead of those from TF 2.x"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.1.1"^^xsd:anyURI ;
    sd:hasVersionId "v2.1.1"^^xsd:string ;
    sd:name "TensorFlow 2.1.1"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2020-05-05T21:58:49+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-05-06T19:14:06+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.2.0\r
\r
TensorFlow 2.2 discontinues support for Python 2, [previously announced](https://groups.google.com/a/tensorflow.org/d/msg/announce/gVwS5RC8mds/dCt1ka2XAAAJ) as following [Python 2's EOL on January 1, 2020](https://www.python.org/dev/peps/pep-0373/#update).\r
\r
Coinciding with this change, new releases of [TensorFlow's Docker images](https://hub.docker.com/r/tensorflow/tensorflow/) provide Python 3 exclusively. Because all images now use Python 3, Docker tags containing `-py3` will no longer be provided and existing `-py3` tags like `latest-py3` will not be updated.   \r
\r
## Major Features and Improvements\r
\r
* Replaced the scalar type for string tensors from `std::string` to `tensorflow::tstring` which is now ABI stable.\r
* A new Profiler for TF 2 for CPU/GPU/TPU. It offers both device and host performance analysis, including input pipeline and TF Ops. Optimization advisory is provided whenever possible. Please see [this tutorial](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras) and [guide](https://www.tensorflow.org/guide/profiler) for usage guidelines.\r
* Export C++ functions to Python using `pybind11` as opposed to `SWIG` as a part of our [deprecation of swig efforts](https://github.com/tensorflow/community/blob/master/rfcs/20190208-pybind11.md).\r
* `tf.distribute`:\r
  * Support added for global sync `BatchNormalization` by using the newly added `tf.keras.layers.experimental.SyncBatchNormalization` layer. This layer will sync `BatchNormalization` statistics every step across all replicas taking part in sync training.\r
  * Performance improvements for GPU multi-worker distributed training using `tf.distribute.experimental.MultiWorkerMirroredStrategy`\r
    * Update NVIDIA `NCCL` to `2.5.7-1` for better performance and performance tuning. Please see [nccl developer guide](https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/docs/env.html) for more information on this.\r
    * Support gradient `allreduce` in `float16`. See this [example](https://github.com/tensorflow/models/blob/master/official/staging/training/grad_utils.py) usage.\r
    * Experimental support of [all reduce gradient packing](https://www.tensorflow.org/api_docs/python/tf/distribute/experimental/CollectiveHints) to allow overlapping gradient aggregation with backward path computation. \r
    * Deprecated `experimental_run_v2` method for distribution strategies and renamed the method `run` as it is no longer experimental.\r
    * Add CompositeTensor support for DistributedIterators. This should help prevent unnecessary function retracing and memory leaks.\r
* `tf.keras`:\r
  * `Model.fit` major improvements:\r
     * You can now use custom training logic with `Model.fit` by overriding `Model.train_step`.\r
     * Easily write state-of-the-art training loops without worrying about all of the features `Model.fit` handles for you (distribution strategies, callbacks, data formats, looping logic, etc)\r
     * See the default [`Model.train_step`](https://github.com/tensorflow/tensorflow/blob/1381fc8e15e22402417b98e3881dfd409998daea/tensorflow/python/keras/engine/training.py#L540) for an example of what this function should look like. Same applies for validation and inference via `Model.test_step` and `Model.predict_step`.\r
     * SavedModel uses its own `Model._saved_model_inputs_spec` attr now instead of\r
       relying on `Model.inputs` and `Model.input_names`, which are no longer set for subclass Models. \r
       This attr is set in eager, `tf.function`, and graph modes. This gets rid of the need for users to \r
       manually call `Model._set_inputs` when using Custom Training Loops(CTLs).\r
     * Dynamic shapes are supported for generators by calling the Model on the first batch we "peek" from the generator. \r
       This used to happen implicitly in `Model._standardize_user_data`. Long-term, a solution where the \r
       `DataAdapter` doesn't need to call the Model is probably preferable.\r
  * The SavedModel format now supports all Keras built-in layers (including metrics, preprocessing layers, and stateful RNN layers)\r
  * Update Keras batch normalization layer to use the running mean and average computation in the `fused_batch_norm`. You should see significant performance improvements when using `fused_batch_norm` in Eager mode.\r
\r
* `tf.lite`:\r
  * Enable TFLite experimental new converter by default.\r
* XLA\r
  * XLA now builds and works on windows. All prebuilt packages come with XLA available.\r
  * XLA can be [enabled for a `tf.function`](https://www.tensorflow.org/xla#explicit_compilation_with_tffunction\r
) with “compile or throw exception” semantics on CPU and GPU.\r
\r
## Breaking Changes\r
* `tf.keras`: \r
  * In `tf.keras.applications` the name of the "top" layer has been standardized to "predictions". This is only a problem if your code relies on the exact name of the layer.\r
  * Huber loss function has been updated to be consistent with other Keras losses. It now computes mean over the last axis of per-sample losses before applying the reduction function.\r
* AutoGraph no longer converts functions passed to `tf.py_function`, `tf.py_func` and `tf.numpy_function`.\r
* Deprecating `XLA_CPU` and `XLA_GPU` devices with this release.\r
* Increasing the minimum bazel version to build TF to 2.0.0 to use Bazel's `cc_experimental_shared_library`.\r
* Keras compile/fit behavior for functional and subclassed models have been unified. Model properties such as `metrics`, `metrics_names` will now be available only after **training/evaluating the model on actual data** for functional models. `metrics` will **now include** model `loss` and output losses.`loss_functions` property has been removed from the model. This was an undocumented property that was accidentally public and has now been removed.\r
\r
## Known Caveats\r
* The current TensorFlow release now **requires** [gast](https://pypi.org/project/gast/) version 0.3.3. \r
\r
## Bug Fixes and Other Changes\r
* `tf.data`:\r
  * Removed `autotune_algorithm` from experimental optimization options.\r
* TF Core:\r
  * `tf.constant` always creates CPU tensors irrespective of the current device context.  \r
  * Eager `TensorHandles` maintain a list of mirrors for any copies to local or remote devices. This avoids any redundant copies due to op execution.\r
  * For `tf.Tensor` & `tf.Variable`, `.experimental_ref()` is no longer experimental and is available as simply `.ref()`.\r
  * `pfor/vectorized_map`: Added support for vectorizing 56 more ops. Vectorizing `tf.cond` is also supported now.\r
  * Set as much partial shape as we can infer statically within the gradient impl of the gather op.\r
  * Gradient of `tf.while_loop` emits `StatelessWhile` op if `cond` and body functions are stateless. This allows multiple gradients while ops to run in parallel under distribution strategy.\r
  * Speed up `GradientTape` in eager mode by auto-generating list of op inputs/outputs which are unused and hence not cached for gradient functions.\r
  * Support `back_prop=False` in `while_v2` but mark it as deprecated.\r
  * Improve error message when attempting to use `None` in data-dependent control flow.\r
  * Add `RaggedTensor.numpy()`.\r
  * Update `RaggedTensor.__getitem__` to preserve uniform dimensions & allow indexing into uniform dimensions.\r
  * Update `tf.expand_dims` to always insert the new dimension as a non-ragged dimension.\r
  * Update `tf.embedding_lookup` to use `partition_strategy` and `max_norm` when `ids` is ragged.\r
  * Allow `batch_dims==rank(indices)` in `tf.gather`.\r
  * Add support for bfloat16 in `tf.print`.  \r
* `tf.distribute`: \r
  * Support `embedding_column` with variable-length input features for `MultiWorkerMirroredStrategy`.\r
* `tf.keras`:\r
  * Added `experimental_aggregate_gradients` argument to `tf.keras.optimizer.Optimizer.apply_gradients`. This allows custom gradient aggregation and processing aggregated gradients in custom training loop.\r
  * Allow `pathlib.Path` paths for loading models via Keras API.\r
* `tf.function`/AutoGraph:\r
  * AutoGraph is now available in `ReplicaContext.merge_call`, `Strategy.extended.update` and `Strategy.extended.update_non_slot`.\r
  * Experimental support for shape invariants has been enabled in `tf.function`. See the API docs for `tf.autograph.experimental.set_loop_options` for additonal info.\r
  * AutoGraph error messages now exclude frames corresponding to APIs internal to AutoGraph.\r
  * Improve shape inference for `tf.function` input arguments to unlock more Grappler optimizations in TensorFlow 2.x.\r
  * Improve automatic control dependency management of resources by allowing resource reads to occur in parallel and synchronizing only on writes.\r
  * Fix execution order of multiple stateful calls to `experimental_run_v2` in `tf.function`.\r
  * You can now iterate over `RaggedTensors` using a for loop inside `tf.function`.\r
* `tf.lite`:\r
  *  Migrated the `tf.lite` C inference API out of experimental into lite/c.\r
  * Add an option to disallow `NNAPI` CPU / partial acceleration on Android 10\r
  * TFLite Android AARs now include the C headers and APIs are required to use TFLite from native code.\r
  * Refactors the delegate and delegate kernel sources to allow usage in the linter.\r
  * Limit delegated ops to actually supported ones if a device name is specified or `NNAPI` CPU Fallback is disabled.\r
  * TFLite now supports `tf.math.reciprocal1` op by lowering to `tf.div op`.\r
  * TFLite's unpack op now supports boolean tensor inputs.\r
  * Microcontroller and embedded code moved from experimental to main TensorFlow Lite folder\r
  * Check for large TFLite tensors.\r
  * Fix GPU delegate crash with C++17.\r
  * Add 5D support to TFLite `strided_slice`.\r
  * Fix error in delegation of `DEPTH_TO_SPACE` to `NNAPI` causing op not to be accelerated.\r
  * Fix segmentation fault when running a model with LSTM nodes using `NNAPI` Delegate\r
  * Fix `NNAPI` delegate failure when an operand for Maximum/Minimum operation is a scalar.\r
  * Fix `NNAPI` delegate failure when Axis input for reduce operation is a scalar.\r
  * Expose option to limit the number of partitions that will be delegated to `NNAPI`.\r
  * If a target accelerator is specified, use its feature level to determine operations to delegate instead of SDK version.\r
* `tf.random`:\r
  * Various random number generation improvements: \r
    * Add a fast path for default `random_uniform`\r
    * `random_seed` documentation improvement.\r
    * `RandomBinomial` broadcasts and appends the sample shape to the left rather than the right. \r
  * Added `tf.random.stateless_binomial`, `tf.random.stateless_gamma`, `tf.random.stateless_poisson`\r
  * `tf.random.stateless_uniform` now supports unbounded sampling of `int` types.\r
* Math and Linear Algebra:\r
  * Add `tf.linalg.LinearOperatorTridiag`.\r
  * Add `LinearOperatorBlockLowerTriangular`\r
  * Add broadcasting support to tf.linalg.triangular_solve[#26204](https://github.com/tensorflow/tensorflow/issues/26204), tf.math.invert_permutation.\r
  * Add `tf.math.sobol_sample` op.\r
  * Add `tf.math.xlog1py`.\r
  * Add `tf.math.special.{dawsn,expi,fresnel_cos,fresnel_sin,spence}`.\r
  * Add a Modified Discrete Cosine Transform (MDCT) and its inverse to `tf.signal`.\r
* TPU Enhancements:\r
  * Refactor `TpuClusterResolver` to move shared logic to a separate pip package.\r
  * Support configuring TPU software version from cloud tpu client.\r
  * Allowed TPU embedding weight decay factor to be multiplied by learning rate.\r
* XLA Support:\r
  * Add standalone XLA AOT runtime target + relevant .cc sources to pip package.\r
  * Add check for memory alignment to MemoryAllocation::MemoryAllocation() on 32-bit ARM. This ensures a deterministic early exit instead of a hard to debug bus error later.\r
  * `saved_model_cli aot_compile_cpu` allows you to compile saved models to XLA header+object files and include them in your C++ programs.\r
  * Enable `Igamma`, `Igammac` for XLA.\r
* Deterministic Op Functionality:\r
  * XLA reduction emitter is deterministic when the environment variable `TF_DETERMINISTIC_OPS` is set to "true" or "1". This extends deterministic `tf.nn.bias_add` back-prop functionality (and therefore also deterministic back-prop of bias-addition in Keras layers) to include when XLA JIT complilation is enabled.\r
  * Fix problem, when running on a CUDA GPU and when either environment variable `TF_DETERMINSTIC_OPS` or environment variable `TF_CUDNN_DETERMINISTIC` is set to "true" or "1", in which some layer configurations led to an exception with the message "No algorithm worked!"\r
* Tracing and Debugging:\r
  * Add source, destination name to `_send` traceme to allow easier debugging.\r
  * Add traceme event to `fastpathexecute`.\r
* Other:\r
  * Fix an issue with AUC.reset_states for multi-label AUC [#35852](https://github.com/tensorflow/tensorflow/issues/35852)\r
  * Fix the TF upgrade script to not delete files when there is a parsing error and the output mode is `in-place`.\r
  * Move `tensorflow/core:framework/*_pyclif` rules to `tensorflow/core/framework:*_pyclif`.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
372046933, 8bitmp3, aaronhma, Abin Shahab, Aditya Patwardhan, Agoniii, Ahti Kitsik, Alan Yee, Albin Joy, Alex Hoffman, Alexander Grund, Alexandre E. Eichenberger, Amit Kumar Jaiswal, amoitra, Andrew Anderson, Angus-Luo, Anthony Barbier, Anton Kachatkou, Anuj Rawat, archis, Arpan-Dhatt, Arvind Sundararajan, Ashutosh Hathidara, autoih, Bairen Yi, Balint Cristian, Bas Aarts, BashirSbaiti, Basit Ayantunde, Ben Barsdell, Benjamin Gaillard, boron, Brett Koonce, Bryan Cutler, Christian Goll, Christian Sachs, Clayne Robison, comet, Daniel Falbel, Daria Zhuravleva, darsh8200, David Truby, Dayananda-V, deepakm, Denis Khalikov, Devansh Singh, Dheeraj R Reddy, Diederik Van Liere, Diego Caballero, Dominic Jack, dothinking, Douman, Drake Gens, Duncan Riach, Ehsan Toosi, ekuznetsov139, Elena Zhelezina, elzino, Ending2015a, Eric Schweitz, Erik Zettel, Ethan Saadia, Eugene Kuznetsov, Evgeniy Zheltonozhskiy, Ewout Ter Hoeven, exfalso, FAIJUL, Fangjun Kuang, Fei Hu, Frank Laub, Frederic Bastien, Fredrik Knutsson, frreiss, Frédéric Rechtenstein, fsx950223, Gaurav Singh, gbaned, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, Hans Gaiser, Hans Pabst, Haoyu Wu, Harry Slatyer, hsahovic, Hugo, Hugo Sjöberg, IrinaM21, jacco, Jake Tae, Jean-Denis Lesage, Jean-Michel Gorius, Jeff Daily, Jens Elofsson, Jerry Shih, jerryyin, Jin Mingjian, Jinjing Zhou, JKIsaacLee, jojimonv, Jonathan Dekhtiar, Jose Ignacio Gomez, Joseph-Rance, Judd, Julian Gross, Kaixi Hou, Kaustubh Maske Patil, Keunwoo Choi, Kevin Hanselman, Khor Chean Wei, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Koki Ibukuro, Kristian Holsheimer, kurileo, Lakshay Tokas, Lee Netherton, leike666666, Leslie-Fang-Intel, Li, Guizi, LIUJIAN435, Lukas Geiger, Lyo Nguyen, madisetti, Maher Jendoubi, Mahmoud Abuzaina, Manuel Freiberger, Marcel Koester, Marco Jacopo Ferrarotti, Markus Franke, marload, Mbah-Javis, mbhuiyan, Meng Zhang, Michael Liao, MichaelKonobeev, Michal Tarnowski, Milan Straka, minoring, Mohamed Nour Abouelseoud, MoussaMM, Mrinal Jain, mrTsjolder, Måns Nilsson, Namrata Bhave, Nicholas Gao, Niels Ole Salscheider, nikochiko, Niranjan Hasabnis, Nishidha Panpaliya, nmostafa, Noah Trenaman, nuka137, Officium, Owen L - Sfe, Pallavi G, Paul Andrey, Peng Sun, Peng Wu, Phil Pearl, PhilipMay, pingsutw, Pooya Davoodi, PragmaTwice, pshiko, Qwerty71, R Gomathi, Rahul Huilgol, Richard Xiao, Rick Wierenga, Roberto Rosmaninho, ruchit2801, Rushabh Vasani, Sami, Sana Damani, Sarvesh Dubey, Sasan Jafarnejad, Sergii Khomenko, Shane Smiskol, Shaochen Shi, sharkdtu, Shawn Presser, ShengYang1, Shreyash Patodia, Shyam Sundar Dhanabalan, Siju Samuel, Somyajit Chakraborty Sam, Srihari Humbarwadi, srinivasan.narayanamoorthy, Srishti Yadav, Steph-En-M, Stephan Uphoff, Stephen Mugisha, SumanSudhir, Taehun Kim, Tamas Bela Feher, TengLu, Tetragramm, Thierry Herrmann, Tian Jin, tigertang, Tom Carchrae, Tom Forbes, Trent Lo, Victor Peng, vijayphoenix, Vincent Abriou, Vishal Bhola, Vishnuvardhan Janapati, vladbataev, VoVAllen, Wallyss Lima, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, William Zhang, Xiaoming (Jason) Cui, Xiaoquan Kong, Xinan Jiang, Yasir Modak, Yasuhiro Matsumoto, Yaxun (Sam) Liu, Yong Tang, Ytyt-Yt, yuan, Yuan Mingshuai, Yuan Tang, Yuki Ueda, Yusup, zhangshijin, zhuwenxi"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.2.0"^^xsd:anyURI ;
    sd:hasVersionId "v2.2.0"^^xsd:string ;
    sd:name "TensorFlow 2.2.0"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0-rc0> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2020-03-10T17:18:52+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-03-10T23:42:54+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.2.0\r
## Major Features and Improvements\r
\r
* Replaced the scalar type for string tensors from `std::string` to `tensorflow::tstring` which is now ABI stable.\r
* A new Profiler for TF 2 for CPU/GPU/TPU. It offers both device and host performance analysis, including input pipeline and TF Ops. Optimization advisory is provided whenever possible. Please see [this tutorial](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras) for usage guidelines.\r
* Export C++ functions to Python using `pybind11` as opposed to `SWIG` as a part of our [deprecation of swig efforts](https://github.com/tensorflow/community/blob/master/rfcs/20190208-pybind11.md).\r
* `tf.distribute`:\r
  * Support added for global sync `BatchNormalization` by using the newly added `tf.keras.layers.experimental.SyncBatchNormalization` layer. This layer will sync `BatchNormalization` statistics every step across all replicas taking part in sync training.\r
  * Performance improvements for GPU multi-worker distributed training using `tf.distribute.experimental.MultiWorkerMirroredStrategy`\r
    * Update NVIDIA `NCCL` to `2.5.7-1` for better performance and performance tuning. Please see [nccl developer guide](https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/docs/env.html) for more information on this.\r
    * Support gradient `allreduce` in `float16`. See this [example](https://github.com/tensorflow/models/blob/master/official/staging/training/grad_utils.py) usage.\r
    * Experimental support of [all reduce gradient packing](https://www.tensorflow.org/api_docs/python/tf/distribute/experimental/CollectiveHints) to allow overlapping gradient aggregation with backward path computation. \r
* `tf.keras`:\r
  * `Model.fit` major improvements:\r
     * You can now use custom training logic with `Model.fit` by overriding `Model.train_step`.\r
     * Easily write state-of-the-art training loops without worrying about all of the features `Model.fit` handles for you (distribution strategies, callbacks, data formats, looping logic, etc)\r
     * See the default [`Model.train_step`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/engine/training.py#L433) for an example of what this function should look like\r
     * Same applies for validation and inference via `Model.test_step` and `Model.predict_step`\r
  * The SavedModel format now supports all Keras built-in layers (including metrics, preprocessing layers, and stateful RNN layers)\r
* `tf.lite`:\r
  * Enable TFLite experimental new converter by default.\r
* XLA\r
  * XLA now builds and works on windows. All prebuilt packages come with XLA available.\r
  * XLA can be [enabled for a `tf.function`](https://www.tensorflow.org/xla#explicit_compilation_with_tffunction\r
) with “compile or throw exception” semantics on CPU and GPU.\r
\r
## Breaking Changes\r
* `tf.keras`: \r
  * In `tf.keras.applications` the name of the "top" layer has been standardized to "predictions". This is only a problem if your code relies on the exact name of the layer.\r
  * Huber loss function has been updated to be consistent with other Keras losses. It now computes mean over the last axis of per-sample losses before applying the reduction function.\r
* AutoGraph no longer converts functions passed to `tf.py_function`, `tf.py_func` and `tf.numpy_function`.\r
* Deprecating `XLA_CPU` and `XLA_GPU` devices with this release.\r
* Increasing the minimum bazel version to build TF to 1.2.1 to use Bazel's `cc_experimental_shared_library`.\r
\r
## Known Caveats\r
* MacOS binaries are **not available** on pypi at tensorflow-cpu project, but they are identical to the binaries in [tensorflow project](https://pypi.org/project/tensorflow/2.2.0rc0/#files), since MacOS has no GPU.\r
\r
## Bug Fixes and Other Changes\r
* `tf.data`:\r
  * Removed `autotune_algorithm` from experimental optimization options.\r
* TF Core:\r
  * `tf.constant` always creates CPU tensors irrespective of the current device context.  \r
  * Eager TensorHandles maintain a list of mirrors for any copies to local or remote devices. This avoids any redundant copies due to op execution.\r
  * For `tf.Tensor` & `tf.Variable`, `.experimental_ref()` is no longer experimental and is available as simply `.ref()`.\r
  * Support matrix inverse and solves in `pfor/vectorized_map`.\r
  * Set as much partial shape as we can infer statically within the gradient impl of the gather op.\r
  * Gradient of `tf.while_loop` emits `StatelessWhile` op if `cond` and body functions are stateless. This allows multiple gradients while ops to run in parallel under distribution strategy.\r
  * Speed up `GradientTape` in eager mode by auto-generating list of op inputs/outputs which are unused and hence not cached for gradient functions.\r
  * Support `back_prop=False` in `while_v2` but mark it as deprecated.\r
  * Improve error message when attempting to use `None` in data-dependent control flow.\r
  * Add `RaggedTensor.numpy()`.\r
  * Update `RaggedTensor.__getitem__` to preserve uniform dimensions & allow indexing into uniform dimensions.\r
  * Update `tf.expand_dims` to always insert the new dimension as a non-ragged dimension.\r
  * Update `tf.embedding_lookup` to use `partition_strategy` and `max_norm` when `ids` is ragged.\r
  * Allow `batch_dims==rank(indices)` in `tf.gather`.\r
  * Add support for bfloat16 in `tf.print`.  \r
* `tf.distribute`: \r
  * Support `embedding_column` with variable-length input features for `MultiWorkerMirroredStrategy`.\r
* `tf.keras`:\r
  * Added `all_reduce_sum_gradients` argument to `tf.keras.optimizer.Optimizer.apply_gradients`. This allows custom gradient aggregation and processing aggregated gradients in custom training loop.\r
  * Allow `pathlib.Path` paths for loading models via Keras API.\r
* `tf.function`/AutoGraph:\r
  * AutoGraph is now available in `ReplicaContext.merge_call`, `Strategy.extended.update` and `Strategy.extended.update_non_slot`.\r
  * Experimental support for shape invariants has been enabled in `tf.function`. See the API docs for `tf.autograph.experimental.set_loop_options` for additonal info.\r
  * AutoGraph error messages now exclude frames corresponding to APIs internal to AutoGraph.\r
  * Improve shape inference for `tf.function` input arguments to unlock more Grappler optimizations in TensorFlow 2.x.\r
  * Improve automatic control dependency management of resources by allowing resource reads to occur in parallel and synchronizing only on writes.\r
  * Fix execution order of multiple stateful calls to `experimental_run_v2` in `tf.function`.\r
  * You can now iterate over `RaggedTensors` using a for loop inside `tf.function`.\r
* `tf.lite`:\r
  *  Migrated the `tf.lite` C inference API out of experimental into lite/c.\r
  * Add an option to disallow `NNAPI` CPU / partial acceleration on Android 10\r
  * TFLite Android AARs now include the C headers and APIs are required to use TFLite from native code.\r
  * Refactors the delegate and delegate kernel sources to allow usage in the linter.\r
  * Limit delegated ops to actually supported ones if a device name is specified or `NNAPI` CPU Fallback is disabled.\r
  * TFLite now supports `tf.math.reciprocal1` op by lowering to `tf.div op`.\r
  * TFLite's unpack op now supports boolean tensor inputs.\r
  * Microcontroller and embedded code moved from experimental to main TensorFlow Lite folder\r
  * Check for large TFLite tensors.\r
  * Fix GPU delegate crash with C++17.\r
  * Add 5D support to TFLite `strided_slice`.\r
  * Fix error in delegation of `DEPTH_TO_SPACE` to `NNAPI` causing op not to be accelerated.\r
  * Fix segmentation fault when running a model with LSTM nodes using `NNAPI` Delegate\r
  * Fix `NNAPI` delegate failure when an operand for Maximum/Minimum operation is a scalar.\r
  * Fix `NNAPI` delegate failure when Axis input for reduce operation is a scalar.\r
  * Expose option to limit the number of partitions that will be delegated to `NNAPI`.\r
  * If a target accelerator is specified, use its feature level to determine operations to delegate instead of SDK version.\r
* `tf.random`:\r
  * Various random number generation improvements: \r
    * Add a fast path for default `random_uniform`\r
    * `random_seed` documentation improvement.\r
    * `RandomBinomial` broadcasts and appends the sample shape to the left rather than the right. \r
  * Added `tf.random.stateless_binomial`, `tf.random.stateless_gamma`, `tf.random.stateless_poisson`\r
  * `tf.random.stateless_uniform` now supports unbounded sampling of `int` types.\r
* Math and Linear Algebra:\r
  * Add `tf.linalg.LinearOperatorTridiag`.\r
  * Add `LinearOperatorBlockLowerTriangular`\r
  * Add broadcasting support to tf.linalg.triangular_solve[#26204](https://github.com/tensorflow/tensorflow/issues/26204), tf.math.invert_permutation.\r
  * Add `tf.math.sobol_sample` op.\r
  * Add `tf.math.xlog1py`.\r
  * Add `tf.math.special.{dawsn,expi,fresnel_cos,fresnel_sin,spence}`.\r
  * Add a Modified Discrete Cosine Transform (MDCT) and its inverse to `tf.signal`.\r
* TPU Enhancements:\r
  * Refactor `TpuClusterResolver` to move shared logic to a separate pip package.\r
  * Support configuring TPU software version from cloud tpu client.\r
  * Allowed TPU embedding weight decay factor to be multiplied by learning rate.\r
* XLA Support:\r
  * Add standalone XLA AOT runtime target + relevant .cc sources to pip package.\r
  * Add check for memory alignment to MemoryAllocation::MemoryAllocation() on 32-bit ARM. This ensures a deterministic early exit instead of a hard to debug bus error later.\r
  * `saved_model_cli aot_compile_cpu` allows you to compile saved models to XLA header+object files and include them in your C++ programs.\r
  * Enable `Igamma`, `Igammac` for XLA.\r
  * XLA reduction emitter is deterministic when the environment variable `TF_DETERMINISTIC_OPS` is set.\r
* Tracing and Debugging:\r
  * Add source, destination name to `_send` traceme to allow easier debugging.\r
  * Add traceme event to `fastpathexecute`.\r
* Other:\r
  * Fix an issue with AUC.reset_states for multi-label AUC [#35852](https://github.com/tensorflow/tensorflow/issues/35852)\r
  * Fix the TF upgrade script to not delete files when there is a parsing error and the output mode is `in-place`.\r
  * Move `tensorflow/core:framework/*_pyclif` rules to `tensorflow/core/framework:*_pyclif`.\r
\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
372046933, 8bitmp3, aaronhma, Abin Shahab, Aditya Patwardhan, Agoniii, Ahti Kitsik, Alan Yee, Albin Joy, Alex Hoffman, Alexander Grund, Alexandre E. Eichenberger, Amit Kumar Jaiswal, amoitra, Andrew Anderson, Angus-Luo, Anthony Barbier, Anton Kachatkou, Anuj Rawat, archis, Arpan-Dhatt, Arvind Sundararajan, Ashutosh Hathidara, autoih, Bairen Yi, Balint Cristian, Bas Aarts, BashirSbaiti, Basit Ayantunde, Ben Barsdell, Benjamin Gaillard, boron, Brett Koonce, Bryan Cutler, Christian Goll, Christian Sachs, Clayne Robison, comet, Daniel Falbel, Daria Zhuravleva, darsh8200, David Truby, Dayananda-V, deepakm, Denis Khalikov, Devansh Singh, Dheeraj R Reddy, Diederik Van Liere, Diego Caballero, Dominic Jack, dothinking, Douman, Drake Gens, Duncan Riach, Ehsan Toosi, ekuznetsov139, Elena Zhelezina, elzino, Ending2015a, Eric Schweitz, Erik Zettel, Ethan Saadia, Eugene Kuznetsov, Evgeniy Zheltonozhskiy, Ewout Ter Hoeven, exfalso, FAIJUL, Fangjun Kuang, Fei Hu, Frank Laub, Frederic Bastien, Fredrik Knutsson, frreiss, Frédéric Rechtenstein, fsx950223, Gaurav Singh, gbaned, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, Hans Gaiser, Hans Pabst, Haoyu Wu, Harry Slatyer, hsahovic, Hugo, Hugo Sjöberg, IrinaM21, jacco, Jake Tae, Jean-Denis Lesage, Jean-Michel Gorius, Jeff Daily, Jens Elofsson, Jerry Shih, jerryyin, Jin Mingjian, Jinjing Zhou, JKIsaacLee, jojimonv, Jonathan Dekhtiar, Jose Ignacio Gomez, Joseph-Rance, Judd, Julian Gross, Kaixi Hou, Kaustubh Maske Patil, Keunwoo Choi, Kevin Hanselman, Khor Chean Wei, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Koki Ibukuro, Kristian Holsheimer, kurileo, Lakshay Tokas, Lee Netherton, leike666666, Leslie-Fang-Intel, Li, Guizi, LIUJIAN435, Lukas Geiger, Lyo Nguyen, madisetti, Maher Jendoubi, Mahmoud Abuzaina, Manuel Freiberger, Marcel Koester, Marco Jacopo Ferrarotti, Markus Franke, marload, Mbah-Javis, mbhuiyan, Meng Zhang, Michael Liao, MichaelKonobeev, Michal Tarnowski, Milan Straka, minoring, Mohamed Nour Abouelseoud, MoussaMM, Mrinal Jain, mrTsjolder, Måns Nilsson, Namrata Bhave, Nicholas Gao, Niels Ole Salscheider, nikochiko, Niranjan Hasabnis, Nishidha Panpaliya, nmostafa, Noah Trenaman, nuka137, Officium, Owen L - Sfe, Pallavi G, Paul Andrey, Peng Sun, Peng Wu, Phil Pearl, PhilipMay, pingsutw, Pooya Davoodi, PragmaTwice, pshiko, Qwerty71, R Gomathi, Rahul Huilgol, Richard Xiao, Rick Wierenga, Roberto Rosmaninho, ruchit2801, Rushabh Vasani, Sami, Sana Damani, Sarvesh Dubey, Sasan Jafarnejad, Sergii Khomenko, Shane Smiskol, Shaochen Shi, sharkdtu, Shawn Presser, ShengYang1, Shreyash Patodia, Shyam Sundar Dhanabalan, Siju Samuel, Somyajit Chakraborty Sam, Srihari Humbarwadi, srinivasan.narayanamoorthy, Srishti Yadav, Steph-En-M, Stephan Uphoff, Stephen Mugisha, SumanSudhir, Taehun Kim, Tamas Bela Feher, TengLu, Tetragramm, Thierry Herrmann, Tian Jin, tigertang, Tom Carchrae, Tom Forbes, Trent Lo, Victor Peng, vijayphoenix, Vincent Abriou, Vishal Bhola, Vishnuvardhan Janapati, vladbataev, VoVAllen, Wallyss Lima, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, William Zhang, Xiaoming (Jason) Cui, Xiaoquan Kong, Xinan Jiang, Yasir Modak, Yasuhiro Matsumoto, Yaxun (Sam) Liu, Yong Tang, Ytyt-Yt, yuan, Yuan Mingshuai, Yuan Tang, Yuki Ueda, Yusup, zhangshijin, zhuwenxi\r
"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.2.0-rc0"^^xsd:anyURI ;
    sd:hasVersionId "v2.2.0-rc0"^^xsd:string ;
    sd:name "TensorFlow 2.2.0-rc0"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0-rc1> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2020-03-18T22:54:49+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-03-19T17:04:35+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.2.0\r
\r
## Major Features and Improvements\r
\r
* Replaced the scalar type for string tensors from `std::string` to `tensorflow::tstring` which is now ABI stable.\r
* A new Profiler for TF 2 for CPU/GPU/TPU. It offers both device and host performance analysis, including input pipeline and TF Ops. Optimization advisory is provided whenever possible. Please see [this tutorial](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras) and [guide](https://www.tensorflow.org/guide/profiler) for usage guidelines.\r
* Export C++ functions to Python using `pybind11` as opposed to `SWIG` as a part of our [deprecation of swig efforts](https://github.com/tensorflow/community/blob/master/rfcs/20190208-pybind11.md).\r
* `tf.distribute`:\r
  * Support added for global sync `BatchNormalization` by using the newly added `tf.keras.layers.experimental.SyncBatchNormalization` layer. This layer will sync `BatchNormalization` statistics every step across all replicas taking part in sync training.\r
  * Performance improvements for GPU multi-worker distributed training using `tf.distribute.experimental.MultiWorkerMirroredStrategy`\r
    * Update NVIDIA `NCCL` to `2.5.7-1` for better performance and performance tuning. Please see [nccl developer guide](https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/docs/env.html) for more information on this.\r
    * Support gradient `allreduce` in `float16`. See this [example](https://github.com/tensorflow/models/blob/master/official/staging/training/grad_utils.py) usage.\r
    * Experimental support of [all reduce gradient packing](https://www.tensorflow.org/api_docs/python/tf/distribute/experimental/CollectiveHints) to allow overlapping gradient aggregation with backward path computation. \r
* `tf.keras`:\r
  * `Model.fit` major improvements:\r
     * You can now use custom training logic with `Model.fit` by overriding `Model.train_step`.\r
     * Easily write state-of-the-art training loops without worrying about all of the features `Model.fit` handles for you (distribution strategies, callbacks, data formats, looping logic, etc)\r
     * See the default [`Model.train_step`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/engine/training.py#L433) for an example of what this function should look like\r
     * Same applies for validation and inference via `Model.test_step` and `Model.predict_step`\r
  * The SavedModel format now supports all Keras built-in layers (including metrics, preprocessing layers, and stateful RNN layers)\r
* `tf.lite`:\r
  * Enable TFLite experimental new converter by default.\r
* XLA\r
  * XLA now builds and works on windows. All prebuilt packages come with XLA available.\r
  * XLA can be [enabled for a `tf.function`](https://www.tensorflow.org/xla#explicit_compilation_with_tffunction\r
) with “compile or throw exception” semantics on CPU and GPU.\r
\r
## Breaking Changes\r
* `tf.keras`: \r
  * In `tf.keras.applications` the name of the "top" layer has been standardized to "predictions". This is only a problem if your code relies on the exact name of the layer.\r
  * Huber loss function has been updated to be consistent with other Keras losses. It now computes mean over the last axis of per-sample losses before applying the reduction function.\r
* AutoGraph no longer converts functions passed to `tf.py_function`, `tf.py_func` and `tf.numpy_function`.\r
* Deprecating `XLA_CPU` and `XLA_GPU` devices with this release.\r
* Increasing the minimum bazel version to build TF to 2.0.0 to use Bazel's `cc_experimental_shared_library`.\r
\r
## Known Caveats\r
* MacOS binaries are **not available** on pypi at tensorflow-cpu project, but they are identical to the binaries in [tensorflow project](https://pypi.org/project/tensorflow/2.2.0rc0/#files), since MacOS has no GPU.\r
* Due to certain unforeseen circumstances, we are unable to release MacOS py3.8 binaries, but Windows/Linux binaries for py3.8 are available.\r
* The current TensorFlow release now **requires** gast version 0.3.3. \r
\r
## Bug Fixes and Other Changes\r
* `tf.data`:\r
  * Removed `autotune_algorithm` from experimental optimization options.\r
* TF Core:\r
  * `tf.constant` always creates CPU tensors irrespective of the current device context.  \r
  * Eager `TensorHandles` maintain a list of mirrors for any copies to local or remote devices. This avoids any redundant copies due to op execution.\r
  * For `tf.Tensor` & `tf.Variable`, `.experimental_ref()` is no longer experimental and is available as simply `.ref()`.\r
  * `pfor/vectorized_map`: Added support for vectorizing 56 more ops. Vectorizing `tf.cond` is also supported now.\r
  * Set as much partial shape as we can infer statically within the gradient impl of the gather op.\r
  * Gradient of `tf.while_loop` emits `StatelessWhile` op if `cond` and body functions are stateless. This allows multiple gradients while ops to run in parallel under distribution strategy.\r
  * Speed up `GradientTape` in eager mode by auto-generating list of op inputs/outputs which are unused and hence not cached for gradient functions.\r
  * Support `back_prop=False` in `while_v2` but mark it as deprecated.\r
  * Improve error message when attempting to use `None` in data-dependent control flow.\r
  * Add `RaggedTensor.numpy()`.\r
  * Update `RaggedTensor.__getitem__` to preserve uniform dimensions & allow indexing into uniform dimensions.\r
  * Update `tf.expand_dims` to always insert the new dimension as a non-ragged dimension.\r
  * Update `tf.embedding_lookup` to use `partition_strategy` and `max_norm` when `ids` is ragged.\r
  * Allow `batch_dims==rank(indices)` in `tf.gather`.\r
  * Add support for bfloat16 in `tf.print`.  \r
* `tf.distribute`: \r
  * Support `embedding_column` with variable-length input features for `MultiWorkerMirroredStrategy`.\r
* `tf.keras`:\r
  * Added `all_reduce_sum_gradients` argument to `tf.keras.optimizer.Optimizer.apply_gradients`. This allows custom gradient aggregation and processing aggregated gradients in custom training loop.\r
  * Allow `pathlib.Path` paths for loading models via Keras API.\r
* `tf.function`/AutoGraph:\r
  * AutoGraph is now available in `ReplicaContext.merge_call`, `Strategy.extended.update` and `Strategy.extended.update_non_slot`.\r
  * Experimental support for shape invariants has been enabled in `tf.function`. See the API docs for `tf.autograph.experimental.set_loop_options` for additonal info.\r
  * AutoGraph error messages now exclude frames corresponding to APIs internal to AutoGraph.\r
  * Improve shape inference for `tf.function` input arguments to unlock more Grappler optimizations in TensorFlow 2.x.\r
  * Improve automatic control dependency management of resources by allowing resource reads to occur in parallel and synchronizing only on writes.\r
  * Fix execution order of multiple stateful calls to `experimental_run_v2` in `tf.function`.\r
  * You can now iterate over `RaggedTensors` using a for loop inside `tf.function`.\r
* `tf.lite`:\r
  *  Migrated the `tf.lite` C inference API out of experimental into lite/c.\r
  * Add an option to disallow `NNAPI` CPU / partial acceleration on Android 10\r
  * TFLite Android AARs now include the C headers and APIs are required to use TFLite from native code.\r
  * Refactors the delegate and delegate kernel sources to allow usage in the linter.\r
  * Limit delegated ops to actually supported ones if a device name is specified or `NNAPI` CPU Fallback is disabled.\r
  * TFLite now supports `tf.math.reciprocal1` op by lowering to `tf.div op`.\r
  * TFLite's unpack op now supports boolean tensor inputs.\r
  * Microcontroller and embedded code moved from experimental to main TFLite folder\r
  * Check for large TFLite tensors.\r
  * Fix GPU delegate crash with C++17.\r
  * Add 5D support to TFLite `strided_slice`.\r
  * Fix error in delegation of `DEPTH_TO_SPACE` to `NNAPI` causing op not to be accelerated.\r
  * Fix segmentation fault when running a model with LSTM nodes using `NNAPI` Delegate\r
  * Fix `NNAPI` delegate failure when an operand for Maximum/Minimum operation is a scalar.\r
  * Fix `NNAPI` delegate failure when Axis input for reduce operation is a scalar.\r
  * Expose option to limit the number of partitions that will be delegated to `NNAPI`.\r
  * If a target accelerator is specified, use its feature level to determine operations to delegate instead of SDK version.\r
* `tf.random`:\r
  * Various random number generation improvements: \r
    * Add a fast path for default `random_uniform`\r
    * `random_seed` documentation improvement.\r
    * `RandomBinomial` broadcasts and appends the sample shape to the left rather than the right. \r
  * Added `tf.random.stateless_binomial`, `tf.random.stateless_gamma`, `tf.random.stateless_poisson`\r
  * `tf.random.stateless_uniform` now supports unbounded sampling of `int` types.\r
* Math and Linear Algebra:\r
  * Add `tf.linalg.LinearOperatorTridiag`.\r
  * Add `LinearOperatorBlockLowerTriangular`\r
  * Add broadcasting support to tf.linalg.triangular_solve[#26204](https://github.com/tensorflow/tensorflow/issues/26204), tf.math.invert_permutation.\r
  * Add `tf.math.sobol_sample` op.\r
  * Add `tf.math.xlog1py`.\r
  * Add `tf.math.special.{dawsn,expi,fresnel_cos,fresnel_sin,spence}`.\r
  * Add a Modified Discrete Cosine Transform (MDCT) and its inverse to `tf.signal`.\r
* TPU Enhancements:\r
  * Refactor `TpuClusterResolver` to move shared logic to a separate pip package.\r
  * Support configuring TPU software version from cloud tpu client.\r
  * Allowed TPU embedding weight decay factor to be multiplied by learning rate.\r
* XLA Support:\r
  * Add standalone XLA AOT runtime target + relevant .cc sources to pip package.\r
  * Add check for memory alignment to MemoryAllocation::MemoryAllocation() on 32-bit ARM. This ensures a deterministic early exit instead of a hard to debug bus error later.\r
  * `saved_model_cli aot_compile_cpu` allows you to compile saved models to XLA header+object files and include them in your C++ programs.\r
  * Enable `Igamma`, `Igammac` for XLA.\r
  * XLA reduction emitter is deterministic when the environment variable `TF_DETERMINISTIC_OPS` is set.\r
* Tracing and Debugging:\r
  * Add source, destination name to `_send` traceme to allow easier debugging.\r
  * Add traceme event to `fastpathexecute`.\r
* Other:\r
  * Fix an issue with AUC.reset_states for multi-label AUC [#35852](https://github.com/tensorflow/tensorflow/issues/35852)\r
  * Fix the TF upgrade script to not delete files when there is a parsing error and the output mode is `in-place`.\r
  * Move `tensorflow/core:framework/*_pyclif` rules to `tensorflow/core/framework:*_pyclif`.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
372046933, 8bitmp3, aaronhma, Abin Shahab, Aditya Patwardhan, Agoniii, Ahti Kitsik, Alan Yee, Albin Joy, Alex Hoffman, Alexander Grund, Alexandre E. Eichenberger, Amit Kumar Jaiswal, amoitra, Andrew Anderson, Angus-Luo, Anthony Barbier, Anton Kachatkou, Anuj Rawat, archis, Arpan-Dhatt, Arvind Sundararajan, Ashutosh Hathidara, autoih, Bairen Yi, Balint Cristian, Bas Aarts, BashirSbaiti, Basit Ayantunde, Ben Barsdell, Benjamin Gaillard, boron, Brett Koonce, Bryan Cutler, Christian Goll, Christian Sachs, Clayne Robison, comet, Daniel Falbel, Daria Zhuravleva, darsh8200, David Truby, Dayananda-V, deepakm, Denis Khalikov, Devansh Singh, Dheeraj R Reddy, Diederik Van Liere, Diego Caballero, Dominic Jack, dothinking, Douman, Drake Gens, Duncan Riach, Ehsan Toosi, ekuznetsov139, Elena Zhelezina, elzino, Ending2015a, Eric Schweitz, Erik Zettel, Ethan Saadia, Eugene Kuznetsov, Evgeniy Zheltonozhskiy, Ewout Ter Hoeven, exfalso, FAIJUL, Fangjun Kuang, Fei Hu, Frank Laub, Frederic Bastien, Fredrik Knutsson, frreiss, Frédéric Rechtenstein, fsx950223, Gaurav Singh, gbaned, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, Hans Gaiser, Hans Pabst, Haoyu Wu, Harry Slatyer, hsahovic, Hugo, Hugo Sjöberg, IrinaM21, jacco, Jake Tae, Jean-Denis Lesage, Jean-Michel Gorius, Jeff Daily, Jens Elofsson, Jerry Shih, jerryyin, Jin Mingjian, Jinjing Zhou, JKIsaacLee, jojimonv, Jonathan Dekhtiar, Jose Ignacio Gomez, Joseph-Rance, Judd, Julian Gross, Kaixi Hou, Kaustubh Maske Patil, Keunwoo Choi, Kevin Hanselman, Khor Chean Wei, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Koki Ibukuro, Kristian Holsheimer, kurileo, Lakshay Tokas, Lee Netherton, leike666666, Leslie-Fang-Intel, Li, Guizi, LIUJIAN435, Lukas Geiger, Lyo Nguyen, madisetti, Maher Jendoubi, Mahmoud Abuzaina, Manuel Freiberger, Marcel Koester, Marco Jacopo Ferrarotti, Markus Franke, marload, Mbah-Javis, mbhuiyan, Meng Zhang, Michael Liao, MichaelKonobeev, Michal Tarnowski, Milan Straka, minoring, Mohamed Nour Abouelseoud, MoussaMM, Mrinal Jain, mrTsjolder, Måns Nilsson, Namrata Bhave, Nicholas Gao, Niels Ole Salscheider, nikochiko, Niranjan Hasabnis, Nishidha Panpaliya, nmostafa, Noah Trenaman, nuka137, Officium, Owen L - Sfe, Pallavi G, Paul Andrey, Peng Sun, Peng Wu, Phil Pearl, PhilipMay, pingsutw, Pooya Davoodi, PragmaTwice, pshiko, Qwerty71, R Gomathi, Rahul Huilgol, Richard Xiao, Rick Wierenga, Roberto Rosmaninho, ruchit2801, Rushabh Vasani, Sami, Sana Damani, Sarvesh Dubey, Sasan Jafarnejad, Sergii Khomenko, Shane Smiskol, Shaochen Shi, sharkdtu, Shawn Presser, ShengYang1, Shreyash Patodia, Shyam Sundar Dhanabalan, Siju Samuel, Somyajit Chakraborty Sam, Srihari Humbarwadi, srinivasan.narayanamoorthy, Srishti Yadav, Steph-En-M, Stephan Uphoff, Stephen Mugisha, SumanSudhir, Taehun Kim, Tamas Bela Feher, TengLu, Tetragramm, Thierry Herrmann, Tian Jin, tigertang, Tom Carchrae, Tom Forbes, Trent Lo, Victor Peng, vijayphoenix, Vincent Abriou, Vishal Bhola, Vishnuvardhan Janapati, vladbataev, VoVAllen, Wallyss Lima, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, William Zhang, Xiaoming (Jason) Cui, Xiaoquan Kong, Xinan Jiang, Yasir Modak, Yasuhiro Matsumoto, Yaxun (Sam) Liu, Yong Tang, Ytyt-Yt, yuan, Yuan Mingshuai, Yuan Tang, Yuki Ueda, Yusup, zhangshijin, zhuwenxi\r
"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.2.0-rc1"^^xsd:anyURI ;
    sd:hasVersionId "v2.2.0-rc1"^^xsd:string ;
    sd:name "TensorFlow Release 2.2.0-rc1"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0-rc2> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/goldiegadde> ;
    sd:dateCreated "2020-03-26T22:19:19+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-03-27T23:56:59+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.2.0\r
\r
## Major Features and Improvements\r
\r
* Replaced the scalar type for string tensors from `std::string` to `tensorflow::tstring` which is now ABI stable.\r
* A new Profiler for TF 2 for CPU/GPU/TPU. It offers both device and host performance analysis, including input pipeline and TF Ops. Optimization advisory is provided whenever possible. Please see [this tutorial](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras) and [guide](https://www.tensorflow.org/guide/profiler) for usage guidelines.\r
* Export C++ functions to Python using `pybind11` as opposed to `SWIG` as a part of our [deprecation of swig efforts](https://github.com/tensorflow/community/blob/master/rfcs/20190208-pybind11.md).\r
* `tf.distribute`:\r
  * Support added for global sync `BatchNormalization` by using the newly added `tf.keras.layers.experimental.SyncBatchNormalization` layer. This layer will sync `BatchNormalization` statistics every step across all replicas taking part in sync training.\r
  * Performance improvements for GPU multi-worker distributed training using `tf.distribute.experimental.MultiWorkerMirroredStrategy`\r
    * Update NVIDIA `NCCL` to `2.5.7-1` for better performance and performance tuning. Please see [nccl developer guide](https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/docs/env.html) for more information on this.\r
    * Support gradient `allreduce` in `float16`. See this [example](https://github.com/tensorflow/models/blob/master/official/staging/training/grad_utils.py) usage.\r
    * Experimental support of [all reduce gradient packing](https://www.tensorflow.org/api_docs/python/tf/distribute/experimental/CollectiveHints) to allow overlapping gradient aggregation with backward path computation. \r
    * Deprecated `experimental_run_v2` method for distribution strategies and renamed the method `run` as it is no longer experimental.\r
* `tf.keras`:\r
  * `Model.fit` major improvements:\r
     * You can now use custom training logic with `Model.fit` by overriding `Model.train_step`.\r
     * Easily write state-of-the-art training loops without worrying about all of the features `Model.fit` handles for you (distribution strategies, callbacks, data formats, looping logic, etc)\r
     * See the default [`Model.train_step`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/engine/training.py#L433) for an example of what this function should look like\r
     * Same applies for validation and inference via `Model.test_step` and `Model.predict_step`\r
  * The SavedModel format now supports all Keras built-in layers (including metrics, preprocessing layers, and stateful RNN layers)\r
* `tf.lite`:\r
  * Enable TFLite experimental new converter by default.\r
* XLA\r
  * XLA now builds and works on windows. All prebuilt packages come with XLA available.\r
  * XLA can be [enabled for a `tf.function`](https://www.tensorflow.org/xla#explicit_compilation_with_tffunction\r
) with “compile or throw exception” semantics on CPU and GPU.\r
\r
## Breaking Changes\r
* `tf.keras`: \r
  * In `tf.keras.applications` the name of the "top" layer has been standardized to "predictions". This is only a problem if your code relies on the exact name of the layer.\r
  * Huber loss function has been updated to be consistent with other Keras losses. It now computes mean over the last axis of per-sample losses before applying the reduction function.\r
* AutoGraph no longer converts functions passed to `tf.py_function`, `tf.py_func` and `tf.numpy_function`.\r
* Deprecating `XLA_CPU` and `XLA_GPU` devices with this release.\r
* Increasing the minimum bazel version to build TF to 2.0.0 to use Bazel's `cc_experimental_shared_library`.\r
\r
## Known Caveats\r
* Due to certain unforeseen circumstances, we are unable to release MacOS py3.8 binaries, but Windows/Linux binaries for py3.8 are available.\r
* The current TensorFlow release now **requires** gast version 0.3.3. \r
\r
## Bug Fixes and Other Changes\r
* `tf.data`:\r
  * Removed `autotune_algorithm` from experimental optimization options.\r
* TF Core:\r
  * `tf.constant` always creates CPU tensors irrespective of the current device context.  \r
  * Eager `TensorHandles` maintain a list of mirrors for any copies to local or remote devices. This avoids any redundant copies due to op execution.\r
  * For `tf.Tensor` & `tf.Variable`, `.experimental_ref()` is no longer experimental and is available as simply `.ref()`.\r
  * `pfor/vectorized_map`: Added support for vectorizing 56 more ops. Vectorizing `tf.cond` is also supported now.\r
  * Set as much partial shape as we can infer statically within the gradient impl of the gather op.\r
  * Gradient of `tf.while_loop` emits `StatelessWhile` op if `cond` and body functions are stateless. This allows multiple gradients while ops to run in parallel under distribution strategy.\r
  * Speed up `GradientTape` in eager mode by auto-generating list of op inputs/outputs which are unused and hence not cached for gradient functions.\r
  * Support `back_prop=False` in `while_v2` but mark it as deprecated.\r
  * Improve error message when attempting to use `None` in data-dependent control flow.\r
  * Add `RaggedTensor.numpy()`.\r
  * Update `RaggedTensor.__getitem__` to preserve uniform dimensions & allow indexing into uniform dimensions.\r
  * Update `tf.expand_dims` to always insert the new dimension as a non-ragged dimension.\r
  * Update `tf.embedding_lookup` to use `partition_strategy` and `max_norm` when `ids` is ragged.\r
  * Allow `batch_dims==rank(indices)` in `tf.gather`.\r
  * Add support for bfloat16 in `tf.print`.  \r
* `tf.distribute`: \r
  * Support `embedding_column` with variable-length input features for `MultiWorkerMirroredStrategy`.\r
* `tf.keras`:\r
  * Added `all_reduce_sum_gradients` argument to `tf.keras.optimizer.Optimizer.apply_gradients`. This allows custom gradient aggregation and processing aggregated gradients in custom training loop.\r
  * Allow `pathlib.Path` paths for loading models via Keras API.\r
* `tf.function`/AutoGraph:\r
  * AutoGraph is now available in `ReplicaContext.merge_call`, `Strategy.extended.update` and `Strategy.extended.update_non_slot`.\r
  * Experimental support for shape invariants has been enabled in `tf.function`. See the API docs for `tf.autograph.experimental.set_loop_options` for additonal info.\r
  * AutoGraph error messages now exclude frames corresponding to APIs internal to AutoGraph.\r
  * Improve shape inference for `tf.function` input arguments to unlock more Grappler optimizations in TensorFlow 2.x.\r
  * Improve automatic control dependency management of resources by allowing resource reads to occur in parallel and synchronizing only on writes.\r
  * Fix execution order of multiple stateful calls to `experimental_run_v2` in `tf.function`.\r
  * You can now iterate over `RaggedTensors` using a for loop inside `tf.function`.\r
* `tf.lite`:\r
  *  Migrated the `tf.lite` C inference API out of experimental into lite/c.\r
  * Add an option to disallow `NNAPI` CPU / partial acceleration on Android 10\r
  * TFLite Android AARs now include the C headers and APIs are required to use TFLite from native code.\r
  * Refactors the delegate and delegate kernel sources to allow usage in the linter.\r
  * Limit delegated ops to actually supported ones if a device name is specified or `NNAPI` CPU Fallback is disabled.\r
  * TFLite now supports `tf.math.reciprocal1` op by lowering to `tf.div op`.\r
  * TFLite's unpack op now supports boolean tensor inputs.\r
  * Microcontroller and embedded code moved from experimental to main TensorFlow Lite folder\r
  * Check for large TFLite tensors.\r
  * Fix GPU delegate crash with C++17.\r
  * Add 5D support to TFLite `strided_slice`.\r
  * Fix error in delegation of `DEPTH_TO_SPACE` to `NNAPI` causing op not to be accelerated.\r
  * Fix segmentation fault when running a model with LSTM nodes using `NNAPI` Delegate\r
  * Fix `NNAPI` delegate failure when an operand for Maximum/Minimum operation is a scalar.\r
  * Fix `NNAPI` delegate failure when Axis input for reduce operation is a scalar.\r
  * Expose option to limit the number of partitions that will be delegated to `NNAPI`.\r
  * If a target accelerator is specified, use its feature level to determine operations to delegate instead of SDK version.\r
* `tf.random`:\r
  * Various random number generation improvements: \r
    * Add a fast path for default `random_uniform`\r
    * `random_seed` documentation improvement.\r
    * `RandomBinomial` broadcasts and appends the sample shape to the left rather than the right. \r
  * Added `tf.random.stateless_binomial`, `tf.random.stateless_gamma`, `tf.random.stateless_poisson`\r
  * `tf.random.stateless_uniform` now supports unbounded sampling of `int` types.\r
* Math and Linear Algebra:\r
  * Add `tf.linalg.LinearOperatorTridiag`.\r
  * Add `LinearOperatorBlockLowerTriangular`\r
  * Add broadcasting support to tf.linalg.triangular_solve[#26204](https://github.com/tensorflow/tensorflow/issues/26204), tf.math.invert_permutation.\r
  * Add `tf.math.sobol_sample` op.\r
  * Add `tf.math.xlog1py`.\r
  * Add `tf.math.special.{dawsn,expi,fresnel_cos,fresnel_sin,spence}`.\r
  * Add a Modified Discrete Cosine Transform (MDCT) and its inverse to `tf.signal`.\r
* TPU Enhancements:\r
  * Refactor `TpuClusterResolver` to move shared logic to a separate pip package.\r
  * Support configuring TPU software version from cloud tpu client.\r
  * Allowed TPU embedding weight decay factor to be multiplied by learning rate.\r
* XLA Support:\r
  * Add standalone XLA AOT runtime target + relevant .cc sources to pip package.\r
  * Add check for memory alignment to MemoryAllocation::MemoryAllocation() on 32-bit ARM. This ensures a deterministic early exit instead of a hard to debug bus error later.\r
  * `saved_model_cli aot_compile_cpu` allows you to compile saved models to XLA header+object files and include them in your C++ programs.\r
  * Enable `Igamma`, `Igammac` for XLA.\r
  * XLA reduction emitter is deterministic when the environment variable `TF_DETERMINISTIC_OPS` is set.\r
* Tracing and Debugging:\r
  * Add source, destination name to `_send` traceme to allow easier debugging.\r
  * Add traceme event to `fastpathexecute`.\r
* Other:\r
  * Fix an issue with AUC.reset_states for multi-label AUC [#35852](https://github.com/tensorflow/tensorflow/issues/35852)\r
  * Fix the TF upgrade script to not delete files when there is a parsing error and the output mode is `in-place`.\r
  * Move `tensorflow/core:framework/*_pyclif` rules to `tensorflow/core/framework:*_pyclif`.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
372046933, 8bitmp3, aaronhma, Abin Shahab, Aditya Patwardhan, Agoniii, Ahti Kitsik, Alan Yee, Albin Joy, Alex Hoffman, Alexander Grund, Alexandre E. Eichenberger, Amit Kumar Jaiswal, amoitra, Andrew Anderson, Angus-Luo, Anthony Barbier, Anton Kachatkou, Anuj Rawat, archis, Arpan-Dhatt, Arvind Sundararajan, Ashutosh Hathidara, autoih, Bairen Yi, Balint Cristian, Bas Aarts, BashirSbaiti, Basit Ayantunde, Ben Barsdell, Benjamin Gaillard, boron, Brett Koonce, Bryan Cutler, Christian Goll, Christian Sachs, Clayne Robison, comet, Daniel Falbel, Daria Zhuravleva, darsh8200, David Truby, Dayananda-V, deepakm, Denis Khalikov, Devansh Singh, Dheeraj R Reddy, Diederik Van Liere, Diego Caballero, Dominic Jack, dothinking, Douman, Drake Gens, Duncan Riach, Ehsan Toosi, ekuznetsov139, Elena Zhelezina, elzino, Ending2015a, Eric Schweitz, Erik Zettel, Ethan Saadia, Eugene Kuznetsov, Evgeniy Zheltonozhskiy, Ewout Ter Hoeven, exfalso, FAIJUL, Fangjun Kuang, Fei Hu, Frank Laub, Frederic Bastien, Fredrik Knutsson, frreiss, Frédéric Rechtenstein, fsx950223, Gaurav Singh, gbaned, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, Hans Gaiser, Hans Pabst, Haoyu Wu, Harry Slatyer, hsahovic, Hugo, Hugo Sjöberg, IrinaM21, jacco, Jake Tae, Jean-Denis Lesage, Jean-Michel Gorius, Jeff Daily, Jens Elofsson, Jerry Shih, jerryyin, Jin Mingjian, Jinjing Zhou, JKIsaacLee, jojimonv, Jonathan Dekhtiar, Jose Ignacio Gomez, Joseph-Rance, Judd, Julian Gross, Kaixi Hou, Kaustubh Maske Patil, Keunwoo Choi, Kevin Hanselman, Khor Chean Wei, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Koki Ibukuro, Kristian Holsheimer, kurileo, Lakshay Tokas, Lee Netherton, leike666666, Leslie-Fang-Intel, Li, Guizi, LIUJIAN435, Lukas Geiger, Lyo Nguyen, madisetti, Maher Jendoubi, Mahmoud Abuzaina, Manuel Freiberger, Marcel Koester, Marco Jacopo Ferrarotti, Markus Franke, marload, Mbah-Javis, mbhuiyan, Meng Zhang, Michael Liao, MichaelKonobeev, Michal Tarnowski, Milan Straka, minoring, Mohamed Nour Abouelseoud, MoussaMM, Mrinal Jain, mrTsjolder, Måns Nilsson, Namrata Bhave, Nicholas Gao, Niels Ole Salscheider, nikochiko, Niranjan Hasabnis, Nishidha Panpaliya, nmostafa, Noah Trenaman, nuka137, Officium, Owen L - Sfe, Pallavi G, Paul Andrey, Peng Sun, Peng Wu, Phil Pearl, PhilipMay, pingsutw, Pooya Davoodi, PragmaTwice, pshiko, Qwerty71, R Gomathi, Rahul Huilgol, Richard Xiao, Rick Wierenga, Roberto Rosmaninho, ruchit2801, Rushabh Vasani, Sami, Sana Damani, Sarvesh Dubey, Sasan Jafarnejad, Sergii Khomenko, Shane Smiskol, Shaochen Shi, sharkdtu, Shawn Presser, ShengYang1, Shreyash Patodia, Shyam Sundar Dhanabalan, Siju Samuel, Somyajit Chakraborty Sam, Srihari Humbarwadi, srinivasan.narayanamoorthy, Srishti Yadav, Steph-En-M, Stephan Uphoff, Stephen Mugisha, SumanSudhir, Taehun Kim, Tamas Bela Feher, TengLu, Tetragramm, Thierry Herrmann, Tian Jin, tigertang, Tom Carchrae, Tom Forbes, Trent Lo, Victor Peng, vijayphoenix, Vincent Abriou, Vishal Bhola, Vishnuvardhan Janapati, vladbataev, VoVAllen, Wallyss Lima, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, William Zhang, Xiaoming (Jason) Cui, Xiaoquan Kong, Xinan Jiang, Yasir Modak, Yasuhiro Matsumoto, Yaxun (Sam) Liu, Yong Tang, Ytyt-Yt, yuan, Yuan Mingshuai, Yuan Tang, Yuki Ueda, Yusup, zhangshijin, zhuwenxi"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.2.0-rc2"^^xsd:anyURI ;
    sd:hasVersionId "v2.2.0-rc2"^^xsd:string ;
    sd:name "TensorFlow Release 2.2.0-rc2"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0-rc3> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2020-04-10T22:59:49+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-04-14T00:11:30+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.2.0\r
\r
## Major Features and Improvements\r
\r
* Replaced the scalar type for string tensors from `std::string` to `tensorflow::tstring` which is now ABI stable.\r
* A new Profiler for TF 2 for CPU/GPU/TPU. It offers both device and host performance analysis, including input pipeline and TF Ops. Optimization advisory is provided whenever possible. Please see [this tutorial](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras) and [guide](https://www.tensorflow.org/guide/profiler) for usage guidelines.\r
* Export C++ functions to Python using `pybind11` as opposed to `SWIG` as a part of our [deprecation of swig efforts](https://github.com/tensorflow/community/blob/master/rfcs/20190208-pybind11.md).\r
* `tf.distribute`:\r
  * Support added for global sync `BatchNormalization` by using the newly added `tf.keras.layers.experimental.SyncBatchNormalization` layer. This layer will sync `BatchNormalization` statistics every step across all replicas taking part in sync training.\r
  * Performance improvements for GPU multi-worker distributed training using `tf.distribute.experimental.MultiWorkerMirroredStrategy`\r
    * Update NVIDIA `NCCL` to `2.5.7-1` for better performance and performance tuning. Please see [nccl developer guide](https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/docs/env.html) for more information on this.\r
    * Support gradient `allreduce` in `float16`. See this [example](https://github.com/tensorflow/models/blob/master/official/staging/training/grad_utils.py) usage.\r
    * Experimental support of [all reduce gradient packing](https://www.tensorflow.org/api_docs/python/tf/distribute/experimental/CollectiveHints) to allow overlapping gradient aggregation with backward path computation. \r
    * Deprecated `experimental_run_v2` method for distribution strategies and renamed the method `run` as it is no longer experimental.\r
* `tf.keras`:\r
  * `Model.fit` major improvements:\r
     * You can now use custom training logic with `Model.fit` by overriding `Model.train_step`.\r
     * Easily write state-of-the-art training loops without worrying about all of the features `Model.fit` handles for you (distribution strategies, callbacks, data formats, looping logic, etc)\r
     * See the default [`Model.train_step`](https://github.com/tensorflow/tensorflow/blob/1381fc8e15e22402417b98e3881dfd409998daea/tensorflow/python/keras/engine/training.py#L540) for an example of what this function should look like. Same applies for validation and inference via `Model.test_step` and `Model.predict_step`.\r
     * SavedModel uses its own `Model._saved_model_inputs_spec` attr now instead of\r
       relying on `Model.inputs` and `Model.input_names`, which are no longer set for subclass Models. \r
       This attr is set in eager, `tf.function`, and graph modes. This gets rid of the need for users to \r
       manually call `Model._set_inputs` when using Custom Training Loops(CTLs).\r
     * Dynamic shapes are supported for generators by calling the Model on the first batch we "peek" from the generator. \r
       This used to happen implicitly in `Model._standardize_user_data`. Long-term, a solution where the \r
       `DataAdapter` doesn't need to call the Model is probably preferable.\r
  * The SavedModel format now supports all Keras built-in layers (including metrics, preprocessing layers, and stateful RNN layers)\r
  * Update Keras batch normalization layer to use the running mean and average computation in the `fused_batch_norm`. You should see significant performance improvements when using `fused_batch_norm` in Eager mode.\r
\r
* `tf.lite`:\r
  * Enable TFLite experimental new converter by default.\r
* XLA\r
  * XLA now builds and works on windows. All prebuilt packages come with XLA available.\r
  * XLA can be [enabled for a `tf.function`](https://www.tensorflow.org/xla#explicit_compilation_with_tffunction\r
) with “compile or throw exception” semantics on CPU and GPU.\r
\r
## Breaking Changes\r
* `tf.keras`: \r
  * In `tf.keras.applications` the name of the "top" layer has been standardized to "predictions". This is only a problem if your code relies on the exact name of the layer.\r
  * Huber loss function has been updated to be consistent with other Keras losses. It now computes mean over the last axis of per-sample losses before applying the reduction function.\r
* AutoGraph no longer converts functions passed to `tf.py_function`, `tf.py_func` and `tf.numpy_function`.\r
* Deprecating `XLA_CPU` and `XLA_GPU` devices with this release.\r
* Increasing the minimum bazel version to build TF to 2.0.0 to use Bazel's `cc_experimental_shared_library`.\r
* Keras compile/fit behavior for functional and subclassed models have been unified. Model properties such as `metrics`, `metrics_names` will now be available only after **training/evaluating the model on actual data** for functional models. `metrics` will **now include** model `loss` and output losses.`loss_functions` property has been removed from the model. This was an undocumented property that was accidentally public and has now been removed.\r
\r
## Known Caveats\r
* Due to certain unforeseen circumstances, we are unable to release MacOS py3.8 binaries, but Windows/Linux binaries for py3.8 are available.\r
* The current TensorFlow release now **requires** [gast](https://pypi.org/project/gast/) version 0.3.3. \r
\r
## Bug Fixes and Other Changes\r
* `tf.data`:\r
  * Removed `autotune_algorithm` from experimental optimization options.\r
* TF Core:\r
  * `tf.constant` always creates CPU tensors irrespective of the current device context.  \r
  * Eager `TensorHandles` maintain a list of mirrors for any copies to local or remote devices. This avoids any redundant copies due to op execution.\r
  * For `tf.Tensor` & `tf.Variable`, `.experimental_ref()` is no longer experimental and is available as simply `.ref()`.\r
  * `pfor/vectorized_map`: Added support for vectorizing 56 more ops. Vectorizing `tf.cond` is also supported now.\r
  * Set as much partial shape as we can infer statically within the gradient impl of the gather op.\r
  * Gradient of `tf.while_loop` emits `StatelessWhile` op if `cond` and body functions are stateless. This allows multiple gradients while ops to run in parallel under distribution strategy.\r
  * Speed up `GradientTape` in eager mode by auto-generating list of op inputs/outputs which are unused and hence not cached for gradient functions.\r
  * Support `back_prop=False` in `while_v2` but mark it as deprecated.\r
  * Improve error message when attempting to use `None` in data-dependent control flow.\r
  * Add `RaggedTensor.numpy()`.\r
  * Update `RaggedTensor.__getitem__` to preserve uniform dimensions & allow indexing into uniform dimensions.\r
  * Update `tf.expand_dims` to always insert the new dimension as a non-ragged dimension.\r
  * Update `tf.embedding_lookup` to use `partition_strategy` and `max_norm` when `ids` is ragged.\r
  * Allow `batch_dims==rank(indices)` in `tf.gather`.\r
  * Add support for bfloat16 in `tf.print`.  \r
* `tf.distribute`: \r
  * Support `embedding_column` with variable-length input features for `MultiWorkerMirroredStrategy`.\r
* `tf.keras`:\r
  * Added `experimental_aggregate_gradients` argument to `tf.keras.optimizer.Optimizer.apply_gradients`. This allows custom gradient aggregation and processing aggregated gradients in custom training loop.\r
  * Allow `pathlib.Path` paths for loading models via Keras API.\r
* `tf.function`/AutoGraph:\r
  * AutoGraph is now available in `ReplicaContext.merge_call`, `Strategy.extended.update` and `Strategy.extended.update_non_slot`.\r
  * Experimental support for shape invariants has been enabled in `tf.function`. See the API docs for `tf.autograph.experimental.set_loop_options` for additonal info.\r
  * AutoGraph error messages now exclude frames corresponding to APIs internal to AutoGraph.\r
  * Improve shape inference for `tf.function` input arguments to unlock more Grappler optimizations in TensorFlow 2.x.\r
  * Improve automatic control dependency management of resources by allowing resource reads to occur in parallel and synchronizing only on writes.\r
  * Fix execution order of multiple stateful calls to `experimental_run_v2` in `tf.function`.\r
  * You can now iterate over `RaggedTensors` using a for loop inside `tf.function`.\r
* `tf.lite`:\r
  *  Migrated the `tf.lite` C inference API out of experimental into lite/c.\r
  * Add an option to disallow `NNAPI` CPU / partial acceleration on Android 10\r
  * TFLite Android AARs now include the C headers and APIs are required to use TFLite from native code.\r
  * Refactors the delegate and delegate kernel sources to allow usage in the linter.\r
  * Limit delegated ops to actually supported ones if a device name is specified or `NNAPI` CPU Fallback is disabled.\r
  * TFLite now supports `tf.math.reciprocal1` op by lowering to `tf.div op`.\r
  * TFLite's unpack op now supports boolean tensor inputs.\r
  * Microcontroller and embedded code moved from experimental to main TensorFlow Lite folder\r
  * Check for large TFLite tensors.\r
  * Fix GPU delegate crash with C++17.\r
  * Add 5D support to TFLite `strided_slice`.\r
  * Fix error in delegation of `DEPTH_TO_SPACE` to `NNAPI` causing op not to be accelerated.\r
  * Fix segmentation fault when running a model with LSTM nodes using `NNAPI` Delegate\r
  * Fix `NNAPI` delegate failure when an operand for Maximum/Minimum operation is a scalar.\r
  * Fix `NNAPI` delegate failure when Axis input for reduce operation is a scalar.\r
  * Expose option to limit the number of partitions that will be delegated to `NNAPI`.\r
  * If a target accelerator is specified, use its feature level to determine operations to delegate instead of SDK version.\r
* `tf.random`:\r
  * Various random number generation improvements: \r
    * Add a fast path for default `random_uniform`\r
    * `random_seed` documentation improvement.\r
    * `RandomBinomial` broadcasts and appends the sample shape to the left rather than the right. \r
  * Added `tf.random.stateless_binomial`, `tf.random.stateless_gamma`, `tf.random.stateless_poisson`\r
  * `tf.random.stateless_uniform` now supports unbounded sampling of `int` types.\r
* Math and Linear Algebra:\r
  * Add `tf.linalg.LinearOperatorTridiag`.\r
  * Add `LinearOperatorBlockLowerTriangular`\r
  * Add broadcasting support to tf.linalg.triangular_solve[#26204](https://github.com/tensorflow/tensorflow/issues/26204), tf.math.invert_permutation.\r
  * Add `tf.math.sobol_sample` op.\r
  * Add `tf.math.xlog1py`.\r
  * Add `tf.math.special.{dawsn,expi,fresnel_cos,fresnel_sin,spence}`.\r
  * Add a Modified Discrete Cosine Transform (MDCT) and its inverse to `tf.signal`.\r
* TPU Enhancements:\r
  * Refactor `TpuClusterResolver` to move shared logic to a separate pip package.\r
  * Support configuring TPU software version from cloud tpu client.\r
  * Allowed TPU embedding weight decay factor to be multiplied by learning rate.\r
* XLA Support:\r
  * Add standalone XLA AOT runtime target + relevant .cc sources to pip package.\r
  * Add check for memory alignment to MemoryAllocation::MemoryAllocation() on 32-bit ARM. This ensures a deterministic early exit instead of a hard to debug bus error later.\r
  * `saved_model_cli aot_compile_cpu` allows you to compile saved models to XLA header+object files and include them in your C++ programs.\r
  * Enable `Igamma`, `Igammac` for XLA.\r
  * XLA reduction emitter is deterministic when the environment variable `TF_DETERMINISTIC_OPS` is set.\r
* Tracing and Debugging:\r
  * Add source, destination name to `_send` traceme to allow easier debugging.\r
  * Add traceme event to `fastpathexecute`.\r
* Other:\r
  * Fix an issue with AUC.reset_states for multi-label AUC [#35852](https://github.com/tensorflow/tensorflow/issues/35852)\r
  * Fix the TF upgrade script to not delete files when there is a parsing error and the output mode is `in-place`.\r
  * Move `tensorflow/core:framework/*_pyclif` rules to `tensorflow/core/framework:*_pyclif`.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
372046933, 8bitmp3, aaronhma, Abin Shahab, Aditya Patwardhan, Agoniii, Ahti Kitsik, Alan Yee, Albin Joy, Alex Hoffman, Alexander Grund, Alexandre E. Eichenberger, Amit Kumar Jaiswal, amoitra, Andrew Anderson, Angus-Luo, Anthony Barbier, Anton Kachatkou, Anuj Rawat, archis, Arpan-Dhatt, Arvind Sundararajan, Ashutosh Hathidara, autoih, Bairen Yi, Balint Cristian, Bas Aarts, BashirSbaiti, Basit Ayantunde, Ben Barsdell, Benjamin Gaillard, boron, Brett Koonce, Bryan Cutler, Christian Goll, Christian Sachs, Clayne Robison, comet, Daniel Falbel, Daria Zhuravleva, darsh8200, David Truby, Dayananda-V, deepakm, Denis Khalikov, Devansh Singh, Dheeraj R Reddy, Diederik Van Liere, Diego Caballero, Dominic Jack, dothinking, Douman, Drake Gens, Duncan Riach, Ehsan Toosi, ekuznetsov139, Elena Zhelezina, elzino, Ending2015a, Eric Schweitz, Erik Zettel, Ethan Saadia, Eugene Kuznetsov, Evgeniy Zheltonozhskiy, Ewout Ter Hoeven, exfalso, FAIJUL, Fangjun Kuang, Fei Hu, Frank Laub, Frederic Bastien, Fredrik Knutsson, frreiss, Frédéric Rechtenstein, fsx950223, Gaurav Singh, gbaned, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, Hans Gaiser, Hans Pabst, Haoyu Wu, Harry Slatyer, hsahovic, Hugo, Hugo Sjöberg, IrinaM21, jacco, Jake Tae, Jean-Denis Lesage, Jean-Michel Gorius, Jeff Daily, Jens Elofsson, Jerry Shih, jerryyin, Jin Mingjian, Jinjing Zhou, JKIsaacLee, jojimonv, Jonathan Dekhtiar, Jose Ignacio Gomez, Joseph-Rance, Judd, Julian Gross, Kaixi Hou, Kaustubh Maske Patil, Keunwoo Choi, Kevin Hanselman, Khor Chean Wei, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Koki Ibukuro, Kristian Holsheimer, kurileo, Lakshay Tokas, Lee Netherton, leike666666, Leslie-Fang-Intel, Li, Guizi, LIUJIAN435, Lukas Geiger, Lyo Nguyen, madisetti, Maher Jendoubi, Mahmoud Abuzaina, Manuel Freiberger, Marcel Koester, Marco Jacopo Ferrarotti, Markus Franke, marload, Mbah-Javis, mbhuiyan, Meng Zhang, Michael Liao, MichaelKonobeev, Michal Tarnowski, Milan Straka, minoring, Mohamed Nour Abouelseoud, MoussaMM, Mrinal Jain, mrTsjolder, Måns Nilsson, Namrata Bhave, Nicholas Gao, Niels Ole Salscheider, nikochiko, Niranjan Hasabnis, Nishidha Panpaliya, nmostafa, Noah Trenaman, nuka137, Officium, Owen L - Sfe, Pallavi G, Paul Andrey, Peng Sun, Peng Wu, Phil Pearl, PhilipMay, pingsutw, Pooya Davoodi, PragmaTwice, pshiko, Qwerty71, R Gomathi, Rahul Huilgol, Richard Xiao, Rick Wierenga, Roberto Rosmaninho, ruchit2801, Rushabh Vasani, Sami, Sana Damani, Sarvesh Dubey, Sasan Jafarnejad, Sergii Khomenko, Shane Smiskol, Shaochen Shi, sharkdtu, Shawn Presser, ShengYang1, Shreyash Patodia, Shyam Sundar Dhanabalan, Siju Samuel, Somyajit Chakraborty Sam, Srihari Humbarwadi, srinivasan.narayanamoorthy, Srishti Yadav, Steph-En-M, Stephan Uphoff, Stephen Mugisha, SumanSudhir, Taehun Kim, Tamas Bela Feher, TengLu, Tetragramm, Thierry Herrmann, Tian Jin, tigertang, Tom Carchrae, Tom Forbes, Trent Lo, Victor Peng, vijayphoenix, Vincent Abriou, Vishal Bhola, Vishnuvardhan Janapati, vladbataev, VoVAllen, Wallyss Lima, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, William Zhang, Xiaoming (Jason) Cui, Xiaoquan Kong, Xinan Jiang, Yasir Modak, Yasuhiro Matsumoto, Yaxun (Sam) Liu, Yong Tang, Ytyt-Yt, yuan, Yuan Mingshuai, Yuan Tang, Yuki Ueda, Yusup, zhangshijin, zhuwenxi"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.2.0-rc3"^^xsd:anyURI ;
    sd:hasVersionId "v2.2.0-rc3"^^xsd:string ;
    sd:name "TensorFlow 2.2.0-rc3"^^xsd:string .

<https://example.org/objects/SoftwareVersion/tensorflow/v2.2.0-rc4> a sd:SoftwareVersion ;
    sd:author <https://example.org/objects/Person/tensorflow-jenkins> ;
    sd:dateCreated "2020-04-29T17:43:22+00:00"^^xsd:dateTime ;
    sd:datePublished "2020-04-30T00:24:05+00:00"^^xsd:dateTime ;
    sd:description """# Release 2.2.0\r
\r
TensorFlow 2.2 discontinues support for Python 2, [previously announced](https://groups.google.com/a/tensorflow.org/d/msg/announce/gVwS5RC8mds/dCt1ka2XAAAJ) as following [Python 2's EOL on January 1, 2020](https://www.python.org/dev/peps/pep-0373/#update).\r
\r
Coinciding with this change, new releases of [TensorFlow's Docker images](https://hub.docker.com/r/tensorflow/tensorflow/) provide Python 3 exclusively. Because all images now use Python 3, Docker tags containing `-py3` will no longer be provided and existing `-py3` tags like `latest-py3` will not be updated.   \r
\r
## Major Features and Improvements\r
\r
* Replaced the scalar type for string tensors from `std::string` to `tensorflow::tstring` which is now ABI stable.\r
* A new Profiler for TF 2 for CPU/GPU/TPU. It offers both device and host performance analysis, including input pipeline and TF Ops. Optimization advisory is provided whenever possible. Please see [this tutorial](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras) and [guide](https://www.tensorflow.org/guide/profiler) for usage guidelines.\r
* Export C++ functions to Python using `pybind11` as opposed to `SWIG` as a part of our [deprecation of swig efforts](https://github.com/tensorflow/community/blob/master/rfcs/20190208-pybind11.md).\r
* `tf.distribute`:\r
  * Support added for global sync `BatchNormalization` by using the newly added `tf.keras.layers.experimental.SyncBatchNormalization` layer. This layer will sync `BatchNormalization` statistics every step across all replicas taking part in sync training.\r
  * Performance improvements for GPU multi-worker distributed training using `tf.distribute.experimental.MultiWorkerMirroredStrategy`\r
    * Update NVIDIA `NCCL` to `2.5.7-1` for better performance and performance tuning. Please see [nccl developer guide](https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/docs/env.html) for more information on this.\r
    * Support gradient `allreduce` in `float16`. See this [example](https://github.com/tensorflow/models/blob/master/official/staging/training/grad_utils.py) usage.\r
    * Experimental support of [all reduce gradient packing](https://www.tensorflow.org/api_docs/python/tf/distribute/experimental/CollectiveHints) to allow overlapping gradient aggregation with backward path computation. \r
    * Deprecated `experimental_run_v2` method for distribution strategies and renamed the method `run` as it is no longer experimental.\r
    * Add `CompositeTensor` support for DistributedIterators. This should help prevent unnecessary function retracing and memory leaks.\r
* `tf.keras`:\r
  * `Model.fit` major improvements:\r
     * You can now use custom training logic with `Model.fit` by overriding `Model.train_step`.\r
     * Easily write state-of-the-art training loops without worrying about all of the features `Model.fit` handles for you (distribution strategies, callbacks, data formats, looping logic, etc)\r
     * See the default [`Model.train_step`](https://github.com/tensorflow/tensorflow/blob/1381fc8e15e22402417b98e3881dfd409998daea/tensorflow/python/keras/engine/training.py#L540) for an example of what this function should look like. Same applies for validation and inference via `Model.test_step` and `Model.predict_step`.\r
     * SavedModel uses its own `Model._saved_model_inputs_spec` attr now instead of\r
       relying on `Model.inputs` and `Model.input_names`, which are no longer set for subclass Models. \r
       This attr is set in eager, `tf.function`, and graph modes. This gets rid of the need for users to \r
       manually call `Model._set_inputs` when using Custom Training Loops(CTLs).\r
     * Dynamic shapes are supported for generators by calling the Model on the first batch we "peek" from the generator. \r
       This used to happen implicitly in `Model._standardize_user_data`. Long-term, a solution where the \r
       `DataAdapter` doesn't need to call the Model is probably preferable.\r
  * The SavedModel format now supports all Keras built-in layers (including metrics, preprocessing layers, and stateful RNN layers)\r
  * Update Keras batch normalization layer to use the running mean and average computation in the `fused_batch_norm`. You should see significant performance improvements when using `fused_batch_norm` in Eager mode.\r
\r
* `tf.lite`:\r
  * Enable TFLite experimental new converter by default.\r
* XLA\r
  * XLA now builds and works on windows. All prebuilt packages come with XLA available.\r
  * XLA can be [enabled for a `tf.function`](https://www.tensorflow.org/xla#explicit_compilation_with_tffunction\r
) with “compile or throw exception” semantics on CPU and GPU.\r
\r
## Breaking Changes\r
* `tf.keras`: \r
  * In `tf.keras.applications` the name of the "top" layer has been standardized to "predictions". This is only a problem if your code relies on the exact name of the layer.\r
  * Huber loss function has been updated to be consistent with other Keras losses. It now computes mean over the last axis of per-sample losses before applying the reduction function.\r
* AutoGraph no longer converts functions passed to `tf.py_function`, `tf.py_func` and `tf.numpy_function`.\r
* Deprecating `XLA_CPU` and `XLA_GPU` devices with this release.\r
* Increasing the minimum bazel version to build TF to 2.0.0 to use Bazel's `cc_experimental_shared_library`.\r
* Keras compile/fit behavior for functional and subclassed models have been unified. Model properties such as `metrics`, `metrics_names` will now be available only after **training/evaluating the model on actual data** for functional models. `metrics` will **now include** model `loss` and output losses.`loss_functions` property has been removed from the model. This was an undocumented property that was accidentally public and has now been removed.\r
\r
## Known Caveats\r
* The current TensorFlow release now **requires** [gast](https://pypi.org/project/gast/) version 0.3.3. \r
* There is a [known issue](https://github.com/tensorflow/tensorflow/issues/39038) that might surface with `CompositeTensor` on TPU pods. As a temporary workaround you can set `_enable_legacy_iterators` to True.\r
\r
## Bug Fixes and Other Changes\r
* `tf.data`:\r
  * Removed `autotune_algorithm` from experimental optimization options.\r
* TF Core:\r
  * `tf.constant` always creates CPU tensors irrespective of the current device context.  \r
  * Eager `TensorHandles` maintain a list of mirrors for any copies to local or remote devices. This avoids any redundant copies due to op execution.\r
  * For `tf.Tensor` & `tf.Variable`, `.experimental_ref()` is no longer experimental and is available as simply `.ref()`.\r
  * `pfor/vectorized_map`: Added support for vectorizing 56 more ops. Vectorizing `tf.cond` is also supported now.\r
  * Set as much partial shape as we can infer statically within the gradient impl of the gather op.\r
  * Gradient of `tf.while_loop` emits `StatelessWhile` op if `cond` and body functions are stateless. This allows multiple gradients while ops to run in parallel under distribution strategy.\r
  * Speed up `GradientTape` in eager mode by auto-generating list of op inputs/outputs which are unused and hence not cached for gradient functions.\r
  * Support `back_prop=False` in `while_v2` but mark it as deprecated.\r
  * Improve error message when attempting to use `None` in data-dependent control flow.\r
  * Add `RaggedTensor.numpy()`.\r
  * Update `RaggedTensor.__getitem__` to preserve uniform dimensions & allow indexing into uniform dimensions.\r
  * Update `tf.expand_dims` to always insert the new dimension as a non-ragged dimension.\r
  * Update `tf.embedding_lookup` to use `partition_strategy` and `max_norm` when `ids` is ragged.\r
  * Allow `batch_dims==rank(indices)` in `tf.gather`.\r
  * Add support for bfloat16 in `tf.print`.  \r
* `tf.distribute`: \r
  * Support `embedding_column` with variable-length input features for `MultiWorkerMirroredStrategy`.\r
* `tf.keras`:\r
  * Added `experimental_aggregate_gradients` argument to `tf.keras.optimizer.Optimizer.apply_gradients`. This allows custom gradient aggregation and processing aggregated gradients in custom training loop.\r
  * Allow `pathlib.Path` paths for loading models via Keras API.\r
* `tf.function`/AutoGraph:\r
  * AutoGraph is now available in `ReplicaContext.merge_call`, `Strategy.extended.update` and `Strategy.extended.update_non_slot`.\r
  * Experimental support for shape invariants has been enabled in `tf.function`. See the API docs for `tf.autograph.experimental.set_loop_options` for additonal info.\r
  * AutoGraph error messages now exclude frames corresponding to APIs internal to AutoGraph.\r
  * Improve shape inference for `tf.function` input arguments to unlock more Grappler optimizations in TensorFlow 2.x.\r
  * Improve automatic control dependency management of resources by allowing resource reads to occur in parallel and synchronizing only on writes.\r
  * Fix execution order of multiple stateful calls to `experimental_run_v2` in `tf.function`.\r
  * You can now iterate over `RaggedTensors` using a for loop inside `tf.function`.\r
* `tf.lite`:\r
  *  Migrated the `tf.lite` C inference API out of experimental into lite/c.\r
  * Add an option to disallow `NNAPI` CPU / partial acceleration on Android 10\r
  * TFLite Android AARs now include the C headers and APIs are required to use TFLite from native code.\r
  * Refactors the delegate and delegate kernel sources to allow usage in the linter.\r
  * Limit delegated ops to actually supported ones if a device name is specified or `NNAPI` CPU Fallback is disabled.\r
  * TFLite now supports `tf.math.reciprocal1` op by lowering to `tf.div op`.\r
  * TFLite's unpack op now supports boolean tensor inputs.\r
  * Microcontroller and embedded code moved from experimental to main TensorFlow Lite folder\r
  * Check for large TFLite tensors.\r
  * Fix GPU delegate crash with C++17.\r
  * Add 5D support to TFLite `strided_slice`.\r
  * Fix error in delegation of `DEPTH_TO_SPACE` to `NNAPI` causing op not to be accelerated.\r
  * Fix segmentation fault when running a model with LSTM nodes using `NNAPI` Delegate\r
  * Fix `NNAPI` delegate failure when an operand for Maximum/Minimum operation is a scalar.\r
  * Fix `NNAPI` delegate failure when Axis input for reduce operation is a scalar.\r
  * Expose option to limit the number of partitions that will be delegated to `NNAPI`.\r
  * If a target accelerator is specified, use its feature level to determine operations to delegate instead of SDK version.\r
* `tf.random`:\r
  * Various random number generation improvements: \r
    * Add a fast path for default `random_uniform`\r
    * `random_seed` documentation improvement.\r
    * `RandomBinomial` broadcasts and appends the sample shape to the left rather than the right. \r
  * Added `tf.random.stateless_binomial`, `tf.random.stateless_gamma`, `tf.random.stateless_poisson`\r
  * `tf.random.stateless_uniform` now supports unbounded sampling of `int` types.\r
* Math and Linear Algebra:\r
  * Add `tf.linalg.LinearOperatorTridiag`.\r
  * Add `LinearOperatorBlockLowerTriangular`\r
  * Add broadcasting support to tf.linalg.triangular_solve[#26204](https://github.com/tensorflow/tensorflow/issues/26204), tf.math.invert_permutation.\r
  * Add `tf.math.sobol_sample` op.\r
  * Add `tf.math.xlog1py`.\r
  * Add `tf.math.special.{dawsn,expi,fresnel_cos,fresnel_sin,spence}`.\r
  * Add a Modified Discrete Cosine Transform (MDCT) and its inverse to `tf.signal`.\r
* TPU Enhancements:\r
  * Refactor `TpuClusterResolver` to move shared logic to a separate pip package.\r
  * Support configuring TPU software version from cloud tpu client.\r
  * Allowed TPU embedding weight decay factor to be multiplied by learning rate.\r
* XLA Support:\r
  * Add standalone XLA AOT runtime target + relevant .cc sources to pip package.\r
  * Add check for memory alignment to MemoryAllocation::MemoryAllocation() on 32-bit ARM. This ensures a deterministic early exit instead of a hard to debug bus error later.\r
  * `saved_model_cli aot_compile_cpu` allows you to compile saved models to XLA header+object files and include them in your C++ programs.\r
  * Enable `Igamma`, `Igammac` for XLA.\r
* Deterministic Op Functionality:\r
  * XLA reduction emitter is deterministic when the environment variable `TF_DETERMINISTIC_OPS` is set to "true" or "1". This extends deterministic `tf.nn.bias_add` back-prop functionality (and therefore also deterministic back-prop of bias-addition in Keras layers) to include when XLA JIT complilation is enabled.\r
  * Fix problem, when running on a CUDA GPU and when either environment variable `TF_DETERMINSTIC_OPS` or environment variable `TF_CUDNN_DETERMINISTIC` is set to "true" or "1", in which some layer configurations led to an exception with the message "No algorithm worked!"\r
* Tracing and Debugging:\r
  * Add source, destination name to `_send` traceme to allow easier debugging.\r
  * Add traceme event to `fastpathexecute`.\r
* Other:\r
  * Fix an issue with AUC.reset_states for multi-label AUC [#35852](https://github.com/tensorflow/tensorflow/issues/35852)\r
  * Fix the TF upgrade script to not delete files when there is a parsing error and the output mode is `in-place`.\r
  * Move `tensorflow/core:framework/*_pyclif` rules to `tensorflow/core/framework:*_pyclif`.\r
\r
## Thanks to our Contributors\r
\r
This release contains contributions from many people at Google, as well as:\r
\r
372046933, 8bitmp3, aaronhma, Abin Shahab, Aditya Patwardhan, Agoniii, Ahti Kitsik, Alan Yee, Albin Joy, Alex Hoffman, Alexander Grund, Alexandre E. Eichenberger, Amit Kumar Jaiswal, amoitra, Andrew Anderson, Angus-Luo, Anthony Barbier, Anton Kachatkou, Anuj Rawat, archis, Arpan-Dhatt, Arvind Sundararajan, Ashutosh Hathidara, autoih, Bairen Yi, Balint Cristian, Bas Aarts, BashirSbaiti, Basit Ayantunde, Ben Barsdell, Benjamin Gaillard, boron, Brett Koonce, Bryan Cutler, Christian Goll, Christian Sachs, Clayne Robison, comet, Daniel Falbel, Daria Zhuravleva, darsh8200, David Truby, Dayananda-V, deepakm, Denis Khalikov, Devansh Singh, Dheeraj R Reddy, Diederik Van Liere, Diego Caballero, Dominic Jack, dothinking, Douman, Drake Gens, Duncan Riach, Ehsan Toosi, ekuznetsov139, Elena Zhelezina, elzino, Ending2015a, Eric Schweitz, Erik Zettel, Ethan Saadia, Eugene Kuznetsov, Evgeniy Zheltonozhskiy, Ewout Ter Hoeven, exfalso, FAIJUL, Fangjun Kuang, Fei Hu, Frank Laub, Frederic Bastien, Fredrik Knutsson, frreiss, Frédéric Rechtenstein, fsx950223, Gaurav Singh, gbaned, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, Hans Gaiser, Hans Pabst, Haoyu Wu, Harry Slatyer, hsahovic, Hugo, Hugo Sjöberg, IrinaM21, jacco, Jake Tae, Jean-Denis Lesage, Jean-Michel Gorius, Jeff Daily, Jens Elofsson, Jerry Shih, jerryyin, Jin Mingjian, Jinjing Zhou, JKIsaacLee, jojimonv, Jonathan Dekhtiar, Jose Ignacio Gomez, Joseph-Rance, Judd, Julian Gross, Kaixi Hou, Kaustubh Maske Patil, Keunwoo Choi, Kevin Hanselman, Khor Chean Wei, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Koki Ibukuro, Kristian Holsheimer, kurileo, Lakshay Tokas, Lee Netherton, leike666666, Leslie-Fang-Intel, Li, Guizi, LIUJIAN435, Lukas Geiger, Lyo Nguyen, madisetti, Maher Jendoubi, Mahmoud Abuzaina, Manuel Freiberger, Marcel Koester, Marco Jacopo Ferrarotti, Markus Franke, marload, Mbah-Javis, mbhuiyan, Meng Zhang, Michael Liao, MichaelKonobeev, Michal Tarnowski, Milan Straka, minoring, Mohamed Nour Abouelseoud, MoussaMM, Mrinal Jain, mrTsjolder, Måns Nilsson, Namrata Bhave, Nicholas Gao, Niels Ole Salscheider, nikochiko, Niranjan Hasabnis, Nishidha Panpaliya, nmostafa, Noah Trenaman, nuka137, Officium, Owen L - Sfe, Pallavi G, Paul Andrey, Peng Sun, Peng Wu, Phil Pearl, PhilipMay, pingsutw, Pooya Davoodi, PragmaTwice, pshiko, Qwerty71, R Gomathi, Rahul Huilgol, Richard Xiao, Rick Wierenga, Roberto Rosmaninho, ruchit2801, Rushabh Vasani, Sami, Sana Damani, Sarvesh Dubey, Sasan Jafarnejad, Sergii Khomenko, Shane Smiskol, Shaochen Shi, sharkdtu, Shawn Presser, ShengYang1, Shreyash Patodia, Shyam Sundar Dhanabalan, Siju Samuel, Somyajit Chakraborty Sam, Srihari Humbarwadi, srinivasan.narayanamoorthy, Srishti Yadav, Steph-En-M, Stephan Uphoff, Stephen Mugisha, SumanSudhir, Taehun Kim, Tamas Bela Feher, TengLu, Tetragramm, Thierry Herrmann, Tian Jin, tigertang, Tom Carchrae, Tom Forbes, Trent Lo, Victor Peng, vijayphoenix, Vincent Abriou, Vishal Bhola, Vishnuvardhan Janapati, vladbataev, VoVAllen, Wallyss Lima, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, William Zhang, Xiaoming (Jason) Cui, Xiaoquan Kong, Xinan Jiang, Yasir Modak, Yasuhiro Matsumoto, Yaxun (Sam) Liu, Yong Tang, Ytyt-Yt, yuan, Yuan Mingshuai, Yuan Tang, Yuki Ueda, Yusup, zhangshijin, zhuwenxi"""^^xsd:string ;
    sd:downloadUrl "https://github.com/tensorflow/tensorflow/releases/tag/v2.2.0-rc4"^^xsd:anyURI ;
    sd:hasVersionId "v2.2.0-rc4"^^xsd:string ;
    sd:name "TensorFlow 2.2.0-rc4"^^xsd:string .

<https://example.org/objects/Person/mihaimaruseac> a schema:Person ;
    schema:additionalName "mihaimaruseac"^^schema:Text .

<https://example.org/objects/Person/goldiegadde> a schema:Person ;
    schema:additionalName "goldiegadde"^^schema:Text .

<https://example.org/objects/Person/tensorflow-jenkins> a schema:Person ;
    schema:additionalName "tensorflow-jenkins"^^schema:Text .

